
Input:
You are an AI code reviewer validating production-ready experiment code for research papers.

Your task is to compare the derived experiment_code with the original base_code to ensure that:
1. No important functionality has been omitted or truncated
2. All placeholders have been completely replaced with working implementations (no TODO, PLACEHOLDER, pass, or ... allowed)
3. The code is immediately executable and ready for research paper experiments
4. The derived code maintains the quality and completeness of the base foundation

# Instructions

## Core Validation Criteria
Check if the derived experiment code meets ALL of the following requirements:

1. **Complete Implementation Preservation**:
   - All functionality from base_code is preserved or properly enhanced
   - No code sections have been omitted or significantly shortened
   - Core algorithms and logic remain intact and functional
   - No reduction in code quality or completeness

2. **Complete Placeholder Replacement and Variation Implementation**:
   - All `DATASET_PLACEHOLDER` entries replaced with complete, working Hugging Face dataset loading
   - All `MODEL_PLACEHOLDER` entries replaced with complete, working model architectures
   - All `SPECIFIC_CONFIG_PLACEHOLDER` entries replaced with actual parameters
   - All run_variations are defined in both `config/smoke_test.yaml` and `config/full_experiment.yaml`
   - All run_variations are implemented in `src/model.py`
   - `config/smoke_test.yaml` contains ALL run variations in lightweight form
   - No TODO, PLACEHOLDER, pass, ..., or any incomplete implementations remain

3. **Functional Enhancement**:
   - Dataset-specific preprocessing is properly implemented
   - Model-specific configurations are correctly applied
   - Evaluation metrics are adapted for the specific experimental setup
   - All external resources are properly integrated

4. **Code Completeness**:
   - No truncated functions or incomplete implementations
   - All imports and dependencies are properly specified
   - Configuration files contain real experimental parameters
   - No "[UNCHANGED]" markers or similar placeholders remain

5. **Consistency with Base Code**:
   - Same file structure and organization
   - Consistent coding style and patterns
   - Proper error handling and logging maintained
   - All base functionality enhanced, not removed

## Detection of Common Issues
Flag the following problems if found:

- **Truncation**: Code sections that are significantly shorter than base_code equivalents
- **Omission**: Missing functions, classes, or important code blocks from base_code
- **Incomplete Replacement**: TODO, PLACEHOLDER, pass, ..., or any placeholder patterns that haven't been fully replaced with working code
- **Quality Degradation**: Simplified logic that reduces functionality
- **Structural Changes**: Unexpected modifications to the core architecture
- **Not Executable**: Code that cannot be run immediately due to missing implementations

## Output Format
Respond with a JSON object containing:
- `is_experiment_code_ready`: boolean - true if ALL criteria are met, false otherwise
- `experiment_code_issue`: string - specific issues found if any criteria are not met

# Current Research Method
{
    "Open Problems": "Even the fastest gray–box and multi-fidelity HPO methods (ASHA, PASHA, DyHPO, BOIL) still waste computation on obviously bad configurations because every trial is treated as a black box; none of the information that is already available inside the training loop – most notably the stochastic hyper-gradient obtained at almost zero cost with automatic differentiation – is used to steer the search. The open problem is: how can we inject very cheap, noisy hyper-gradient signals into existing bandit-style schedulers without redesigning their core logic?",
    "Methods": "We propose ‘One-Shot Hyper-Gradient Warm-Starts’ (OHGW), a drop-in modification for any Successive-Halving style scheduler (Hyperband / ASHA / PASHA).  1. When a new configuration x is sampled it is run for only one **mini-batch** (≈10-2% of a normal epoch).  2. In this first forward / backward pass we keep the compute graph and call automatic differentiation once more to obtain a single stochastic hyper-gradient ∂L/∂ψ for every continuous hyperparameter ψ (learning-rate, weight-decay, momentum …) exactly as in implicit hyper-gradient papers, but **without unrolling** (cost <1.2× normal mini-batch).  3. We apply one hyper-parameter update ψ←ψ−η_h ∂L/∂ψ (η_h is a fixed tiny step such as 10-3).  4. The adjusted configuration x′ – which differs from x by at most one gradient step in each hyper-parameter – is what the scheduler subsequently evaluates for its first rung (e.g. 1 epoch).  5. Everything else (promotion rules, budget doubling, stopping) is untouched.  In effect the scheduler still explores the same region, but every candidate is lightly nudged towards a valley before costly training starts.",
    "Experimental Setup": "Benchmark: CIFAR-10 with ResNet-20 and 5-dim continuous search space {log-lr, log-wd, momentum, augment-magnitude, label-smoothing}.  Scheduler baselines: ASHA, PASHA, DyHPO (their public implementations).  Our variants: ASHA+OHGW, PASHA+OHGW, DyHPO+OHGW (one-line wrapper around trial creation).  Mini-batch for warm-start: 128 images.  Hyper-gradient lr η_h=1e-3, computed with PyTorch autograd; no higher-order terms.  Each method is given the same overall GPU budget (4×V100 for 12 hours) and 50 seeds.  Metrics: (i) best test accuracy reached vs. wall-clock, (ii) total GPU hours until 93% accuracy, (iii) distribution of final hyper-parameters to check bias.",
    "Experimental Code": "# pseudo-code\nfor cfg in scheduler.sample():\n    model = build_model(cfg)\n    data = next(train_loader)            # one mini-batch\n    loss  = forward_loss(model, data)\n    grads = torch.autograd.grad(loss, cfg.continuous_params())\n    with torch.no_grad():               # one hyper step\n        for p,g in zip(cfg.continuous_params(), grads):\n            p -= eta_h * g\n    scheduler.launch(cfg)               # continue as usual",
    "Expected Result": "Across all schedules OHGW cuts the median time-to-93%-accuracy by ≈20% (ASHA 11.2→9.0 h, PASHA 7.3→5.8 h, DyHPO 6.1→4.9 h) while keeping the same final accuracy. The added warm-start costs <3% extra compute. Hyper-parameter distributions remain similar, showing no harmful bias.",
    "Expected Conclusion": "A single stochastic hyper-gradient step collected before the first rung is enough to noticeably reduce wasted resources in bandit-style HPO. Because OHGW requires only two extra autograd calls and no change to the scheduler logic, it can be retro-fitted to almost any existing gray-box optimizer, offering an attractive efficiency boost with negligible engineering effort."
}

# Experimental Design
## Experiment Strategy
Overall Experimental Strategy for Validating One-Shot Hyper-Gradient Warm-Starts (OHGW)

1. Core Hypotheses to Validate
   a. Efficiency: OHGW reduces wall-clock time and GPU hours needed by bandit-style schedulers to reach a preset performance threshold.
   b. Performance Preservation: OHGW does not hurt (and ideally preserves or slightly improves) the best final metric attainable by the underlying scheduler.
   c. Robustness & Variance: OHGW’s benefit is consistent across random seeds, search-space dimensionalities, data sets, model families and scheduler types.
   d. Generalization: The same one-line wrapper applies without retuning to tasks beyond image classification (e.g. language modelling, tabular, RL) and to both small- and large-scale training loops.
   e. Cost Overhead: Extra compute, memory and engineering overhead introduced by OHGW remain negligible (<5 % GPU-hours, <10 % peak-memory, ≤20 LoC integration).

2. Experiment Families (all experiments draw from one common pool of settings below)
   • Task Breadth: vision (CIFAR-10/100, ImageNet-1k), NLP (WikiText-103), tabular (UCI suite), RL (Atari).
   • Model Breadth: ResNet family, ViT, Transformer-LM, XGBoost, PPO-CNN.
   • Scheduler Breadth: ASHA, PASHA, DyHPO, Hyperband-BO, BOIL (if open-sourced).
   • Search-Space Breadth: 3–10 continuous hyper-parameters; mixed discrete+continuous cases to show neutrality to inapplicable params.
   • Scale Breadth: single-GPU up to 64-GPU distributed training (multi-node pools or simulated via concurrency on the 8×A100 machine).

3. Comparison Axes for Every Experiment
   • Baseline Scheduler (vanilla).
   • Baseline + Random Warm-Start in ∆ψ range (controls for mere perturbation).
   • Baseline + Multiple Hyper-Gradient Steps (ablation to check diminishing returns).
   • Scheduler-specific SoTA gradient-aware HPO if available (e.g. DyHPO, BOIL) to position OHGW competitively.

4. Metrics & Evaluation Protocol
   Primary quantitative metrics (reported as median ±IQR over ≥30 seeds):
      – T@τ: Wall-clock/GPU-hour to reach target score τ (task-specific; chosen so that vanilla reaches it within budget).
      – Best final validation/test score after fixed budget.
      – Compute Overhead: (Σ warm-start flop) ⁄ (total flop) and peak VRAM.
   Secondary diagnostics:
      – AUC of best-score-vs-time curve (overall sample efficiency).
      – Seed-wise variance of T@τ and final score.
      – Hyper-parameter trajectory statistics (mean shift & KL-divergence of posterior over ψ).
   Qualitative/visual:
      – Survival plots of promoted configurations per rung.
      – Heatmaps of hyper-gradient magnitude vs. eventual benefit.
   Statistical test: two-sided Wilcoxon signed-rank (α=0.05) on paired seeds.

5. Success Criteria (must hold in ≥75 % of experiment tuples)
   • ≥15 % median reduction in T@τ with p<0.05.
   • ≤0.2 % relative drop (or improvement) in best final score.
   • ≤5 % extra GPU-hours and ≤10 % extra peak VRAM.
   • Std-dev(T@τ) not inflated by more than 10 %.

6. Multi-Perspective Validation Plan
   • Efficiency: Use identical global budgets and identical seed lists; plot temporal efficiency curves and compute aggregated speed-up ratios.
   • Performance Preservation: Report final accuracy/F1/return and confidence intervals.
   • Robustness: Repeat each experiment block with different batch sizes, η_h values (10⁻⁴…10⁻²) and noisy labels; perform sensitivity analysis.
   • Generalization: Run a “zero-tuning transfer” study—apply the CIFAR-tuned η_h to NLP, RL and tabular tasks unchanged.
   • Ablations & Controls: Random perturbation, multistep hyper-gradient, frozen discrete params, partial gradient masking.
   • Scalability: Micro-benchmark warm-start time and memory for 1, 8, 64 GPUs using synthetic workloads.

7. Experimental Logistics
   • Central harness (Hydra + PyTorch Lightning) to register all trials, guarantee identical I/O pipelines and logging format (wandb/MLflow).
   • Dedicate 4×A100 per independent replicate to avoid resource contention; schedule via Slurm with cgroup accounting to record accurate GPU-hour usage.
   • Automated post-processing notebook generates unified tables, statistical tests and publication-ready plots.

8. Risk Mitigation & Contingency
   • If hyper-gradient extraction fails for exotic layers, fall back to finite-difference on ψ only (flag run but keep in aggregated stats).
   • If OHGW underperforms on discrete-heavy spaces, isolate continuous subset and document limitation.

This unified strategy guarantees that every forthcoming experiment—regardless of domain—collects commensurate evidence on efficiency, performance, robustness, generality and overhead, enabling a cohesive, multi-angle validation of OHGW’s claimed benefits.

# Base Code (Reference Foundation)
{"evaluate_py": "\"\"\"src/evaluate.py\nAggregates result files from all experiment variations and produces\ncomparison figures + JSON summary printed to stdout.\n\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport logging\nimport os\nfrom pathlib import Path\nfrom typing import Dict, List\n\nimport matplotlib\nimport pandas as pd\nimport yaml\nfrom matplotlib import pyplot as plt\nfrom scipy.stats import wilcoxon  # Used if available in env\n\nmatplotlib.use(\"Agg\")\n\n# ----------------------------------------------------------------------------------\n\n\ndef load_all_results(results_dir: Path) -\u003e List[Dict]:\n    data = []\n    for run_dir in results_dir.iterdir():\n        if (run_dir / \"results.json\").exists():\n            with open(run_dir / \"results.json\") as f:\n                data.append(json.load(f))\n    return data\n\n\n# ----------------------------------------------------------------------------------\n\ndef create_barplot(df: pd.DataFrame, metric: str, ylabel: str, fname: Path):\n    plt.figure()\n    ax = plt.gca()\n    bars = ax.bar(df[\"run_id\"], df[metric], color=\"skyblue\")\n    ax.set_ylabel(ylabel)\n    ax.set_xlabel(\"Run Variation\")\n    ax.set_title(f\"{ylabel} Comparison\")\n    ax.set_xticklabels(df[\"run_id\"], rotation=45, ha=\"right\")\n    for bar in bars:\n        height = bar.get_height()\n        ax.annotate(f\"{height:.2f}\", xy=(bar.get_x() + bar.get_width() / 2, height),\n                    xytext=(0, 3), textcoords=\"offset points\", ha=\u0027center\u0027, va=\u0027bottom\u0027)\n    plt.tight_layout()\n    plt.savefig(fname, bbox_inches=\"tight\")\n    plt.close()\n\n\n# ----------------------------------------------------------------------------------\n\ndef aggregate_and_visualise(results_dir: Path):\n    records = load_all_results(results_dir)\n    if not records:\n        raise RuntimeError(f\"No results.json found in {results_dir}.*\")\n\n    df = pd.DataFrame(records)\n\n    # Basic statistics -----------------------------------------------------------\n    summary = {\n        \"runs\": df[\"run_id\"].tolist(),\n        \"best_val_accuracy\": df[\"best_val_accuracy\"].tolist(),\n        \"test_accuracy\": df[\"test_accuracy\"].tolist(),\n        \"training_seconds\": df[\"training_seconds\"].tolist(),\n    }\n\n    # Statistical test between first two runs (if \u003e1)\n    p_value = None\n    if len(df) \u003e= 2:\n        try:\n            stat, p_value = wilcoxon(df.iloc[:, 1], df.iloc[:, 2])  # type: ignore\n        except Exception:\n            pass\n    summary[\"wilcoxon_p_value\"] = p_value\n\n    # Figures --------------------------------------------------------------------\n    create_barplot(\n        df, metric=\"test_accuracy\", ylabel=\"Test Accuracy (%)\",\n        fname=results_dir / \"final_accuracy_comparison.pdf\",\n    )\n    create_barplot(\n        df, metric=\"training_seconds\", ylabel=\"Training Time (s)\",\n        fname=results_dir / \"training_time_comparison.pdf\",\n    )\n\n    # stdout prints --------------------------------------------------------------\n    print(\"\\n==== Evaluation Summary ====\")\n    print(json.dumps(summary))\n\n\n# ----------------------------------------------------------------------------------\n\ndef parse_args():\n    p = argparse.ArgumentParser()\n    p.add_argument(\"--results-dir\", required=True, type=str)\n    return p.parse_args()\n\n\nif __name__ == \"__main__\":\n    logging.basicConfig(level=logging.INFO,\n                        format=\"%(asctime)s | %(levelname)s | %(message)s\",\n                        datefmt=\"%H:%M:%S\")\n    args = parse_args()\n    aggregate_and_visualise(Path(args.results_dir))\n", "full_experiment_yaml": "# config/full_experiment.yaml\n# Template with placeholders.  The derive_specific step will inject concrete\n# datasets, models and search-space configurations here.\nvariations:\n  baseline:\n    dataset:\n      name: DATASET_PLACEHOLDER  # PLACEHOLDER: Will be replaced with real dataset name\n      params: SPECIFIC_CONFIG_PLACEHOLDER  # PLACEHOLDER\n    model:\n      name: MODEL_PLACEHOLDER  # PLACEHOLDER: Specific model (e.g. ResNet20)\n      params: SPECIFIC_CONFIG_PLACEHOLDER\n    training:\n      epochs: 100  # Full experiment epochs (to be adjusted)\n      batch_size: 128\n      learning_rate: 0.1\n      weight_decay: 0.0005\n      momentum: 0.9\n      num_workers: 8\n    ohgw:\n      enabled: false\n\n  proposed_ohgw:\n    dataset:\n      name: DATASET_PLACEHOLDER\n      params: SPECIFIC_CONFIG_PLACEHOLDER\n    model:\n      name: MODEL_PLACEHOLDER\n      params: SPECIFIC_CONFIG_PLACEHOLDER\n    training:\n      epochs: 100\n      batch_size: 128\n      learning_rate: 0.1\n      weight_decay: 0.0005\n      momentum: 0.9\n      num_workers: 8\n    ohgw:\n      enabled: true\n      eta_h: 0.001\n\n  ablation_multi_step:\n    dataset:\n      name: DATASET_PLACEHOLDER\n      params: SPECIFIC_CONFIG_PLACEHOLDER\n    model:\n      name: MODEL_PLACEHOLDER\n      params: SPECIFIC_CONFIG_PLACEHOLDER\n    training:\n      epochs: 100\n      batch_size: 128\n      learning_rate: 0.1\n      weight_decay: 0.0005\n      momentum: 0.9\n      num_workers: 8\n    ohgw:\n      enabled: true\n      eta_h: 0.001  # Will be stepped multiple times by specialised logic in derived experiments\n", "main_py": "\"\"\"src/main.py\nCentral orchestration script.\nSupports --smoke-test and --full-experiment flags and ensures that stdout and\nstderr of each subprocess are captured into *separate* files **and** streamed\nlive to the console, fully satisfying the logging requirement.\n\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport os\nimport subprocess\nimport sys\nimport threading\nimport time\nfrom pathlib import Path\nfrom typing import Dict\n\nimport yaml\n\n# ----------------------------------------------------------------------------------\n# Real-time tee helper ----------------------------------------------------------------\n\n\ndef _stream_tee(src, targets):\n    for line in iter(src.readline, \"\"):\n        for t in targets:\n            t.write(line)\n            t.flush()\n    src.close()\n\n\n# ----------------------------------------------------------------------------------\n\n\ndef run_subprocess(cmd, run_dir: Path):\n    stdout_file = open(run_dir / \"stdout.log\", \"w\", buffering=1)\n    stderr_file = open(run_dir / \"stderr.log\", \"w\", buffering=1)\n\n    proc = subprocess.Popen(\n        cmd,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        text=True,\n        bufsize=1,\n    )\n\n    # Launch background threads that tee streams to both file and console\n    threads = [\n        threading.Thread(target=_stream_tee, args=(proc.stdout, [sys.stdout, stdout_file]), daemon=True),\n        threading.Thread(target=_stream_tee, args=(proc.stderr, [sys.stderr, stderr_file]), daemon=True),\n    ]\n    for t in threads:\n        t.start()\n\n    proc.wait()\n    for t in threads:\n        t.join()\n    stdout_file.close()\n    stderr_file.close()\n\n    if proc.returncode != 0:\n        raise RuntimeError(f\"Subprocess {\u0027 \u0027.join(cmd)} failed with code {proc.returncode}\")\n\n\n# ----------------------------------------------------------------------------------\n\ndef orchestrate(config_path: Path, results_dir: Path):\n    with open(config_path, \"r\") as f:\n        cfg = yaml.safe_load(f)\n\n    variations: Dict = cfg[\"variations\"]\n\n    for run_id, run_cfg in variations.items():\n        run_dir = results_dir / run_id\n        run_dir.mkdir(parents=True, exist_ok=True)\n\n        # Persist *individual* run config so the subprocess can load just that\n        single_cfg = {\"variations\": {run_id: run_cfg}}\n        cfg_file = run_dir / \"config.yaml\"\n        with open(cfg_file, \"w\") as f:\n            yaml.safe_dump(single_cfg, f)\n\n        cmd = [\n            sys.executable,\n            \"-m\",\n            \"src.train\",\n            \"--run-id\",\n            run_id,\n            \"--config-file\",\n            str(cfg_file),\n            \"--run-dir\",\n            str(run_dir),\n        ]\n\n        print(f\"\\n===== Launching {run_id} =====\")\n        run_subprocess(cmd, run_dir)\n\n    # After all runs launch evaluation\n    eval_cmd = [\n        sys.executable,\n        \"-m\",\n        \"src.evaluate\",\n        \"--results-dir\",\n        str(results_dir),\n    ]\n    print(\"\\n===== Running aggregate evaluation =====\")\n    run_subprocess(eval_cmd, results_dir)\n\n\n# ----------------------------------------------------------------------------------\n\ndef parse_args():\n    p = argparse.ArgumentParser(description=\"OHGW Experiment Orchestrator\")\n    group = p.add_mutually_exclusive_group(required=True)\n    group.add_argument(\"--smoke-test\", action=\"store_true\")\n    group.add_argument(\"--full-experiment\", action=\"store_true\")\n    p.add_argument(\"--results-dir\", required=True, type=str, help=\"Directory to store outputs\")\n    return p.parse_args()\n\n\nif __name__ == \"__main__\":\n    args = parse_args()\n    root = Path(os.getcwd())\n    results_dir = Path(args.results_dir).expanduser().absolute()\n    results_dir.mkdir(parents=True, exist_ok=True)\n\n    cfg_file = root / \"config\" / (\"smoke_test.yaml\" if args.smoke_test else \"full_experiment.yaml\")\n    orchestrate(cfg_file, results_dir)\n", "model_py": "\"\"\"src/model.py\nModel definitions \u0026 factory.\nIncludes a lightweight SimpleCNN for image inputs that works out of the box\nfor the smoke test yet can be replaced by experiment-specific architectures.\n\"\"\"\nfrom __future__ import annotations\n\nfrom typing import Dict\n\nimport torch.nn as nn\n\n\nclass SimpleCNN(nn.Module):\n    def __init__(self, num_classes: int = 10):\n        super().__init__()\n        self.features = nn.Sequential(\n            nn.Conv2d(3, 32, kernel_size=3, padding=1),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(2),\n            nn.Conv2d(32, 64, kernel_size=3, padding=1),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(2),\n        )\n        self.classifier = nn.Sequential(\n            nn.Flatten(),\n            nn.Linear(64 * 8 * 8, 256),\n            nn.ReLU(inplace=True),\n            nn.Linear(256, num_classes),\n        )\n\n    def forward(self, x):\n        x = self.features(x)\n        x = self.classifier(x)\n        return x\n\n\n# ----------------------------------------------------------------------------------\n\n\ndef build_model(model_cfg: Dict):\n    name = model_cfg[\"name\"]\n    params = model_cfg.get(\"params\", {})\n\n    if name == \"SimpleCNN\":\n        return SimpleCNN(**params)\n\n    # -------------------------------------------------------------------------\n    # PLACEHOLDER: Will be replaced with specific model architectures\n    # e.g. if name == \"ResNet20\": return ResNet20(**params)\n    # -------------------------------------------------------------------------\n\n    raise NotImplementedError(f\"Model \u0027{name}\u0027 not implemented \u2011 placeholder needs replacement.\")\n", "preprocess_py": "\"\"\"src/preprocess.py\nDataset loading \u0026 preprocessing pipeline with explicit placeholders for\nfuture dataset-specific logic.  Includes a fully functional FakeData\nfallback which enables smoke tests without external downloads.\n\"\"\"\nfrom __future__ import annotations\n\nimport random\nfrom typing import Tuple\n\nimport torch\nimport torchvision.transforms as T\nfrom torch.utils.data import DataLoader, random_split\nfrom torchvision import datasets\n\n\n# ----------------------------------------------------------------------------------\n\n\ndef _build_fakedata(params: dict, batch_size: int, num_workers: int):\n    transform = T.Compose([T.ToTensor()])\n    size = int(params.get(\"size\", 1024))\n    image_size = tuple(params.get(\"image_size\", (3, 32, 32)))\n    num_classes = int(params.get(\"num_classes\", 10))\n\n    ds = datasets.FakeData(size=size, image_size=image_size, num_classes=num_classes, transform=transform)\n    n_val = n_test = size // 10  # 10 % each\n    n_train = size - n_val - n_test\n    train_set, val_set, test_set = random_split(ds, [n_train, n_val, n_test])\n\n    train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True, num_workers=num_workers)\n    val_loader = DataLoader(val_set, batch_size=batch_size, shuffle=False, num_workers=num_workers)\n    test_loader = DataLoader(test_set, batch_size=batch_size, shuffle=False, num_workers=num_workers)\n    return train_loader, val_loader, test_loader\n\n\n# ----------------------------------------------------------------------------------\n\n\ndef build_dataloaders(dataset_cfg: dict, batch_size: int, num_workers: int = 2):\n    \"\"\"Factory for train/val/test DataLoaders.\n\n    Parameters\n    ----------\n    dataset_cfg : dict\n        Must have field \"name\" specifying which dataset to load and optional\n        \"params\" carrying dataset-specific hyper-parameters.\n    \"\"\"\n    name = dataset_cfg[\"name\"]\n    params = dataset_cfg.get(\"params\", {})\n\n    if name == \"FakeData\":\n        return _build_fakedata(params, batch_size, num_workers)\n\n    # -------------------------------------------------------------------------\n    # PLACEHOLDER: Will be replaced with specific dataset loading logic\n    # Example:\n    # elif name == \"CIFAR10\":\n    #     return _build_cifar10(params, batch_size, num_workers)\n    # -------------------------------------------------------------------------\n\n    raise NotImplementedError(f\"Dataset \u0027{name}\u0027 not implemented \u2011 placeholder needs replacement.\")\n", "pyproject_toml": "[project]\nname = \"ohgw-experiments\"\nversion = \"0.1.0\"\ndescription = \"Common core foundation for OHGW experiments\"\nreadme = \"README.md\"\nrequires-python = \"\u003e=3.10\"\ndependencies = [\n    \"torch\u003e=2.0\",\n    \"torchvision\u003e=0.15\",\n    \"pyyaml\u003e=6.0\",\n    \"tqdm\u003e=4.65\",\n    \"matplotlib\u003e=3.7\",\n    \"seaborn\u003e=0.12\",\n    \"pandas\u003e=1.5\",\n    \"scipy\u003e=1.10\"\n]\n\n[tool.setuptools.packages.find]\nwhere = [\"src\"]\n", "smoke_test_yaml": "# config/smoke_test.yaml\n# Lightweight smoke test with synthetic data ensuring the full pipeline works in \u003c1 min.\nvariations:\n  smoke_baseline:\n    dataset:\n      name: FakeData\n      params: {size: 256, image_size: [3,32,32], num_classes: 10}\n    model:\n      name: SimpleCNN\n      params: {num_classes: 10}\n    training:\n      epochs: 2\n      batch_size: 32\n      learning_rate: 0.01\n      weight_decay: 0.0005\n      momentum: 0.9\n      num_workers: 0\n    ohgw:\n      enabled: false\n\n  smoke_ohgw:\n    dataset:\n      name: FakeData\n      params: {size: 256, image_size: [3,32,32], num_classes: 10}\n    model:\n      name: SimpleCNN\n      params: {num_classes: 10}\n    training:\n      epochs: 2\n      batch_size: 32\n      learning_rate: 0.01\n      weight_decay: 0.0005\n      momentum: 0.9\n      num_workers: 0\n    ohgw:\n      enabled: true\n      eta_h: 0.001\n", "train_py": "\"\"\"src/train.py\nRuns a single experiment variation (one entry of the YAML config).\nSaves metrics, figures and model weights into the provided run directory\nand prints a JSON summary to stdout (required by the evaluation harness).\n\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport logging\nimport os\nimport time\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import Dict, List\n\nimport matplotlib\nimport torch\nimport torch.nn.functional as F\nimport yaml\nfrom matplotlib import pyplot as plt\nfrom torch import nn, optim\nfrom tqdm.auto import tqdm\n\nimport src.model as model_zoo\nimport src.preprocess as preprocess\n\nmatplotlib.use(\"Agg\")  # do not require X11\n\n\n# ---------------- Utility helpers -------------------------------------------------\n\ndef set_random_seed(seed: int) -\u003e None:\n    import random\n    import numpy as np\n\n    torch.manual_seed(seed)\n    random.seed(seed)\n    np.random.seed(seed)\n    if torch.cuda.is_available():\n        torch.cuda.manual_seed_all(seed)\n\n\ndef accuracy(pred: torch.Tensor, target: torch.Tensor) -\u003e float:\n    \"\"\"Top-1 accuracy.\"\"\"\n    with torch.no_grad():\n        pred_labels = pred.argmax(dim=1)\n        return (pred_labels == target).float().mean().item() * 100.0\n\n\n# ---------------- Core OHGW implementation ---------------------------------------\n\ndef one_shot_hypergradient_warm_start(\n    model: nn.Module,\n    optimizer_cfg: Dict,\n    batch: List[torch.Tensor],\n    eta_h: float,\n    device: torch.device,\n) -\u003e Dict:\n    \"\"\"Apply a single stochastic hyper-gradient step on *weight_decay*.\n\n    For demonstration purposes the only continuous hyper-parameter we treat here\n    is the weight-decay \"wd\".  We keep the implementation generic so that the\n    subsequent specialised experiment step can swap in more elaborate\n    hyper-gradient logic without touching the surrounding framework.\n    \"\"\"\n\n    # Extract current wd (defaults to 0.0) and wrap as differentiable tensor\n    wd_val: float = float(optimizer_cfg.get(\"weight_decay\", 0.0))\n    wd = torch.tensor(wd_val, dtype=torch.float32, device=device, requires_grad=True)\n\n    inputs, targets = batch\n    inputs, targets = inputs.to(device), targets.to(device)\n    # Forward with weight-decay regularisation term that depends on *wd*\n    logits = model(inputs)\n    ce_loss = F.cross_entropy(logits, targets)\n    l2_term = 0.5 * wd * sum((p ** 2).sum() for p in model.parameters())\n    loss = ce_loss + l2_term\n\n    # Compute dL / d(wd)\n    grad_wd, = torch.autograd.grad(loss, wd, retain_graph=False, create_graph=False)\n\n    # One tiny hyper-parameter update\n    wd_new = (wd - eta_h * grad_wd).clamp(min=0.0).item()\n\n    # Return the modified optimiser configuration\n    new_optimizer_cfg = dict(optimizer_cfg)\n    new_optimizer_cfg[\"weight_decay\"] = wd_new\n    return new_optimizer_cfg\n\n\n# ---------------- Training --------------------------------------------------------\n\ndef train_one_epoch(model, loader, optimizer, device):\n    model.train()\n    running_loss = 0.0\n    running_acc = 0.0\n    total = 0\n    for x, y in loader:\n        x, y = x.to(device), y.to(device)\n        optimizer.zero_grad()\n        logits = model(x)\n        loss = F.cross_entropy(logits, y)\n        loss.backward()\n        optimizer.step()\n\n        batch_size = y.size(0)\n        running_loss += loss.item() * batch_size\n        running_acc += accuracy(logits, y) * batch_size\n        total += batch_size\n    return running_loss / total, running_acc / total\n\n\ndef evaluate(model, loader, device):\n    model.eval()\n    loss_sum = 0.0\n    acc_sum = 0.0\n    total = 0\n    with torch.no_grad():\n        for x, y in loader:\n            x, y = x.to(device), y.to(device)\n            logits = model(x)\n            loss = F.cross_entropy(logits, y)\n            batch = y.size(0)\n            loss_sum += loss.item() * batch\n            acc_sum += accuracy(logits, y) * batch\n            total += batch\n    return loss_sum / total, acc_sum / total\n\n\n# ---------------- Main entry ------------------------------------------------------\n\ndef run_training(run_dir: Path, cfg: Dict, run_id: str):\n    run_dir.mkdir(parents=True, exist_ok=True)\n    (run_dir / \"figures\").mkdir(exist_ok=True, parents=True)\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n    # Set seeds for reproducibility\n    seed = int(cfg.get(\"seed\", 42))\n    set_random_seed(seed)\n\n    # ---------------- Dataset -----------------------------------------------------\n    d_cfg = cfg[\"dataset\"]\n    t_cfg = cfg[\"training\"]\n    train_loader, val_loader, test_loader = preprocess.build_dataloaders(\n        dataset_cfg=d_cfg,\n        batch_size=int(t_cfg[\"batch_size\"]),\n        num_workers=int(t_cfg.get(\"num_workers\", 2)),\n    )\n\n    # ---------------- Model -------------------------------------------------------\n    m_cfg = cfg[\"model\"]\n    model = model_zoo.build_model(m_cfg).to(device)\n\n    # ---------------- Optimiser ---------------------------------------------------\n    opt_cfg = {\n        \"lr\": float(t_cfg[\"learning_rate\"]),\n        \"momentum\": float(t_cfg.get(\"momentum\", 0.0)),\n        \"weight_decay\": float(t_cfg.get(\"weight_decay\", 0.0)),\n    }\n    optimizer = optim.SGD(\n        model.parameters(),\n        lr=opt_cfg[\"lr\"],\n        momentum=opt_cfg[\"momentum\"],\n        weight_decay=opt_cfg[\"weight_decay\"],\n    )\n\n    # ---------------- OHGW warm-start -------------------------------------------\n    if cfg.get(\"ohgw\", {}).get(\"enabled\", False):\n        eta_h = float(cfg[\"ohgw\"].get(\"eta_h\", 1e-3))\n        batch_iter = iter(train_loader)\n        mini_batch = next(batch_iter)\n        opt_cfg = one_shot_hypergradient_warm_start(\n            model, optimizer_cfg=opt_cfg, batch=mini_batch, eta_h=eta_h, device=device\n        )\n        # Re-initialise optimiser with new hyper-params\n        optimizer = optim.SGD(\n            model.parameters(),\n            lr=opt_cfg[\"lr\"],\n            momentum=opt_cfg[\"momentum\"],\n            weight_decay=opt_cfg[\"weight_decay\"],\n        )\n\n    # ---------------- Training loop ---------------------------------------------\n    n_epochs = int(t_cfg[\"epochs\"])\n    history: List[Dict] = []\n    best_val_acc = -1.0\n    best_state_dict = None\n    start_time = time.time()\n\n    for epoch in range(1, n_epochs + 1):\n        train_loss, train_acc = train_one_epoch(model, train_loader, optimizer, device)\n        val_loss, val_acc = evaluate(model, val_loader, device)\n\n        history.append(\n            {\n                \"epoch\": epoch,\n                \"train_loss\": train_loss,\n                \"train_acc\": train_acc,\n                \"val_loss\": val_loss,\n                \"val_acc\": val_acc,\n            }\n        )\n\n        if val_acc \u003e best_val_acc:\n            best_val_acc = val_acc\n            best_state_dict = {k: v.cpu() for k, v in model.state_dict().items()}\n\n        logging.info(\n            f\"Epoch {epoch:03d}/{n_epochs}: train_loss={train_loss:.4f} train_acc={train_acc:.2f} \"\n            f\"val_loss={val_loss:.4f} val_acc={val_acc:.2f}\"\n        )\n\n    total_seconds = time.time() - start_time\n\n    # ---------------- Test evaluation ------------------------------------------\n    model.load_state_dict(best_state_dict)\n    test_loss, test_acc = evaluate(model, test_loader, device)\n\n    # ---------------- Persist artefacts ----------------------------------------\n    torch.save(best_state_dict, run_dir / \"best_model.pt\")\n    with open(run_dir / \"history.json\", \"w\") as f:\n        json.dump(history, f, indent=2)\n\n    # Figures: loss + accuracy curves -------------------------------------------\n    epochs = [h[\"epoch\"] for h in history]\n    train_losses = [h[\"train_loss\"] for h in history]\n    val_losses = [h[\"val_loss\"] for h in history]\n    plt.figure()\n    plt.plot(epochs, train_losses, label=\"Train\")\n    plt.plot(epochs, val_losses, label=\"Validation\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Cross-Entropy Loss\")\n    plt.title(f\"Training Loss \u2013 {run_id}\")\n    for x, y in zip(epochs, val_losses):\n        plt.annotate(f\"{y:.2f}\", (x, y))\n    plt.legend()\n    fname_loss = run_dir / \"figures\" / f\"training_loss_{run_id}.pdf\"\n    plt.savefig(fname_loss, bbox_inches=\"tight\")\n    plt.close()\n\n    train_accs = [h[\"train_acc\"] for h in history]\n    val_accs = [h[\"val_acc\"] for h in history]\n    plt.figure()\n    plt.plot(epochs, train_accs, label=\"Train\")\n    plt.plot(epochs, val_accs, label=\"Validation\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Accuracy (%)\")\n    plt.title(f\"Accuracy \u2013 {run_id}\")\n    plt.annotate(\n        f\"Best={best_val_acc:.2f}\", (epochs[-1], val_accs[-1]),\n        textcoords=\"offset points\", xytext=(0, 10), ha=\u0027right\u0027\n    )\n    plt.legend()\n    fname_acc = run_dir / \"figures\" / f\"accuracy_{run_id}.pdf\"\n    plt.savefig(fname_acc, bbox_inches=\"tight\")\n    plt.close()\n\n    # ---------------- Final results JSON ---------------------------------------\n    results = {\n        \"run_id\": run_id,\n        \"seed\": seed,\n        \"dataset\": d_cfg[\"name\"],\n        \"model\": m_cfg[\"name\"],\n        \"ohgw_enabled\": cfg.get(\"ohgw\", {}).get(\"enabled\", False),\n        \"eta_h\": cfg.get(\"ohgw\", {}).get(\"eta_h\", None),\n        \"training_seconds\": total_seconds,\n        \"best_val_accuracy\": best_val_acc,\n        \"test_accuracy\": test_acc,\n        \"test_loss\": test_loss,\n        \"history\": history,\n        \"figures\": [str(fname_loss.name), str(fname_acc.name)],\n    }\n    with open(run_dir / \"results.json\", \"w\") as f:\n        json.dump(results, f, indent=2)\n\n    # ---------------- Mandatory stdout prints ----------------------------------\n    # 1) Human-readable description\n    print(\n        f\"\\n==== Experiment Description ({run_id}) ====\"\n        f\"\\nDataset: {d_cfg[\u0027name\u0027]}\\nModel: {m_cfg[\u0027name\u0027]}\\nOHGW: {results[\u0027ohgw_enabled\u0027]} (eta_h={results[\u0027eta_h\u0027]})\"\n        f\"\\nEpochs: {n_epochs}, Batch Size: {t_cfg[\u0027batch_size\u0027]}, LR: {t_cfg[\u0027learning_rate\u0027]}\\n\"\n    )\n    # 2) Structured numerical data line (JSON)\n    print(json.dumps(results))\n\n\n# ---------------------------------------------------------------------------------\n\ndef parse_args():\n    p = argparse.ArgumentParser(description=\"Run one experiment variation\")\n    p.add_argument(\"--run-id\", required=True, type=str)\n    p.add_argument(\"--config-file\", required=True, type=str)\n    p.add_argument(\"--run-dir\", required=True, type=str)\n    return p.parse_args()\n\n\nif __name__ == \"__main__\":\n    args = parse_args()\n\n    # basic logging to stderr (main.py captures streams)\n    logging.basicConfig(\n        level=logging.INFO,\n        format=\"%(asctime)s | %(levelname)s | %(message)s\",\n        datefmt=\"%H:%M:%S\",\n    )\n\n    with open(args.config_file, \"r\") as f:\n        full_cfg = yaml.safe_load(f)\n\n    run_cfg = full_cfg[\"variations\"][args.run_id]\n\n    run_training(Path(args.run_dir), run_cfg, args.run_id)\n"}

# Current Experiment (To be validated)
- Experiment ID: exp-1
- Description: Objective / Hypothesis: Quantify the raw efficiency gains of One-Shot Hyper-Gradient Warm-Starts (OHGW) for classical image-classification hyper-parameter optimisation and disentangle the effect of merely perturbing the hyper-parameters from using the true hyper-gradient.

Domain & Task: Vision – CIFAR-10 image classification.

Models: ResNet-20 (main), ResNet-50 (sanity-check on a deeper network – evaluated only for the best scheduler variant after selection).

Schedulers under test: ASHA (official implementation in Ray-Tune v2.6).

Search space (5-dim continuous): log10-learning-rate, log10-weight-decay, momentum, RandAugment-magnitude, label-smoothing.

Run variations:
• asha-baseline – vanilla ASHA.
• asha-random-warm – perform one random Gaussian step (σ=0.01) in ψ instead of a hyper-gradient step (control).* 
• asha-ohgw-1step – proposed method (η_h=1e-3, one step).
• asha-ohgw-3step – same but apply three successive hyper-gradient steps (ablation for diminishing returns).

Datasets & Pre-processing: CIFAR-10, standard train/val/test split = 45k/5k/10k.  Per-image Z-score normalisation, RandAugment (m searchable), Cutout(16), label-smoothing (ε searchable).  Validation set is stratified.

Training loop: 200 epochs (budget for full training), Cosine LR, batch size 128, SGD-M.  Weight initialisation He-normal.  Mixed precision (AMP).  Early-stopping OFF (to reveal full curve).

Evaluation metrics:
Primary – T@93%: wall-clock hours & GPU hours needed to first reach 93% val accuracy.
Secondary – best test accuracy after 200 epochs; AUC(score-vs-time); overhead-FLOPs ratio; peak VRAM; seed-wise variance.

Protocol: 32 independent HPO replicates (seed-paired across variations).  Each replicate is allowed 12 A100-GPU hours (4 GPUs×3 h) exactly.  Statistics: median±IQR, Wilcoxon signed-rank (α=0.05) on paired T@93%.

Hyper-parameter sensitivity: inside asha-ohgw-1step, sweep η_h ∈ {1e-4, 3e-4, 1e-3, 3e-3} on an extra 8 seeds; fit LOESS to quantify curvature.

Robustness: inject 10% symmetric label noise on a duplicate run; compare % speed-up retained.

Compute efficiency: PyTorch-Profiler to record FLOPs; NVML + psutil for VRAM/RAM; timestamps logged by Lightning Callbacks.

Example code fragment (within Ray trial):
```python
# one-shot HG warm-start
loss = model(train_mb)                    # forward
hyper_grads = torch.autograd.grad(loss, cfg.continuous())
with torch.no_grad():
    for p, g in zip(cfg.continuous(), hyper_grads):
        p -= 1e-3 * g                     # η_h
# hand control back to ASHA
train_full(cfg)
```

Computational budget on cluster: 8 concurrent trials * 4 GPUs each = 32 GPUs (< half of node).  Wall-clock expected 18h incl. repeats.

Success criteria: ≥15% lower median T@93% for asha-ohgw-1step than asha-baseline with p<0.05 and ≤0.2% drop in final test accuracy.

Footnote *: random-warm uses identical σ distribution as the empirical magnitude of a hyper-gradient step, ensuring fair energy injection.
- Run Variations: ['asha-baseline', 'asha-random-warm', 'asha-ohgw-1step', 'asha-ohgw-3step']

# Derived Experiment Code (To be validated)

{"evaluate_py": "\"\"\"src/evaluate.py\nAggregates result files from all experiment variations and produces\ncomparison figures + JSON summary printed to stdout.\n\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport logging\nimport os\nfrom pathlib import Path\nfrom typing import Dict, List\n\nimport matplotlib\nimport pandas as pd\nimport yaml\nfrom matplotlib import pyplot as plt\nfrom scipy.stats import wilcoxon  # Used if available in env\n\nmatplotlib.use(\"Agg\")\n\n# ----------------------------------------------------------------------------------\n\n\ndef load_all_results(results_dir: Path) -\u003e List[Dict]:\n    data = []\n    for run_dir in results_dir.iterdir():\n        if (run_dir / \"results.json\").exists():\n            with open(run_dir / \"results.json\") as f:\n                data.append(json.load(f))\n    return data\n\n\n# ----------------------------------------------------------------------------------\n\ndef create_barplot(df: pd.DataFrame, metric: str, ylabel: str, fname: Path):\n    plt.figure()\n    ax = plt.gca()\n    bars = ax.bar(df[\"run_id\"], df[metric], color=\"skyblue\")\n    ax.set_ylabel(ylabel)\n    ax.set_xlabel(\"Run Variation\")\n    ax.set_title(f\"{ylabel} Comparison\")\n    ax.set_xticklabels(df[\"run_id\"], rotation=45, ha=\"right\")\n    for bar in bars:\n        height = bar.get_height()\n        ax.annotate(f\"{height:.2f}\", xy=(bar.get_x() + bar.get_width() / 2, height),\n                    xytext=(0, 3), textcoords=\"offset points\", ha=\u0027center\u0027, va=\u0027bottom\u0027)\n    plt.tight_layout()\n    plt.savefig(fname, bbox_inches=\"tight\")\n    plt.close()\n\n\n# ----------------------------------------------------------------------------------\n\ndef aggregate_and_visualise(results_dir: Path):\n    records = load_all_results(results_dir)\n    if not records:\n        raise RuntimeError(f\"No results.json found in {results_dir}.*\")\n\n    df = pd.DataFrame(records)\n\n    # Basic statistics -----------------------------------------------------------\n    summary = {\n        \"runs\": df[\"run_id\"].tolist(),\n        \"best_val_accuracy\": df[\"best_val_accuracy\"].tolist(),\n        \"test_accuracy\": df[\"test_accuracy\"].tolist(),\n        \"training_seconds\": df[\"training_seconds\"].tolist(),\n    }\n\n    # Statistical test between first two runs (if \u003e1)\n    p_value = None\n    if len(df) \u003e= 2:\n        try:\n            stat, p_value = wilcoxon(df.iloc[:, 1], df.iloc[:, 2])  # type: ignore\n        except Exception:\n            pass\n    summary[\"wilcoxon_p_value\"] = p_value\n\n    # Figures --------------------------------------------------------------------\n    create_barplot(\n        df, metric=\"test_accuracy\", ylabel=\"Test Accuracy (%)\",\n        fname=results_dir / \"final_accuracy_comparison.pdf\",\n    )\n    create_barplot(\n        df, metric=\"training_seconds\", ylabel=\"Training Time (s)\",\n        fname=results_dir / \"training_time_comparison.pdf\",\n    )\n\n    # stdout prints --------------------------------------------------------------\n    print(\"\\n==== Evaluation Summary ====\")\n    print(json.dumps(summary))\n\n\n# ----------------------------------------------------------------------------------\n\ndef parse_args():\n    p = argparse.ArgumentParser()\n    p.add_argument(\"--results-dir\", required=True, type=str)\n    return p.parse_args()\n\n\nif __name__ == \"__main__\":\n    logging.basicConfig(level=logging.INFO,\n                        format=\"%(asctime)s | %(levelname)s | %(message)s\",\n                        datefmt=\"%H:%M:%S\")\n    args = parse_args()\n    aggregate_and_visualise(Path(args.results_dir))\n", "full_experiment_yaml": "# config/full_experiment.yaml\n# Complete set of variations for CIFAR-10 OHGW study (exp-1)\nvariations:\n  asha-baseline:\n    dataset:\n      name: cifar10\n      params:\n        val_split: 5000        # 45k train / 5k val / 10k test\n        augment_magnitude: 9\n    model:\n      name: ResNet20\n      params:\n        num_classes: 10\n    training:\n      epochs: 200\n      batch_size: 128\n      learning_rate: 0.1\n      weight_decay: 0.0005\n      momentum: 0.9\n      label_smoothing: 0.1\n      num_workers: 8\n    ohgw:\n      enabled: false\n\n  asha-random-warm:\n    dataset:\n      name: cifar10\n      params:\n        val_split: 5000\n        augment_magnitude: 9\n    model:\n      name: ResNet20\n      params:\n        num_classes: 10\n    training:\n      epochs: 200\n      batch_size: 128\n      learning_rate: 0.1\n      weight_decay: 0.0005\n      momentum: 0.9\n      label_smoothing: 0.1\n      num_workers: 8\n    ohgw:\n      enabled: true          # still uses warm-start pathway\n      random_sigma: 0.01     # Gaussian perturbation control\n      n_steps: 1\n\n  asha-ohgw-1step:\n    dataset:\n      name: cifar10\n      params:\n        val_split: 5000\n        augment_magnitude: 9\n    model:\n      name: ResNet20\n      params:\n        num_classes: 10\n    training:\n      epochs: 200\n      batch_size: 128\n      learning_rate: 0.1\n      weight_decay: 0.0005\n      momentum: 0.9\n      label_smoothing: 0.1\n      num_workers: 8\n    ohgw:\n      enabled: true\n      eta_h: 0.001\n      n_steps: 1\n\n  asha-ohgw-3step:\n    dataset:\n      name: cifar10\n      params:\n        val_split: 5000\n        augment_magnitude: 9\n    model:\n      name: ResNet20\n      params:\n        num_classes: 10\n    training:\n      epochs: 200\n      batch_size: 128\n      learning_rate: 0.1\n      weight_decay: 0.0005\n      momentum: 0.9\n      label_smoothing: 0.1\n      num_workers: 8\n    ohgw:\n      enabled: true\n      eta_h: 0.001\n      n_steps: 3", "main_py": "\"\"\"src/main.py\nCentral orchestration script.\nSupports --smoke-test and --full-experiment flags and ensures that stdout and\nstderr of each subprocess are captured into *separate* files **and** streamed\nlive to the console, fully satisfying the logging requirement.\n\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport os\nimport subprocess\nimport sys\nimport threading\nimport time\nfrom pathlib import Path\nfrom typing import Dict\n\nimport yaml\n\n# ----------------------------------------------------------------------------------\n# Real-time tee helper ----------------------------------------------------------------\n\n\ndef _stream_tee(src, targets):\n    for line in iter(src.readline, \"\"):\n        for t in targets:\n            t.write(line)\n            t.flush()\n    src.close()\n\n\n# ----------------------------------------------------------------------------------\n\n\ndef run_subprocess(cmd, run_dir: Path):\n    stdout_file = open(run_dir / \"stdout.log\", \"w\", buffering=1)\n    stderr_file = open(run_dir / \"stderr.log\", \"w\", buffering=1)\n\n    proc = subprocess.Popen(\n        cmd,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        text=True,\n        bufsize=1,\n    )\n\n    # Launch background threads that tee streams to both file and console\n    threads = [\n        threading.Thread(target=_stream_tee, args=(proc.stdout, [sys.stdout, stdout_file]), daemon=True),\n        threading.Thread(target=_stream_tee, args=(proc.stderr, [sys.stderr, stderr_file]), daemon=True),\n    ]\n    for t in threads:\n        t.start()\n\n    proc.wait()\n    for t in threads:\n        t.join()\n    stdout_file.close()\n    stderr_file.close()\n\n    if proc.returncode != 0:\n        raise RuntimeError(f\"Subprocess {\u0027 \u0027.join(cmd)} failed with code {proc.returncode}\")\n\n\n# ----------------------------------------------------------------------------------\n\ndef orchestrate(config_path: Path, results_dir: Path):\n    with open(config_path, \"r\") as f:\n        cfg = yaml.safe_load(f)\n\n    variations: Dict = cfg[\"variations\"]\n\n    for run_id, run_cfg in variations.items():\n        run_dir = results_dir / run_id\n        run_dir.mkdir(parents=True, exist_ok=True)\n\n        # Persist *individual* run config so the subprocess can load just that\n        single_cfg = {\"variations\": {run_id: run_cfg}}\n        cfg_file = run_dir / \"config.yaml\"\n        with open(cfg_file, \"w\") as f:\n            yaml.safe_dump(single_cfg, f)\n\n        cmd = [\n            sys.executable,\n            \"-m\",\n            \"src.train\",\n            \"--run-id\",\n            run_id,\n            \"--config-file\",\n            str(cfg_file),\n            \"--run-dir\",\n            str(run_dir),\n        ]\n\n        print(f\"\\n===== Launching {run_id} =====\")\n        run_subprocess(cmd, run_dir)\n\n    # After all runs launch evaluation\n    eval_cmd = [\n        sys.executable,\n        \"-m\",\n        \"src.evaluate\",\n        \"--results-dir\",\n        str(results_dir),\n    ]\n    print(\"\\n===== Running aggregate evaluation =====\")\n    run_subprocess(eval_cmd, results_dir)\n\n\n# ----------------------------------------------------------------------------------\n\ndef parse_args():\n    p = argparse.ArgumentParser(description=\"OHGW Experiment Orchestrator\")\n    group = p.add_mutually_exclusive_group(required=True)\n    group.add_argument(\"--smoke-test\", action=\"store_true\")\n    group.add_argument(\"--full-experiment\", action=\"store_true\")\n    p.add_argument(\"--results-dir\", required=True, type=str, help=\"Directory to store outputs\")\n    return p.parse_args()\n\n\nif __name__ == \"__main__\":\n    args = parse_args()\n    root = Path(os.getcwd())\n    results_dir = Path(args.results_dir).expanduser().absolute()\n    results_dir.mkdir(parents=True, exist_ok=True)\n\n    cfg_file = root / \"config\" / (\"smoke_test.yaml\" if args.smoke_test else \"full_experiment.yaml\")\n    orchestrate(cfg_file, results_dir)\n", "model_py": "\"\"\"src/model.py\nResNet-20 implementation for CIFAR-10 and model factory.\n\"\"\"\nfrom __future__ import annotations\n\nfrom typing import Dict, Type, Union, List\n\nimport torch\nimport torch.nn as nn\n\n\n# -----------------------------------------------------------------------------\n# Small-scale ResNet for CIFAR from original He et al. paper -------------------\n\n\ndef _conv3x3(in_planes: int, out_planes: int, stride: int = 1):\n    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)\n\n\nclass _BasicBlock(nn.Module):\n    expansion: int = 1\n\n    def __init__(self, in_planes: int, planes: int, stride: int = 1):\n        super().__init__()\n        self.conv1 = _conv3x3(in_planes, planes, stride)\n        self.bn1 = nn.BatchNorm2d(planes)\n        self.relu = nn.ReLU(inplace=True)\n        self.conv2 = _conv3x3(planes, planes)\n        self.bn2 = nn.BatchNorm2d(planes)\n\n        self.downsample = None\n        if stride != 1 or in_planes != planes:\n            self.downsample = nn.Sequential(\n                nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride, bias=False),\n                nn.BatchNorm2d(planes),\n            )\n\n    def forward(self, x):\n        identity = x\n        out = self.relu(self.bn1(self.conv1(x)))\n        out = self.bn2(self.conv2(out))\n        if self.downsample is not None:\n            identity = self.downsample(identity)\n        out += identity\n        out = self.relu(out)\n        return out\n\n\nclass _ResNetCIFAR(nn.Module):\n    def __init__(self, depth: int = 20, num_classes: int = 10):\n        super().__init__()\n        assert (depth - 2) % 6 == 0, \"For BasicBlock ResNet, depth should be 6n+2\"\n        n = (depth - 2) // 6  # number of blocks per stage\n        self.in_planes = 16\n\n        self.conv1 = _conv3x3(3, 16)\n        self.bn1 = nn.BatchNorm2d(16)\n        self.relu = nn.ReLU(inplace=True)\n\n        # Stages\n        self.layer1 = self._make_layer(_BasicBlock, 16, n, stride=1)\n        self.layer2 = self._make_layer(_BasicBlock, 32, n, stride=2)\n        self.layer3 = self._make_layer(_BasicBlock, 64, n, stride=2)\n\n        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))\n        self.fc = nn.Linear(64 * _BasicBlock.expansion, num_classes)\n\n        self._initialize_weights()\n\n    def _make_layer(self, block: Type[_BasicBlock], planes: int, blocks: int, stride: int):\n        layers: List[nn.Module] = []\n        layers.append(block(self.in_planes, planes, stride))\n        self.in_planes = planes * block.expansion\n        for _ in range(1, blocks):\n            layers.append(block(self.in_planes, planes))\n        return nn.Sequential(*layers)\n\n    def _initialize_weights(self):\n        for m in self.modules():\n            if isinstance(m, nn.Conv2d):\n                nn.init.kaiming_normal_(m.weight, mode=\"fan_out\", nonlinearity=\"relu\")\n            elif isinstance(m, nn.BatchNorm2d):\n                nn.init.constant_(m.weight, 1)\n                nn.init.constant_(m.bias, 0)\n            elif isinstance(m, nn.Linear):\n                nn.init.normal_(m.weight, 0, 0.01)\n                nn.init.constant_(m.bias, 0)\n\n    def forward(self, x):\n        x = self.relu(self.bn1(self.conv1(x)))\n        x = self.layer1(x)\n        x = self.layer2(x)\n        x = self.layer3(x)\n        x = self.avgpool(x)\n        x = torch.flatten(x, 1)\n        x = self.fc(x)\n        return x\n\n\n# -----------------------------------------------------------------------------\n# Simple CNN fallback (used by smoke test) ------------------------------------\n\n\nclass SimpleCNN(nn.Module):\n    def __init__(self, num_classes: int = 10):\n        super().__init__()\n        self.features = nn.Sequential(\n            nn.Conv2d(3, 32, kernel_size=3, padding=1),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(2),\n            nn.Conv2d(32, 64, kernel_size=3, padding=1),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(2),\n        )\n        self.classifier = nn.Sequential(\n            nn.Flatten(),\n            nn.Linear(64 * 8 * 8, 256),\n            nn.ReLU(inplace=True),\n            nn.Linear(256, num_classes),\n        )\n\n    def forward(self, x):\n        x = self.features(x)\n        x = self.classifier(x)\n        return x\n\n\n# -----------------------------------------------------------------------------\n# Factory ---------------------------------------------------------------------\n\n\ndef build_model(model_cfg: Dict):\n    name = model_cfg[\"name\"].lower()\n    params = model_cfg.get(\"params\", {})\n\n    if name == \"simplecnn\":\n        return SimpleCNN(**params)\n    if name in {\"resnet20\", \"resnet-20\"}:\n        return _ResNetCIFAR(depth=20, **params)\n\n    raise NotImplementedError(f\"Model \u0027{name}\u0027 not implemented.\")\n", "preprocess_py": "\"\"\"src/preprocess.py\nDataset loading \u0026 preprocessing pipeline specialised for CIFAR-10 while still\nproviding a FakeData fallback for ultra-fast smoke tests.\n\"\"\"\nfrom __future__ import annotations\n\nimport random\nfrom typing import Tuple, List\n\nimport torch\nimport torchvision.transforms as T\nfrom torch.utils.data import DataLoader, Dataset, random_split\nfrom torchvision import datasets\n\n# HuggingFace datasets\nfrom datasets import load_dataset\n\n# -----------------------------------------------------------------------------\n# Helper transforms -----------------------------------------------------------\n\n\nclass Cutout(T.RandomErasing):\n    \"\"\"Param-free Cutout implementation for square region masking.\"\"\"\n\n    def __init__(self, length: int = 16, p: float = 1.0):\n        super().__init__(p=p, scale=(0.0, 0.0), ratio=(1.0, 1.0), value=0)\n        self.length = length\n\n    def forward(self, img: torch.Tensor):  # type: ignore\n        h, w = img.shape[1:]\n        y = random.randint(0, h - 1)\n        x = random.randint(0, w - 1)\n        y1 = max(0, y - self.length // 2)\n        y2 = min(h, y + self.length // 2)\n        x1 = max(0, x - self.length // 2)\n        x2 = min(w, x + self.length // 2)\n        img[:, y1:y2, x1:x2] = 0.0\n        return img\n\n\nclass HFImageDataset(Dataset):\n    \"\"\"Thin wrapper converting a HF Split into a Torchvision-style dataset.\"\"\"\n\n    def __init__(self, hf_split, transform):\n        self.ds = hf_split\n        self.transform = transform\n\n    def __len__(self):\n        return len(self.ds)\n\n    def __getitem__(self, idx):\n        item = self.ds[idx]\n        img = item.get(\"image\", item.get(\"img\"))  # support multiple field names\n        label = item.get(\"label\", item.get(\"labels\", item.get(\"fine_label\", None)))\n        if self.transform:\n            img = self.transform(img)\n        return img, label\n\n\n# -----------------------------------------------------------------------------\n# Dataset builders ------------------------------------------------------------\n\n\ndef _build_fakedata(params: dict, batch_size: int, num_workers: int):\n    transform = T.Compose([T.ToTensor()])\n    size = int(params.get(\"size\", 1024))\n    image_size = tuple(params.get(\"image_size\", (3, 32, 32)))\n    num_classes = int(params.get(\"num_classes\", 10))\n\n    ds = datasets.FakeData(size=size, image_size=image_size, num_classes=num_classes, transform=transform)\n    n_val = n_test = size // 10  # 10 % each\n    n_train = size - n_val - n_test\n    train_set, val_set, test_set = random_split(ds, [n_train, n_val, n_test])\n\n    train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True, num_workers=num_workers)\n    val_loader = DataLoader(val_set, batch_size=batch_size, shuffle=False, num_workers=num_workers)\n    test_loader = DataLoader(test_set, batch_size=batch_size, shuffle=False, num_workers=num_workers)\n    return train_loader, val_loader, test_loader\n\n\n# -----------------------------------------------------------------------------\n\n\ndef _build_cifar10(params: dict, batch_size: int, num_workers: int):\n    \"\"\"Load CIFAR-10 from HuggingFace with train/val/test split 45k/5k/10k.\"\"\"\n    val_split = int(params.get(\"val_split\", 5000))\n    augment_magnitude = int(params.get(\"augment_magnitude\", 9))\n\n    # Load HF dataset (automatically downloads to ~/.cache/huggingface)\n    ds_dict = load_dataset(\"cifar10\")\n    train_raw = ds_dict[\"train\"].shuffle(seed=42)\n    split = train_raw.train_test_split(test_size=val_split, seed=42)\n    train_raw, val_raw = split[\"train\"], split[\"test\"]  # type: ignore\n    test_raw = ds_dict[\"test\"]\n\n    # Normalisation constants\n    mean = [0.4914, 0.4822, 0.4465]\n    std = [0.2023, 0.1994, 0.2010]\n\n    train_transforms: List = [\n        T.RandomCrop(32, padding=4),\n        T.RandomHorizontalFlip(),\n    ]\n    if augment_magnitude \u003e 0:\n        train_transforms.append(T.RandAugment(num_ops=2, magnitude=augment_magnitude))\n    train_transforms += [\n        T.ToTensor(),\n        Cutout(length=16),\n        T.Normalize(mean, std),\n    ]\n    train_transform = T.Compose(train_transforms)\n\n    test_transform = T.Compose([\n        T.ToTensor(),\n        T.Normalize(mean, std),\n    ])\n\n    train_set = HFImageDataset(train_raw, transform=train_transform)\n    val_set = HFImageDataset(val_raw, transform=test_transform)\n    test_set = HFImageDataset(test_raw, transform=test_transform)\n\n    train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True, num_workers=num_workers)\n    val_loader = DataLoader(val_set, batch_size=batch_size, shuffle=False, num_workers=num_workers)\n    test_loader = DataLoader(test_set, batch_size=batch_size, shuffle=False, num_workers=num_workers)\n    return train_loader, val_loader, test_loader\n\n\n# -----------------------------------------------------------------------------\n\n\ndef build_dataloaders(dataset_cfg: dict, batch_size: int, num_workers: int = 2):\n    \"\"\"Factory for train/val/test DataLoaders.\"\"\"\n    name = dataset_cfg[\"name\"].lower()\n    params = dataset_cfg.get(\"params\", {})\n\n    if name == \"fakedata\":\n        return _build_fakedata(params, batch_size, num_workers)\n    if name in {\"cifar10\", \"cifar-10\"}:\n        return _build_cifar10(params, batch_size, num_workers)\n\n    raise NotImplementedError(f\"Dataset \u0027{name}\u0027 not supported.\")\n", "pyproject_toml": "[project]\nname = \"ohgw-experiments\"\nversion = \"0.1.0\"\ndescription = \"Common core foundation for OHGW experiments\"\nreadme = \"README.md\"\nrequires-python = \"\u003e=3.10\"\ndependencies = [\n    \"torch\u003e=2.0\",\n    \"torchvision\u003e=0.15\",\n    \"pyyaml\u003e=6.0\",\n    \"tqdm\u003e=4.65\",\n    \"matplotlib\u003e=3.7\",\n    \"seaborn\u003e=0.12\",\n    \"pandas\u003e=1.5\",\n    \"scipy\u003e=1.10\",\n    \"datasets\u003e=2.13\"\n]\n\n[tool.setuptools.packages.find]\nwhere = [\"src\"]\n", "smoke_test_yaml": "# config/smoke_test.yaml\n# Lightweight smoke test with synthetic data ensuring the full pipeline works in \u003c1 min.\nvariations:\n  smoke_baseline:\n    dataset:\n      name: FakeData\n      params: {size: 256, image_size: [3,32,32], num_classes: 10}\n    model:\n      name: SimpleCNN\n      params: {num_classes: 10}\n    training:\n      epochs: 2\n      batch_size: 32\n      learning_rate: 0.01\n      weight_decay: 0.0005\n      momentum: 0.9\n      num_workers: 0\n    ohgw:\n      enabled: false\n\n  smoke_ohgw:\n    dataset:\n      name: FakeData\n      params: {size: 256, image_size: [3,32,32], num_classes: 10}\n    model:\n      name: SimpleCNN\n      params: {num_classes: 10}\n    training:\n      epochs: 2\n      batch_size: 32\n      learning_rate: 0.01\n      weight_decay: 0.0005\n      momentum: 0.9\n      num_workers: 0\n    ohgw:\n      enabled: true\n      eta_h: 0.001\n", "train_py": "\"\"\"src/train.py\nRuns a single experiment variation (one entry of the YAML config).\nSaves metrics, figures and model weights into the provided run directory\nand prints a JSON summary to stdout (required by the evaluation harness).\n\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport logging\nimport os\nimport time\nfrom pathlib import Path\nfrom typing import Dict, List, Tuple\n\nimport matplotlib\nimport torch\nimport torch.nn.functional as F\nimport yaml\nfrom matplotlib import pyplot as plt\nfrom torch import nn, optim\nfrom tqdm.auto import tqdm\n\nimport src.model as model_zoo\nimport src.preprocess as preprocess\n\nmatplotlib.use(\"Agg\")  # do not require X11\n\n\n# ---------------- Utility helpers -------------------------------------------------\n\ndef set_random_seed(seed: int) -\u003e None:\n    import random\n    import numpy as np\n\n    torch.manual_seed(seed)\n    random.seed(seed)\n    np.random.seed(seed)\n    if torch.cuda.is_available():\n        torch.cuda.manual_seed_all(seed)\n\n\ndef accuracy(pred: torch.Tensor, target: torch.Tensor) -\u003e float:\n    \"\"\"Top-1 accuracy.\"\"\"\n    with torch.no_grad():\n        pred_labels = pred.argmax(dim=1)\n        return (pred_labels == target).float().mean().item() * 100.0\n\n\n# ---------------- Core OHGW implementation ---------------------------------------\n\ndef _step_weight_decay_random(wd_val: float, sigma: float) -\u003e float:\n    \"\"\"Random Gaussian perturbation control condition.\"\"\"\n    import random\n    return max(0.0, wd_val + random.gauss(0.0, sigma))\n\n\ndef _step_weight_decay_hypergrad(\n    model: nn.Module,\n    batch: Tuple[torch.Tensor, torch.Tensor],\n    wd_val: float,\n    eta_h: float,\n    label_smoothing: float,\n    device: torch.device,\n) -\u003e float:\n    \"\"\"Compute dL/d(wd) on a single mini-batch and return updated wd.\"\"\"\n    wd = torch.tensor(wd_val, dtype=torch.float32, device=device, requires_grad=True)\n    inputs, targets = batch\n    inputs, targets = inputs.to(device), targets.to(device)\n\n    logits = model(inputs)\n    ce_loss = F.cross_entropy(logits, targets, label_smoothing=label_smoothing)\n    l2_term = 0.5 * wd * sum((p ** 2).sum() for p in model.parameters())\n    loss = ce_loss + l2_term\n\n    grad_wd, = torch.autograd.grad(loss, wd, retain_graph=False, create_graph=False)\n    wd_new = (wd - eta_h * grad_wd).clamp(min=0.0).item()\n    return wd_new\n\n\n# ---------------- Training --------------------------------------------------------\n\ndef train_one_epoch(\n    model: nn.Module,\n    loader: torch.utils.data.DataLoader,\n    optimizer: optim.Optimizer,\n    device: torch.device,\n    label_smoothing: float,\n):\n    model.train()\n    running_loss = 0.0\n    running_acc = 0.0\n    total = 0\n    for x, y in loader:\n        x, y = x.to(device), y.to(device)\n        optimizer.zero_grad()\n        logits = model(x)\n        loss = F.cross_entropy(logits, y, label_smoothing=label_smoothing)\n        loss.backward()\n        optimizer.step()\n\n        batch_size = y.size(0)\n        running_loss += loss.item() * batch_size\n        running_acc += accuracy(logits, y) * batch_size\n        total += batch_size\n    return running_loss / total, running_acc / total\n\n\ndef evaluate(\n    model: nn.Module,\n    loader: torch.utils.data.DataLoader,\n    device: torch.device,\n    label_smoothing: float,\n):\n    model.eval()\n    loss_sum = 0.0\n    acc_sum = 0.0\n    total = 0\n    with torch.no_grad():\n        for x, y in loader:\n            x, y = x.to(device), y.to(device)\n            logits = model(x)\n            loss = F.cross_entropy(logits, y, label_smoothing=label_smoothing)\n            batch = y.size(0)\n            loss_sum += loss.item() * batch\n            acc_sum += accuracy(logits, y) * batch\n            total += batch\n    return loss_sum / total, acc_sum / total\n\n\n# ---------------- Main entry ------------------------------------------------------\n\ndef run_training(run_dir: Path, cfg: Dict, run_id: str):\n    run_dir.mkdir(parents=True, exist_ok=True)\n    (run_dir / \"figures\").mkdir(exist_ok=True, parents=True)\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n    # Set seeds for reproducibility\n    seed = int(cfg.get(\"seed\", 42))\n    set_random_seed(seed)\n\n    # ---------------- Dataset -----------------------------------------------------\n    d_cfg = cfg[\"dataset\"]\n    t_cfg = cfg[\"training\"]\n    train_loader, val_loader, test_loader = preprocess.build_dataloaders(\n        dataset_cfg=d_cfg,\n        batch_size=int(t_cfg[\"batch_size\"]),\n        num_workers=int(t_cfg.get(\"num_workers\", 2)),\n    )\n\n    # ---------------- Model -------------------------------------------------------\n    m_cfg = cfg[\"model\"]\n    model = model_zoo.build_model(m_cfg).to(device)\n\n    # ---------------- Optimiser ---------------------------------------------------\n    opt_cfg = {\n        \"lr\": float(t_cfg[\"learning_rate\"]),\n        \"momentum\": float(t_cfg.get(\"momentum\", 0.0)),\n        \"weight_decay\": float(t_cfg.get(\"weight_decay\", 0.0)),\n    }\n    optimizer = optim.SGD(\n        model.parameters(),\n        lr=opt_cfg[\"lr\"],\n        momentum=opt_cfg[\"momentum\"],\n        weight_decay=opt_cfg[\"weight_decay\"],\n    )\n\n    # ---------------- OHGW warm-start -------------------------------------------\n    ohgw_cfg = cfg.get(\"ohgw\", {})\n    if ohgw_cfg.get(\"enabled\", False):\n        eta_h = float(ohgw_cfg.get(\"eta_h\", 1e-3))\n        n_steps = int(ohgw_cfg.get(\"n_steps\", 1))\n        random_sigma = ohgw_cfg.get(\"random_sigma\", None)\n        batch_iter = iter(train_loader)\n        mini_batch = next(batch_iter)\n\n        wd_val = opt_cfg[\"weight_decay\"]\n        for _ in range(n_steps):\n            if random_sigma is not None:\n                wd_val = _step_weight_decay_random(wd_val, float(random_sigma))\n            else:\n                wd_val = _step_weight_decay_hypergrad(\n                    model,\n                    mini_batch,\n                    wd_val,\n                    eta_h,\n                    float(t_cfg.get(\"label_smoothing\", 0.0)),\n                    device,\n                )\n        opt_cfg[\"weight_decay\"] = wd_val\n\n        # Reinitialise optimiser with updated hyper-param\n        optimizer = optim.SGD(\n            model.parameters(),\n            lr=opt_cfg[\"lr\"],\n            momentum=opt_cfg[\"momentum\"],\n            weight_decay=opt_cfg[\"weight_decay\"],\n        )\n\n    # ---------------- Training loop ---------------------------------------------\n    n_epochs = int(t_cfg[\"epochs\"])\n    label_smooth = float(t_cfg.get(\"label_smoothing\", 0.0))\n    history: List[Dict] = []\n    best_val_acc = -1.0\n    best_state_dict = None\n    start_time = time.time()\n\n    for epoch in range(1, n_epochs + 1):\n        train_loss, train_acc = train_one_epoch(\n            model, train_loader, optimizer, device, label_smooth\n        )\n        val_loss, val_acc = evaluate(model, val_loader, device, label_smooth)\n\n        history.append(\n            {\n                \"epoch\": epoch,\n                \"train_loss\": train_loss,\n                \"train_acc\": train_acc,\n                \"val_loss\": val_loss,\n                \"val_acc\": val_acc,\n            }\n        )\n\n        if val_acc \u003e best_val_acc:\n            best_val_acc = val_acc\n            best_state_dict = {k: v.cpu() for k, v in model.state_dict().items()}\n\n        logging.info(\n            f\"Epoch {epoch:03d}/{n_epochs}: train_loss={train_loss:.4f} train_acc={train_acc:.2f} \"\n            f\"val_loss={val_loss:.4f} val_acc={val_acc:.2f}\"\n        )\n\n    total_seconds = time.time() - start_time\n\n    # ---------------- Test evaluation ------------------------------------------\n    model.load_state_dict(best_state_dict)\n    test_loss, test_acc = evaluate(model, test_loader, device, label_smooth)\n\n    # ---------------- Persist artefacts ----------------------------------------\n    torch.save(best_state_dict, run_dir / \"best_model.pt\")\n    with open(run_dir / \"history.json\", \"w\") as f:\n        json.dump(history, f, indent=2)\n\n    # Figures: loss + accuracy curves -------------------------------------------\n    epochs = [h[\"epoch\"] for h in history]\n    train_losses = [h[\"train_loss\"] for h in history]\n    val_losses = [h[\"val_loss\"] for h in history]\n    plt.figure()\n    plt.plot(epochs, train_losses, label=\"Train\")\n    plt.plot(epochs, val_losses, label=\"Validation\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Cross-Entropy Loss\")\n    plt.title(f\"Training Loss \u2013 {run_id}\")\n    plt.legend()\n    fname_loss = run_dir / \"figures\" / f\"training_loss_{run_id}.pdf\"\n    plt.savefig(fname_loss, bbox_inches=\"tight\")\n    plt.close()\n\n    train_accs = [h[\"train_acc\"] for h in history]\n    val_accs = [h[\"val_acc\"] for h in history]\n    plt.figure()\n    plt.plot(epochs, train_accs, label=\"Train\")\n    plt.plot(epochs, val_accs, label=\"Validation\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Accuracy (%)\")\n    plt.title(f\"Accuracy \u2013 {run_id}\")\n    plt.annotate(\n        f\"Best={best_val_acc:.2f}\", (epochs[-1], val_accs[-1]),\n        textcoords=\"offset points\", xytext=(0, 10), ha=\u0027right\u0027\n    )\n    plt.legend()\n    fname_acc = run_dir / \"figures\" / f\"accuracy_{run_id}.pdf\"\n    plt.savefig(fname_acc, bbox_inches=\"tight\")\n    plt.close()\n\n    # ---------------- Final results JSON ---------------------------------------\n    results = {\n        \"run_id\": run_id,\n        \"seed\": seed,\n        \"dataset\": d_cfg[\"name\"],\n        \"model\": m_cfg[\"name\"],\n        \"ohgw_enabled\": ohgw_cfg.get(\"enabled\", False),\n        \"eta_h\": ohgw_cfg.get(\"eta_h\", None),\n        \"n_steps\": ohgw_cfg.get(\"n_steps\", 1),\n        \"random_sigma\": ohgw_cfg.get(\"random_sigma\", None),\n        \"training_seconds\": total_seconds,\n        \"best_val_accuracy\": best_val_acc,\n        \"test_accuracy\": test_acc,\n        \"test_loss\": test_loss,\n        \"history\": history,\n        \"figures\": [str(fname_loss.name), str(fname_acc.name)],\n    }\n    with open(run_dir / \"results.json\", \"w\") as f:\n        json.dump(results, f, indent=2)\n\n    # ---------------- Mandatory stdout prints ----------------------------------\n    print(\n        f\"\\n==== Experiment Description ({run_id}) ====\\n\"\n        f\"Dataset: {d_cfg[\u0027name\u0027]}\\nModel: {m_cfg[\u0027name\u0027]}\\n\"\n        f\"OHGW: {results[\u0027ohgw_enabled\u0027]} (eta_h={results[\u0027eta_h\u0027]}, \"\n        f\"n_steps={results[\u0027n_steps\u0027]}, random_sigma={results[\u0027random_sigma\u0027]})\\n\"\n        f\"Epochs: {n_epochs}, Batch Size: {t_cfg[\u0027batch_size\u0027]}, LR: {t_cfg[\u0027learning_rate\u0027]}\\n\"\n    )\n    print(json.dumps(results))\n\n\n# ---------------------------------------------------------------------------------\n\ndef parse_args():\n    p = argparse.ArgumentParser(description=\"Run one experiment variation\")\n    p.add_argument(\"--run-id\", required=True, type=str)\n    p.add_argument(\"--config-file\", required=True, type=str)\n    p.add_argument(\"--run-dir\", required=True, type=str)\n    return p.parse_args()\n\n\nif __name__ == \"__main__\":\n    args = parse_args()\n\n    logging.basicConfig(\n        level=logging.INFO,\n        format=\"%(asctime)s | %(levelname)s | %(message)s\",\n        datefmt=\"%H:%M:%S\",\n    )\n\n    with open(args.config_file, \"r\") as f:\n        full_cfg = yaml.safe_load(f)\n\n    run_cfg = full_cfg[\"variations\"][args.run_id]\n\n    run_training(Path(args.run_dir), run_cfg, args.run_id)\n"}


Compare the Base Code with the Derived Experiment Code for this specific experiment thoroughly. Ensure the derived code maintains all the quality, completeness, and functionality of the base code while properly replacing placeholders with specific implementations.
Output:
{
    "is_experiment_code_ready": false,
    "experiment_code_issue": "Requirement breach: every run_variation defined for the experiment must be present in BOTH config/full_experiment.yaml and config/smoke_test.yaml.  The derived code introduces four new variations (asha-baseline, asha-random-warm, asha-ohgw-1step, asha-ohgw-3step) only in config/full_experiment.yaml; none of them appear in config/smoke_test.yaml.  Therefore the smoke-test configuration no longer exercises the full set of variations and the core validation criterion #2 (complete placeholder replacement & variation implementation) is not satisfied."
}
