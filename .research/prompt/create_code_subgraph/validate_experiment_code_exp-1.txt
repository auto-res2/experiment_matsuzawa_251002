
Input:
You are an AI code reviewer validating production-ready experiment code for research papers.

Your task is to compare the derived experiment_code with the original base_code to ensure that:
1. No important functionality has been omitted or truncated
2. All placeholders have been completely replaced with working implementations (no TODO, PLACEHOLDER, pass, or ... allowed)
3. The code is immediately executable and ready for research paper experiments
4. The derived code maintains the quality and completeness of the base foundation

# Instructions

## Core Validation Criteria
Check if the derived experiment code meets ALL of the following requirements:

1. **Complete Implementation Preservation**:
   - All functionality from base_code is preserved or properly enhanced
   - No code sections have been omitted or significantly shortened
   - Core algorithms and logic remain intact and functional
   - No reduction in code quality or completeness

2. **Complete Placeholder Replacement and Variation Implementation**:
   - All `DATASET_PLACEHOLDER` entries replaced with complete, working Hugging Face dataset loading
   - All `MODEL_PLACEHOLDER` entries replaced with complete, working model architectures
   - All `SPECIFIC_CONFIG_PLACEHOLDER` entries replaced with actual parameters
   - All run_variations are defined in both `config/smoke_test.yaml` and `config/full_experiment.yaml`
   - All run_variations are implemented in `src/model.py`
   - `config/smoke_test.yaml` contains ALL run variations in lightweight form
   - No TODO, PLACEHOLDER, pass, ..., or any incomplete implementations remain

3. **Functional Enhancement**:
   - Dataset-specific preprocessing is properly implemented
   - Model-specific configurations are correctly applied
   - Evaluation metrics are adapted for the specific experimental setup
   - All external resources are properly integrated

4. **Code Completeness**:
   - No truncated functions or incomplete implementations
   - All imports and dependencies are properly specified
   - Configuration files contain real experimental parameters
   - No "[UNCHANGED]" markers or similar placeholders remain

5. **Consistency with Base Code**:
   - Same file structure and organization
   - Consistent coding style and patterns
   - Proper error handling and logging maintained
   - All base functionality enhanced, not removed

## Detection of Common Issues
Flag the following problems if found:

- **Truncation**: Code sections that are significantly shorter than base_code equivalents
- **Omission**: Missing functions, classes, or important code blocks from base_code
- **Incomplete Replacement**: TODO, PLACEHOLDER, pass, ..., or any placeholder patterns that haven't been fully replaced with working code
- **Quality Degradation**: Simplified logic that reduces functionality
- **Structural Changes**: Unexpected modifications to the core architecture
- **Not Executable**: Code that cannot be run immediately due to missing implementations

## Output Format
Respond with a JSON object containing:
- `is_experiment_code_ready`: boolean - true if ALL criteria are met, false otherwise
- `experiment_code_issue`: string - specific issues found if any criteria are not met

# Current Research Method
{
    "Open Problems": "Even the fastest gray–box and multi-fidelity HPO methods (ASHA, PASHA, DyHPO, BOIL) still waste computation on obviously bad configurations because every trial is treated as a black box; none of the information that is already available inside the training loop – most notably the stochastic hyper-gradient obtained at almost zero cost with automatic differentiation – is used to steer the search. The open problem is: how can we inject very cheap, noisy hyper-gradient signals into existing bandit-style schedulers without redesigning their core logic?",
    "Methods": "We propose ‘One-Shot Hyper-Gradient Warm-Starts’ (OHGW), a drop-in modification for any Successive-Halving style scheduler (Hyperband / ASHA / PASHA).  1. When a new configuration x is sampled it is run for only one **mini-batch** (≈10-2% of a normal epoch).  2. In this first forward / backward pass we keep the compute graph and call automatic differentiation once more to obtain a single stochastic hyper-gradient ∂L/∂ψ for every continuous hyperparameter ψ (learning-rate, weight-decay, momentum …) exactly as in implicit hyper-gradient papers, but **without unrolling** (cost <1.2× normal mini-batch).  3. We apply one hyper-parameter update ψ←ψ−η_h ∂L/∂ψ (η_h is a fixed tiny step such as 10-3).  4. The adjusted configuration x′ – which differs from x by at most one gradient step in each hyper-parameter – is what the scheduler subsequently evaluates for its first rung (e.g. 1 epoch).  5. Everything else (promotion rules, budget doubling, stopping) is untouched.  In effect the scheduler still explores the same region, but every candidate is lightly nudged towards a valley before costly training starts.",
    "Experimental Setup": "Benchmark: CIFAR-10 with ResNet-20 and 5-dim continuous search space {log-lr, log-wd, momentum, augment-magnitude, label-smoothing}.  Scheduler baselines: ASHA, PASHA, DyHPO (their public implementations).  Our variants: ASHA+OHGW, PASHA+OHGW, DyHPO+OHGW (one-line wrapper around trial creation).  Mini-batch for warm-start: 128 images.  Hyper-gradient lr η_h=1e-3, computed with PyTorch autograd; no higher-order terms.  Each method is given the same overall GPU budget (4×V100 for 12 hours) and 50 seeds.  Metrics: (i) best test accuracy reached vs. wall-clock, (ii) total GPU hours until 93% accuracy, (iii) distribution of final hyper-parameters to check bias.",
    "Experimental Code": "# pseudo-code\nfor cfg in scheduler.sample():\n    model = build_model(cfg)\n    data = next(train_loader)            # one mini-batch\n    loss  = forward_loss(model, data)\n    grads = torch.autograd.grad(loss, cfg.continuous_params())\n    with torch.no_grad():               # one hyper step\n        for p,g in zip(cfg.continuous_params(), grads):\n            p -= eta_h * g\n    scheduler.launch(cfg)               # continue as usual",
    "Expected Result": "Across all schedules OHGW cuts the median time-to-93%-accuracy by ≈20% (ASHA 11.2→9.0 h, PASHA 7.3→5.8 h, DyHPO 6.1→4.9 h) while keeping the same final accuracy. The added warm-start costs <3% extra compute. Hyper-parameter distributions remain similar, showing no harmful bias.",
    "Expected Conclusion": "A single stochastic hyper-gradient step collected before the first rung is enough to noticeably reduce wasted resources in bandit-style HPO. Because OHGW requires only two extra autograd calls and no change to the scheduler logic, it can be retro-fitted to almost any existing gray-box optimizer, offering an attractive efficiency boost with negligible engineering effort."
}

# Experimental Design
## Experiment Strategy
Overall Experimental Strategy for Validating One-Shot Hyper-Gradient Warm-Starts (OHGW)

1. Core Hypotheses to Validate
   a. Efficiency: OHGW reduces wall-clock time and GPU hours needed by bandit-style schedulers to reach a preset performance threshold.
   b. Performance Preservation: OHGW does not hurt (and ideally preserves or slightly improves) the best final metric attainable by the underlying scheduler.
   c. Robustness & Variance: OHGW’s benefit is consistent across random seeds, search-space dimensionalities, data sets, model families and scheduler types.
   d. Generalization: The same one-line wrapper applies without retuning to tasks beyond image classification (e.g. language modelling, tabular, RL) and to both small- and large-scale training loops.
   e. Cost Overhead: Extra compute, memory and engineering overhead introduced by OHGW remain negligible (<5 % GPU-hours, <10 % peak-memory, ≤20 LoC integration).

2. Experiment Families (all experiments draw from one common pool of settings below)
   • Task Breadth: vision (CIFAR-10/100, ImageNet-1k), NLP (WikiText-103), tabular (UCI suite), RL (Atari).
   • Model Breadth: ResNet family, ViT, Transformer-LM, XGBoost, PPO-CNN.
   • Scheduler Breadth: ASHA, PASHA, DyHPO, Hyperband-BO, BOIL (if open-sourced).
   • Search-Space Breadth: 3–10 continuous hyper-parameters; mixed discrete+continuous cases to show neutrality to inapplicable params.
   • Scale Breadth: single-GPU up to 64-GPU distributed training (multi-node pools or simulated via concurrency on the 8×A100 machine).

3. Comparison Axes for Every Experiment
   • Baseline Scheduler (vanilla).
   • Baseline + Random Warm-Start in ∆ψ range (controls for mere perturbation).
   • Baseline + Multiple Hyper-Gradient Steps (ablation to check diminishing returns).
   • Scheduler-specific SoTA gradient-aware HPO if available (e.g. DyHPO, BOIL) to position OHGW competitively.

4. Metrics & Evaluation Protocol
   Primary quantitative metrics (reported as median ±IQR over ≥30 seeds):
      – T@τ: Wall-clock/GPU-hour to reach target score τ (task-specific; chosen so that vanilla reaches it within budget).
      – Best final validation/test score after fixed budget.
      – Compute Overhead: (Σ warm-start flop) ⁄ (total flop) and peak VRAM.
   Secondary diagnostics:
      – AUC of best-score-vs-time curve (overall sample efficiency).
      – Seed-wise variance of T@τ and final score.
      – Hyper-parameter trajectory statistics (mean shift & KL-divergence of posterior over ψ).
   Qualitative/visual:
      – Survival plots of promoted configurations per rung.
      – Heatmaps of hyper-gradient magnitude vs. eventual benefit.
   Statistical test: two-sided Wilcoxon signed-rank (α=0.05) on paired seeds.

5. Success Criteria (must hold in ≥75 % of experiment tuples)
   • ≥15 % median reduction in T@τ with p<0.05.
   • ≤0.2 % relative drop (or improvement) in best final score.
   • ≤5 % extra GPU-hours and ≤10 % extra peak VRAM.
   • Std-dev(T@τ) not inflated by more than 10 %.

6. Multi-Perspective Validation Plan
   • Efficiency: Use identical global budgets and identical seed lists; plot temporal efficiency curves and compute aggregated speed-up ratios.
   • Performance Preservation: Report final accuracy/F1/return and confidence intervals.
   • Robustness: Repeat each experiment block with different batch sizes, η_h values (10⁻⁴…10⁻²) and noisy labels; perform sensitivity analysis.
   • Generalization: Run a “zero-tuning transfer” study—apply the CIFAR-tuned η_h to NLP, RL and tabular tasks unchanged.
   • Ablations & Controls: Random perturbation, multistep hyper-gradient, frozen discrete params, partial gradient masking.
   • Scalability: Micro-benchmark warm-start time and memory for 1, 8, 64 GPUs using synthetic workloads.

7. Experimental Logistics
   • Central harness (Hydra + PyTorch Lightning) to register all trials, guarantee identical I/O pipelines and logging format (wandb/MLflow).
   • Dedicate 4×A100 per independent replicate to avoid resource contention; schedule via Slurm with cgroup accounting to record accurate GPU-hour usage.
   • Automated post-processing notebook generates unified tables, statistical tests and publication-ready plots.

8. Risk Mitigation & Contingency
   • If hyper-gradient extraction fails for exotic layers, fall back to finite-difference on ψ only (flag run but keep in aggregated stats).
   • If OHGW underperforms on discrete-heavy spaces, isolate continuous subset and document limitation.

This unified strategy guarantees that every forthcoming experiment—regardless of domain—collects commensurate evidence on efficiency, performance, robustness, generality and overhead, enabling a cohesive, multi-angle validation of OHGW’s claimed benefits.

# Base Code (Reference Foundation)
{"evaluate_py": "import argparse\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Dict, List\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set(style=\"whitegrid\")\n\nFIGURE_NAMING_RULE = \"{topic}{condition}.pdf\"  # helper for consistent naming\n\n\ndef load_results(results_dir: Path) -\u003e List[Dict]:\n    runs = []\n    for run_dir in results_dir.iterdir():\n        if not run_dir.is_dir():\n            continue\n        res_file = run_dir / \"results.json\"\n        if res_file.exists():\n            with res_file.open() as f:\n                runs.append(json.load(f))\n    return runs\n\n\ndef bar_plot_accuracy(runs: List[Dict], out_path: Path):\n    labels = [r[\"run_id\"] for r in runs]\n    accs = [r[\"best_val_acc\"] for r in runs]\n\n    plt.figure(figsize=(6, 4))\n    ax = sns.barplot(x=labels, y=accs)\n    for idx, val in enumerate(accs):\n        ax.text(idx, val + 0.002, f\"{val:.3f}\", ha=\"center\", va=\"bottom\")\n    plt.ylabel(\"Best Validation Accuracy\")\n    plt.title(\"Comparison of Best Validation Accuracy Across Runs\")\n    plt.savefig(out_path, bbox_inches=\"tight\")\n    plt.close()\n\n\ndef line_plot_loss(runs: List[Dict], out_path: Path):\n    plt.figure(figsize=(6, 4))\n    for r in runs:\n        losses = [e[\"train_loss\"] for e in r[\"history\"]]\n        plt.plot(range(1, len(losses) + 1), losses, label=r[\"run_id\"])\n        # Annotate final value\n        plt.text(len(losses), losses[-1], f\"{losses[-1]:.3f}\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Training Loss\")\n    plt.title(\"Training Loss Curves\")\n    plt.legend()\n    plt.savefig(out_path, bbox_inches=\"tight\")\n    plt.close()\n\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Aggregate and visualise experiment results\")\n    parser.add_argument(\"--results-dir\", type=str, required=True, help=\"Directory containing run sub-folders\")\n    args = parser.parse_args()\n\n    results_dir = Path(args.results_dir)\n    runs = load_results(results_dir)\n    assert len(runs) \u003e 0, \"No results.json files found.\"\n\n    # ------------- Figures --------------\n    acc_out = results_dir / \"accuracy.pdf\"\n    loss_out = results_dir / \"training_loss.pdf\"\n    bar_plot_accuracy(runs, acc_out)\n    line_plot_loss(runs, loss_out)\n\n    # ----------- Numerical JSON ---------\n    summary = {\n        \"num_runs\": len(runs),\n        \"runs\": [{\"run_id\": r[\"run_id\"], \"best_val_acc\": r[\"best_val_acc\"], \"test_acc\": r[\"test_acc\"]} for r in runs]\n    }\n    print(json.dumps(summary, indent=2))\n\n\nif __name__ == \"__main__\":\n    main()\n", "full_experiment_yaml": "# Full experiment configuration template. Populate with actual variations in the specific-experiment step.\nexperiments:\n  # Example entry (to be replaced):\n  - run_id: baseline_schedulerA\n    model: MODEL_PLACEHOLDER  # PLACEHOLDER\n    dataset: DATASET_PLACEHOLDER  # PLACEHOLDER\n    scheduler: SCHEDULER_PLACEHOLDER  # PLACEHOLDER: ASHA / PASHA / etc.\n    epochs: 50\n    batch_size: 128\n    learning_rate: 0.1\n    weight_decay: 1e-4\n    momentum: 0.9\n    use_ohgw: false\n  - run_id: schedulerA_ohgw\n    model: MODEL_PLACEHOLDER\n    dataset: DATASET_PLACEHOLDER\n    scheduler: SCHEDULER_PLACEHOLDER\n    epochs: 50\n    batch_size: 128\n    learning_rate: 0.1\n    weight_decay: 1e-4\n    momentum: 0.9\n    use_ohgw: true\n    eta_h: 1e-3\n  # Add more variations as needed.\n\n# Global settings can be added here if required\n# e.g., default_num_workers: 8\n# These can be accessed in main.py if you extend logic accordingly.\n\n# End of full_experiment.yaml\n", "main_py": "import argparse\nimport json\nimport subprocess\nimport sys\nimport threading\nfrom pathlib import Path\nfrom typing import Dict, Any\n\nimport yaml\n\nCONFIG_DIR = Path(__file__).resolve().parent.parent / \"config\"\n\n\nclass Tee:\n    \"\"\"Tee that duplicates writes to multiple file-like objects (stdout + file).\"\"\"\n\n    def __init__(self, *files):\n        self.files = files\n\n    def write(self, data):\n        for f in self.files:\n            f.write(data)\n            f.flush()\n\n    def flush(self):\n        for f in self.files:\n            f.flush()\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        for f in self.files:\n            try:\n                f.close()\n            except Exception:\n                pass\n\n\ndef stream_pipe(pipe, tee):\n    \"\"\"Continuously read from subprocess pipe and write to Tee.\"\"\"\n    for line in iter(pipe.readline, b\"\"):\n        decoded = line.decode()\n        tee.write(decoded)\n    pipe.close()\n\n\ndef run_experiment(run_cfg: Dict[str, Any], results_root: Path, smoke_test: bool):\n    run_id = run_cfg[\"run_id\"]\n    run_dir = results_root / run_id\n    run_dir.mkdir(parents=True, exist_ok=True)\n\n    # Write run-specific config to disk for train.py\n    cfg_path = run_dir / \"config.yaml\"\n    with cfg_path.open(\"w\") as f:\n        yaml.safe_dump(run_cfg, f)\n\n    cmd = [sys.executable, \"-m\", \"src.train\", \"--config\", str(cfg_path), \"--run-id\", run_id, \"--results-dir\",\n           str(run_dir)]\n    if smoke_test:\n        cmd.append(\"--smoke-test\")\n\n    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, bufsize=1)\n\n    # Prepare tee files\n    stdout_file = (run_dir / \"stdout.log\").open(\"w\")\n    stderr_file = (run_dir / \"stderr.log\").open(\"w\")\n\n    tee_out = Tee(sys.stdout, stdout_file)\n    tee_err = Tee(sys.stderr, stderr_file)\n\n    # Threaded streaming so both pipes are consumed concurrently\n    t_out = threading.Thread(target=stream_pipe, args=(process.stdout, tee_out))\n    t_err = threading.Thread(target=stream_pipe, args=(process.stderr, tee_err))\n    t_out.start()\n    t_err.start()\n\n    process.wait()\n    t_out.join()\n    t_err.join()\n\n    stdout_file.close()\n    stderr_file.close()\n\n    if process.returncode != 0:\n        raise RuntimeError(f\"Run {run_id} failed with return code {process.returncode}\")\n\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Experiment orchestrator: runs all variations and triggers evaluation\")\n    parser.add_argument(\"--smoke-test\", action=\"store_true\", help=\"Run lightweight smoke tests defined in smoke_test.yaml\")\n    parser.add_argument(\"--full-experiment\", action=\"store_true\", help=\"Run full experiment variations defined in full_experiment.yaml\")\n    parser.add_argument(\"--results-dir\", type=str, required=True, help=\"Root directory where all run sub-dirs and figures are saved\")\n    args = parser.parse_args()\n\n    if not (args.smoke_test ^ args.full_experiment):\n        parser.error(\"Exactly one of --smoke-test or --full-experiment must be specified.\")\n\n    cfg_file = CONFIG_DIR / (\"smoke_test.yaml\" if args.smoke_test else \"full_experiment.yaml\")\n    with cfg_file.open() as f:\n        cfg_data = yaml.safe_load(f)\n\n    experiments = cfg_data.get(\"experiments\", [])\n    if len(experiments) == 0:\n        raise ValueError(\"No experiments found in configuration file.\")\n\n    results_root = Path(args.results_dir)\n    results_root.mkdir(parents=True, exist_ok=True)\n\n    for run_cfg in experiments:\n        print(json.dumps({\"event\": \"start_run\", \"run_id\": run_cfg[\"run_id\"]}))\n        run_experiment(run_cfg, results_root, smoke_test=args.smoke_test)\n        print(json.dumps({\"event\": \"end_run\", \"run_id\": run_cfg[\"run_id\"]}))\n\n    # After all runs, trigger evaluation\n    eval_cmd = [sys.executable, \"-m\", \"src.evaluate\", \"--results-dir\", str(results_root)]\n    subprocess.run(eval_cmd, check=True)\n\n\nif __name__ == \"__main__\":\n    main()\n", "model_py": "\"\"\"Model architectures and hyper-parameter utilities.\"\"\"\n\nfrom typing import Dict\n\nimport torch\nimport torch.nn as nn\n\n__all__ = [\"get_model\", \"build_hyperparam_tensors\", \"apply_ohgw_step\"]\n\n\nclass SimpleCNN(nn.Module):\n    \"\"\"Baseline CNN that works for both grayscale and RGB images up to 32\u00d732.\"\"\"\n\n    def __init__(self, in_channels: int, num_classes: int):\n        super().__init__()\n        self.net = nn.Sequential(\n            nn.Conv2d(in_channels, 32, kernel_size=3, padding=1),\n            nn.BatchNorm2d(32),\n            nn.ReLU(),\n            nn.MaxPool2d(2),\n            nn.Conv2d(32, 64, kernel_size=3, padding=1),\n            nn.BatchNorm2d(64),\n            nn.ReLU(),\n            nn.MaxPool2d(2),\n            nn.Flatten(),\n            nn.Linear(64 * 7 * 7 if in_channels == 1 else 64 * 8 * 8, 128),\n            nn.ReLU(),\n            nn.Linear(128, num_classes),\n        )\n\n    def forward(self, x):\n        return self.net(x)\n\n\n# PLACEHOLDER: Additional architectures can be added here (ResNet, Transformer, etc.)\n\n\nMODEL_REGISTRY = {\n    \"MODEL_PLACEHOLDER\": SimpleCNN,  # Default fallback\n    \"baseline\": SimpleCNN,\n}\n\n\ndef get_model(name: str, input_shape, num_classes: int) -\u003e nn.Module:\n    \"\"\"Factory to build models given a name. Falls back to SimpleCNN if not found.\"\"\"\n    name = name.lower()\n    cls = MODEL_REGISTRY.get(name, SimpleCNN)\n    in_channels = input_shape[0]\n    return cls(in_channels, num_classes)\n\n\n# ---------------- Hyper-Param Tensors -----------------\n\ndef build_hyperparam_tensors(lr: float, weight_decay: float, momentum: float, device) -\u003e Dict[str, torch.Tensor]:\n    \"\"\"Represent continuous hyper-parameters as differentiable tensors for OHGW.\"\"\"\n    hypers = {\n        \"log_lr\": torch.tensor(float(torch.log(torch.tensor(lr))), dtype=torch.float32, requires_grad=True, device=device),\n        \"log_wd\": torch.tensor(float(torch.log(torch.tensor(weight_decay + 1e-12))), dtype=torch.float32, requires_grad=True, device=device),\n        \"momentum\": torch.tensor(momentum, dtype=torch.float32, requires_grad=True, device=device),\n    }\n    return hypers\n\n\n# ---------------- OHGW Core Logic --------------------\n\ndef apply_ohgw_step(model: nn.Module, hyperparams: Dict[str, torch.Tensor], train_loader, criterion, eta_h: float,\n                    device):\n    \"\"\"Perform One-Shot Hyper-Gradient Warm-Start as described in the research method.\"\"\"\n    model.train()\n    data_iter = iter(train_loader)\n    data, target = next(data_iter)\n    data, target = data.to(device), target.to(device)\n\n    # Forward pass with current hyper-params\n    output = model(data)\n    ce_loss = criterion(output, target)\n    reg_loss = torch.exp(hyperparams[\u0027log_wd\u0027]) * sum((p ** 2).sum() for p in model.parameters())\n    loss = ce_loss + reg_loss\n\n    # Compute gradients wrt hyper-parameters (stochastic hyper-grad)\n    hypers = list(hyperparams.values())\n    grads = torch.autograd.grad(loss, hypers, allow_unused=True)\n\n    # Gradient descent step in hyper-parameter space\n    with torch.no_grad():\n        for p, g in zip(hyperparams.values(), grads):\n            if g is not None:\n                p -= eta_h * g\n\n    # No need to modify model weights; they will be trained from scratch afterwards.\n    return hyperparams\n", "preprocess_py": "\"\"\"Common preprocessing utilities with dataset placeholders.\"\"\"\n\nfrom pathlib import Path\nfrom typing import Tuple\n\nimport torch\nfrom torch.utils.data import DataLoader, Dataset, random_split\nimport torchvision.transforms as T\nfrom torchvision.datasets import MNIST, CIFAR10\n\n# PLACEHOLDER: Will be replaced with specific dataset loading logic for each experiment\n\n\nclass DummyDataset(Dataset):\n    \"\"\"Synthetic dataset used when DATASET_PLACEHOLDER is specified or dataset not available.\"\"\"\n\n    def __init__(self, length: int = 512, num_classes: int = 10, input_shape=(1, 28, 28)):\n        self.length = length\n        self.num_classes = num_classes\n        self.input_shape = input_shape\n\n    def __len__(self):\n        return self.length\n\n    def __getitem__(self, idx):\n        x = torch.randn(self.input_shape)\n        y = torch.randint(0, self.num_classes, (1,)).item()\n        return x, y\n\n\ndef _split_dataset(dataset: Dataset, val_ratio: float = 0.1):\n    val_size = int(len(dataset) * val_ratio)\n    train_size = len(dataset) - val_size\n    return random_split(dataset, [train_size, val_size])\n\n\ndef load_dataset(name: str, batch_size: int = 128, num_workers: int = 4, smoke_test: bool = False):\n    \"\"\"Return train/val/test loaders and metadata.\"\"\"\n    transform = T.Compose([T.ToTensor()])\n\n    if name == \"DATASET_PLACEHOLDER\":\n        # Use synthetic dummy dataset\n        length = 128 if smoke_test else 2048\n        input_shape = (1, 28, 28)\n        num_classes = 10\n        full_ds = DummyDataset(length=length, num_classes=num_classes, input_shape=input_shape)\n        train_ds, val_ds = _split_dataset(full_ds, val_ratio=0.1)\n        test_ds = DummyDataset(length=int(length * 0.2), num_classes=num_classes, input_shape=input_shape)\n    elif name.lower() == \"mnist\":\n        root = Path.home() / \".cache/datasets\"\n        train_full = MNIST(root=root, train=True, download=True, transform=transform)\n        test_ds = MNIST(root=root, train=False, download=True, transform=transform)\n        train_ds, val_ds = _split_dataset(train_full, val_ratio=0.1)\n        input_shape = (1, 28, 28)\n        num_classes = 10\n    elif name.lower() == \"cifar10\":\n        root = Path.home() / \".cache/datasets\"\n        train_full = CIFAR10(root=root, train=True, download=True, transform=transform)\n        test_ds = CIFAR10(root=root, train=False, download=True, transform=transform)\n        train_ds, val_ds = _split_dataset(train_full, val_ratio=0.1)\n        input_shape = (3, 32, 32)\n        num_classes = 10\n    else:\n        raise ValueError(f\"Unknown dataset name: {name}. Implement loading logic in preprocess.py\")\n\n    train_loader = DataLoader(train_ds, batch_size=batch_size, shuffle=True, num_workers=num_workers)\n    val_loader = DataLoader(val_ds, batch_size=batch_size, shuffle=False, num_workers=num_workers)\n    test_loader = DataLoader(test_ds, batch_size=batch_size, shuffle=False, num_workers=num_workers)\n\n    return train_loader, val_loader, test_loader, input_shape, num_classes\n", "pyproject_toml": "[project]\nname = \"ohgw-experiments\"\nversion = \"0.1.0\"\ndescription = \"Common core foundation for OHGW experimental framework\"\nauthors = [\n  { name = \"Researcher\", email = \"researcher@example.com\" }\n]\nrequires-python = \"\u003e=3.9\"\nreadme = \"README.md\"\n\n[project.dependencies]\ntorch = \"*\"\ntorchvision = \"*\"\nPyYAML = \"*\"\nmatplotlib = \"*\"\nseaborn = \"*\"\nnumpy = \"*\"\ntqdm = \"*\"\n\n[build-system]\nrequires = [\"setuptools\u003e=61.0\"]\nbuild-backend = \"setuptools.build_meta\"\n", "smoke_test_yaml": "# Smoke test configuration with placeholder entries. Replace placeholders in derived experiments.\nexperiments:\n  - run_id: baseline_placeholder\n    model: MODEL_PLACEHOLDER  # PLACEHOLDER: specify concrete model name (e.g., resnet20) in derived experiments\n    dataset: DATASET_PLACEHOLDER  # PLACEHOLDER: specify dataset (e.g., cifar10)\n    epochs: 1\n    batch_size: 16\n    learning_rate: 1e-3\n    weight_decay: 1e-4\n    momentum: 0.9\n    use_ohgw: false\n  - run_id: proposed_placeholder\n    model: MODEL_PLACEHOLDER  # PLACEHOLDER: specify concrete model name\n    dataset: DATASET_PLACEHOLDER  # PLACEHOLDER: specify dataset name\n    epochs: 1\n    batch_size: 16\n    learning_rate: 1e-3\n    weight_decay: 1e-4\n    momentum: 0.9\n    use_ohgw: true\n    eta_h: 1e-3\n", "train_py": "import argparse\nimport json\nimport os\nimport random\nimport time\nfrom pathlib import Path\nfrom typing import Dict, Any\n\nimport numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader\nfrom tqdm import tqdm\n\nfrom .preprocess import load_dataset\nfrom .model import get_model, build_hyperparam_tensors, apply_ohgw_step\n\n\ndef set_seed(seed: int = 42):\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    if torch.cuda.is_available():\n        torch.cuda.manual_seed_all(seed)\n\n\ndef accuracy(output: torch.Tensor, target: torch.Tensor) -\u003e float:\n    \"\"\"Compute top-1 accuracy.\"\"\"\n    with torch.no_grad():\n        preds = output.argmax(dim=1)\n        return (preds == target).float().mean().item()\n\n\ndef train_one_epoch(model: nn.Module, loader: DataLoader, criterion: nn.Module, optimizer: optim.Optimizer,\n                    device: torch.device, hyperparams: Dict[str, torch.Tensor]) -\u003e Dict[str, float]:\n    model.train()\n    running_loss = 0.0\n    running_acc = 0.0\n    for data, target in loader:\n        data, target = data.to(device), target.to(device)\n        optimizer.zero_grad()\n        output = model(data)\n        ce_loss = criterion(output, target)\n        reg_loss = 0.0\n        if \u0027log_wd\u0027 in hyperparams:\n            weight_decay = torch.exp(hyperparams[\u0027log_wd\u0027])\n            reg_loss = weight_decay * sum((p ** 2).sum() for p in model.parameters())\n        loss = ce_loss + reg_loss\n        loss.backward()\n        optimizer.step()\n        # Metrics\n        running_loss += loss.item() * data.size(0)\n        running_acc += accuracy(output, target) * data.size(0)\n    epoch_loss = running_loss / len(loader.dataset)\n    epoch_acc = running_acc / len(loader.dataset)\n    return {\"train_loss\": epoch_loss, \"train_acc\": epoch_acc}\n\n\ndef evaluate(model: nn.Module, loader: DataLoader, criterion: nn.Module, device: torch.device,\n             hyperparams: Dict[str, torch.Tensor]) -\u003e Dict[str, float]:\n    model.eval()\n    running_loss = 0.0\n    running_acc = 0.0\n    with torch.no_grad():\n        for data, target in loader:\n            data, target = data.to(device), target.to(device)\n            output = model(data)\n            ce_loss = criterion(output, target)\n            reg_loss = 0.0\n            if \u0027log_wd\u0027 in hyperparams:\n                weight_decay = torch.exp(hyperparams[\u0027log_wd\u0027])\n                reg_loss = weight_decay * sum((p ** 2).sum() for p in model.parameters())\n            loss = ce_loss + reg_loss\n            running_loss += loss.item() * data.size(0)\n            running_acc += accuracy(output, target) * data.size(0)\n    epoch_loss = running_loss / len(loader.dataset)\n    epoch_acc = running_acc / len(loader.dataset)\n    return {\"val_loss\": epoch_loss, \"val_acc\": epoch_acc}\n\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Run a single experiment variation (training + evaluation)\")\n    parser.add_argument(\"--config\", type=str, required=True, help=\"Path to the run-specific YAML config file\")\n    parser.add_argument(\"--run-id\", type=str, required=True, help=\"Unique identifier for this run (from YAML)\")\n    parser.add_argument(\"--results-dir\", type=str, required=True, help=\"Directory where outputs are stored\")\n    parser.add_argument(\"--smoke-test\", action=\"store_true\", help=\"Run a lightweight smoke test\")\n    args = parser.parse_args()\n\n    # Lazy import pyyaml to avoid unused dependency when train.py is imported elsewhere\n    import yaml\n\n    run_config: Dict[str, Any] = yaml.safe_load(Path(args.config).read_text())\n\n    results_dir = Path(args.results_dir)\n    results_dir.mkdir(parents=True, exist_ok=True)\n\n    set_seed(run_config.get(\"seed\", 42))\n\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n    # ---------------- Data ----------------\n    batch_size = run_config.get(\"batch_size\", 128 if not args.smoke_test else 16)\n    num_workers = run_config.get(\"num_workers\", 4)\n    train_loader, val_loader, test_loader, input_shape, num_classes = load_dataset(\n        run_config.get(\"dataset\", \"DATASET_PLACEHOLDER\"), batch_size=batch_size, num_workers=num_workers,\n        smoke_test=args.smoke_test)\n\n    # ---------------- Model --------------\n    model_name = run_config.get(\"model\", \"MODEL_PLACEHOLDER\")\n    model = get_model(model_name, input_shape, num_classes)\n    model.to(device)\n\n    # ---------------- Hyper-Params -------\n    lr = float(run_config.get(\"learning_rate\", 1e-3))\n    weight_decay = float(run_config.get(\"weight_decay\", 1e-4))\n    momentum = float(run_config.get(\"momentum\", 0.9))\n\n    hyperparams = build_hyperparam_tensors(lr=lr, weight_decay=weight_decay, momentum=momentum, device=device)\n\n    optimizer = optim.SGD(model.parameters(), lr=lr, weight_decay=weight_decay, momentum=momentum)\n    criterion = nn.CrossEntropyLoss()\n\n    # ---------------- OHGW Warm-Start ----\n    if run_config.get(\"use_ohgw\", False):\n        eta_h = float(run_config.get(\"eta_h\", 1e-3))\n        apply_ohgw_step(model, hyperparams, train_loader, criterion, eta_h, device)\n        # Update optimizer with new hyper-params\n        new_wd = float(torch.exp(hyperparams[\u0027log_wd\u0027]).item()) if \u0027log_wd\u0027 in hyperparams else weight_decay\n        for pg in optimizer.param_groups:\n            pg[\u0027weight_decay\u0027] = new_wd\n\n    # --------------- Training Loop -------\n    epochs = int(run_config.get(\"epochs\", 20 if not args.smoke_test else 1))\n    history = []\n    best_val_acc = 0.0\n    start_time = time.time()\n    for epoch in range(1, epochs + 1):\n        train_metrics = train_one_epoch(model, train_loader, criterion, optimizer, device, hyperparams)\n        val_metrics = evaluate(model, val_loader, criterion, device, hyperparams)\n        best_val_acc = max(best_val_acc, val_metrics[\"val_acc\"])\n        epoch_metrics = {\n            \"epoch\": epoch,\n            **train_metrics,\n            **val_metrics,\n        }\n        history.append(epoch_metrics)\n        print(json.dumps({\"run_id\": args.run_id, **epoch_metrics}))\n\n    total_time = time.time() - start_time\n\n    # Final Test Evaluation\n    test_metrics = evaluate(model, test_loader, criterion, device, hyperparams)\n\n    # -------- Save Artifacts ----------\n    final_results = {\n        \"run_id\": args.run_id,\n        \"config\": run_config,\n        \"final_val_acc\": history[-1][\"val_acc\"],\n        \"best_val_acc\": best_val_acc,\n        \"test_acc\": test_metrics[\"val_acc\"],\n        \"epochs\": epochs,\n        \"total_time_sec\": total_time,\n        \"history\": history,\n    }\n\n    results_path = results_dir / \"results.json\"\n    with results_path.open(\"w\") as f:\n        json.dump(final_results, f, indent=2)\n\n    # Also print final summary so GitHub Actions can capture\n    print(json.dumps({\"run_id\": args.run_id, \"status\": \"completed\", \"best_val_acc\": best_val_acc, \"test_acc\": test_metrics[\"val_acc\"], \"total_time_sec\": total_time}))\n\n\nif __name__ == \"__main__\":\n    main()\n"}

# Current Experiment (To be validated)
- Experiment ID: exp-1
- Description: Objective / Hypothesis: Quantify the raw efficiency gains of One-Shot Hyper-Gradient Warm-Starts (OHGW) for classical image-classification hyper-parameter optimisation and disentangle the effect of merely perturbing the hyper-parameters from using the true hyper-gradient.

Domain & Task: Vision – CIFAR-10 image classification.

Models: ResNet-20 (main), ResNet-50 (sanity-check on a deeper network – evaluated only for the best scheduler variant after selection).

Schedulers under test: ASHA (official implementation in Ray-Tune v2.6).

Search space (5-dim continuous): log10-learning-rate, log10-weight-decay, momentum, RandAugment-magnitude, label-smoothing.

Run variations:
• asha-baseline – vanilla ASHA.
• asha-random-warm – perform one random Gaussian step (σ=0.01) in ψ instead of a hyper-gradient step (control).* 
• asha-ohgw-1step – proposed method (η_h=1e-3, one step).
• asha-ohgw-3step – same but apply three successive hyper-gradient steps (ablation for diminishing returns).

Datasets & Pre-processing: CIFAR-10, standard train/val/test split = 45k/5k/10k.  Per-image Z-score normalisation, RandAugment (m searchable), Cutout(16), label-smoothing (ε searchable).  Validation set is stratified.

Training loop: 200 epochs (budget for full training), Cosine LR, batch size 128, SGD-M.  Weight initialisation He-normal.  Mixed precision (AMP).  Early-stopping OFF (to reveal full curve).

Evaluation metrics:
Primary – T@93%: wall-clock hours & GPU hours needed to first reach 93% val accuracy.
Secondary – best test accuracy after 200 epochs; AUC(score-vs-time); overhead-FLOPs ratio; peak VRAM; seed-wise variance.

Protocol: 32 independent HPO replicates (seed-paired across variations).  Each replicate is allowed 12 A100-GPU hours (4 GPUs×3 h) exactly.  Statistics: median±IQR, Wilcoxon signed-rank (α=0.05) on paired T@93%.

Hyper-parameter sensitivity: inside asha-ohgw-1step, sweep η_h ∈ {1e-4, 3e-4, 1e-3, 3e-3} on an extra 8 seeds; fit LOESS to quantify curvature.

Robustness: inject 10% symmetric label noise on a duplicate run; compare % speed-up retained.

Compute efficiency: PyTorch-Profiler to record FLOPs; NVML + psutil for VRAM/RAM; timestamps logged by Lightning Callbacks.

Example code fragment (within Ray trial):
```python
# one-shot HG warm-start
loss = model(train_mb)                    # forward
hyper_grads = torch.autograd.grad(loss, cfg.continuous())
with torch.no_grad():
    for p, g in zip(cfg.continuous(), hyper_grads):
        p -= 1e-3 * g                     # η_h
# hand control back to ASHA
train_full(cfg)
```

Computational budget on cluster: 8 concurrent trials * 4 GPUs each = 32 GPUs (< half of node).  Wall-clock expected 18h incl. repeats.

Success criteria: ≥15% lower median T@93% for asha-ohgw-1step than asha-baseline with p<0.05 and ≤0.2% drop in final test accuracy.

Footnote *: random-warm uses identical σ distribution as the empirical magnitude of a hyper-gradient step, ensuring fair energy injection.
- Run Variations: ['asha-baseline', 'asha-random-warm', 'asha-ohgw-1step', 'asha-ohgw-3step']

# Derived Experiment Code (To be validated)

{"evaluate_py": "import argparse\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Dict, List\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set(style=\"whitegrid\")\n\nFIGURE_NAMING_RULE = \"{topic}{condition}.pdf\"  # helper for consistent naming\n\n\ndef load_results(results_dir: Path) -\u003e List[Dict]:\n    runs = []\n    for run_dir in results_dir.iterdir():\n        if not run_dir.is_dir():\n            continue\n        res_file = run_dir / \"results.json\"\n        if res_file.exists():\n            with res_file.open() as f:\n                runs.append(json.load(f))\n    return runs\n\n\ndef bar_plot_accuracy(runs: List[Dict], out_path: Path):\n    labels = [r[\"run_id\"] for r in runs]\n    accs = [r[\"best_val_acc\"] for r in runs]\n\n    plt.figure(figsize=(6, 4))\n    ax = sns.barplot(x=labels, y=accs)\n    for idx, val in enumerate(accs):\n        ax.text(idx, val + 0.002, f\"{val:.3f}\", ha=\"center\", va=\"bottom\")\n    plt.ylabel(\"Best Validation Accuracy\")\n    plt.title(\"Comparison of Best Validation Accuracy Across Runs\")\n    plt.savefig(out_path, bbox_inches=\"tight\")\n    plt.close()\n\n\ndef line_plot_loss(runs: List[Dict], out_path: Path):\n    plt.figure(figsize=(6, 4))\n    for r in runs:\n        losses = [e[\"train_loss\"] for e in r[\"history\"]]\n        plt.plot(range(1, len(losses) + 1), losses, label=r[\"run_id\"])\n        # Annotate final value\n        plt.text(len(losses), losses[-1], f\"{losses[-1]:.3f}\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Training Loss\")\n    plt.title(\"Training Loss Curves\")\n    plt.legend()\n    plt.savefig(out_path, bbox_inches=\"tight\")\n    plt.close()\n\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Aggregate and visualise experiment results\")\n    parser.add_argument(\"--results-dir\", type=str, required=True, help=\"Directory containing run sub-folders\")\n    args = parser.parse_args()\n\n    results_dir = Path(args.results_dir)\n    runs = load_results(results_dir)\n    assert len(runs) \u003e 0, \"No results.json files found.\"\n\n    # ------------- Figures --------------\n    acc_out = results_dir / \"accuracy.pdf\"\n    loss_out = results_dir / \"training_loss.pdf\"\n    bar_plot_accuracy(runs, acc_out)\n    line_plot_loss(runs, loss_out)\n\n    # ----------- Numerical JSON ---------\n    summary = {\n        \"num_runs\": len(runs),\n        \"runs\": [{\"run_id\": r[\"run_id\"], \"best_val_acc\": r[\"best_val_acc\"], \"test_acc\": r[\"test_acc\"]} for r in runs]\n    }\n    print(json.dumps(summary, indent=2))\n\n\nif __name__ == \"__main__\":\n    main()\n", "full_experiment_yaml": "experiments:\n  - run_id: asha-baseline\n    model: resnet20\n    dataset: cifar10\n    epochs: 200\n    batch_size: 128\n    learning_rate: 0.1\n    weight_decay: 0.0005\n    momentum: 0.9\n    label_smoothing: 0.0\n    randaugment_m: 9\n    cutout_size: 16\n    use_ohgw: false\n    use_random_warm: false\n  - run_id: asha-random-warm\n    model: resnet20\n    dataset: cifar10\n    epochs: 200\n    batch_size: 128\n    learning_rate: 0.1\n    weight_decay: 0.0005\n    momentum: 0.9\n    label_smoothing: 0.0\n    randaugment_m: 9\n    cutout_size: 16\n    use_ohgw: false\n    use_random_warm: true\n    random_sigma: 0.01\n  - run_id: asha-ohgw-1step\n    model: resnet20\n    dataset: cifar10\n    epochs: 200\n    batch_size: 128\n    learning_rate: 0.1\n    weight_decay: 0.0005\n    momentum: 0.9\n    label_smoothing: 0.0\n    randaugment_m: 9\n    cutout_size: 16\n    use_ohgw: true\n    eta_h: 0.001\n    ohgw_steps: 1\n  - run_id: asha-ohgw-3step\n    model: resnet20\n    dataset: cifar10\n    epochs: 200\n    batch_size: 128\n    learning_rate: 0.1\n    weight_decay: 0.0005\n    momentum: 0.9\n    label_smoothing: 0.0\n    randaugment_m: 9\n    cutout_size: 16\n    use_ohgw: true\n    eta_h: 0.001\n    ohgw_steps: 3\n    \n# The scheduler itself (ASHA) is handled externally by the orchestration layer (e.g. Ray Tune) in the full production\n# experimental setup. Here we focus on the warm-start behaviour inside individual trials.\n\n# End of configuration file\n", "main_py": "import argparse\nimport json\nimport subprocess\nimport sys\nimport threading\nfrom pathlib import Path\nfrom typing import Dict, Any\n\nimport yaml\n\nCONFIG_DIR = Path(__file__).resolve().parent.parent / \"config\"\n\n\nclass Tee:\n    \"\"\"Tee that duplicates writes to multiple file-like objects (stdout + file).\"\"\"\n\n    def __init__(self, *files):\n        self.files = files\n\n    def write(self, data):\n        for f in self.files:\n            f.write(data)\n            f.flush()\n\n    def flush(self):\n        for f in self.files:\n            f.flush()\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        for f in self.files:\n            try:\n                f.close()\n            except Exception:\n                pass\n\n\ndef stream_pipe(pipe, tee):\n    \"\"\"Continuously read from subprocess pipe and write to Tee.\"\"\"\n    for line in iter(pipe.readline, b\"\"):\n        decoded = line.decode()\n        tee.write(decoded)\n    pipe.close()\n\n\ndef run_experiment(run_cfg: Dict[str, Any], results_root: Path, smoke_test: bool):\n    run_id = run_cfg[\"run_id\"]\n    run_dir = results_root / run_id\n    run_dir.mkdir(parents=True, exist_ok=True)\n\n    # Write run-specific config to disk for train.py\n    cfg_path = run_dir / \"config.yaml\"\n    with cfg_path.open(\"w\") as f:\n        yaml.safe_dump(run_cfg, f)\n\n    cmd = [sys.executable, \"-m\", \"src.train\", \"--config\", str(cfg_path), \"--run-id\", run_id, \"--results-dir\",\n           str(run_dir)]\n    if smoke_test:\n        cmd.append(\"--smoke-test\")\n\n    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, bufsize=1)\n\n    # Prepare tee files\n    stdout_file = (run_dir / \"stdout.log\").open(\"w\")\n    stderr_file = (run_dir / \"stderr.log\").open(\"w\")\n\n    tee_out = Tee(sys.stdout, stdout_file)\n    tee_err = Tee(sys.stderr, stderr_file)\n\n    # Threaded streaming so both pipes are consumed concurrently\n    t_out = threading.Thread(target=stream_pipe, args=(process.stdout, tee_out))\n    t_err = threading.Thread(target=stream_pipe, args=(process.stderr, tee_err))\n    t_out.start()\n    t_err.start()\n\n    process.wait()\n    t_out.join()\n    t_err.join()\n\n    stdout_file.close()\n    stderr_file.close()\n\n    if process.returncode != 0:\n        raise RuntimeError(f\"Run {run_id} failed with return code {process.returncode}\")\n\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Experiment orchestrator: runs all variations and triggers evaluation\")\n    parser.add_argument(\"--smoke-test\", action=\"store_true\", help=\"Run lightweight smoke tests defined in smoke_test.yaml\")\n    parser.add_argument(\"--full-experiment\", action=\"store_true\", help=\"Run full experiment variations defined in full_experiment.yaml\")\n    parser.add_argument(\"--results-dir\", type=str, required=True, help=\"Root directory where all run sub-dirs and figures are saved\")\n    args = parser.parse_args()\n\n    if not (args.smoke_test ^ args.full_experiment):\n        parser.error(\"Exactly one of --smoke-test or --full-experiment must be specified.\")\n\n    cfg_file = CONFIG_DIR / (\"smoke_test.yaml\" if args.smoke_test else \"full_experiment.yaml\")\n    with cfg_file.open() as f:\n        cfg_data = yaml.safe_load(f)\n\n    experiments = cfg_data.get(\"experiments\", [])\n    if len(experiments) == 0:\n        raise ValueError(\"No experiments found in configuration file.\")\n\n    results_root = Path(args.results_dir)\n    results_root.mkdir(parents=True, exist_ok=True)\n\n    for run_cfg in experiments:\n        print(json.dumps({\"event\": \"start_run\", \"run_id\": run_cfg[\"run_id\"]}))\n        run_experiment(run_cfg, results_root, smoke_test=args.smoke_test)\n        print(json.dumps({\"event\": \"end_run\", \"run_id\": run_cfg[\"run_id\"]}))\n\n    # After all runs, trigger evaluation\n    eval_cmd = [sys.executable, \"-m\", \"src.evaluate\", \"--results-dir\", str(results_root)]\n    subprocess.run(eval_cmd, check=True)\n\n\nif __name__ == \"__main__\":\n    main()\n", "model_py": "\"\"\"Model architectures and hyper-parameter utilities.\"\"\"\n\nfrom typing import Dict\n\nimport torch\nimport torch.nn as nn\nimport torchvision.models as tvm\n\n__all__ = [\n    \"get_model\",\n    \"build_hyperparam_tensors\",\n    \"apply_ohgw_step\",\n    \"apply_random_warm_step\",\n]\n\n\n# ---------------------------------------------------------------\n# CIFAR-10 ResNet-20 implementation\n# ---------------------------------------------------------------\n\n\nclass _BasicBlock(nn.Module):\n    expansion = 1\n\n    def __init__(self, in_planes: int, planes: int, stride: int = 1):\n        super().__init__()\n        self.conv1 = nn.Conv2d(\n            in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False\n        )\n        self.bn1 = nn.BatchNorm2d(planes)\n        self.relu = nn.ReLU(inplace=True)\n        self.conv2 = nn.Conv2d(\n            planes, planes, kernel_size=3, stride=1, padding=1, bias=False\n        )\n        self.bn2 = nn.BatchNorm2d(planes)\n\n        self.downsample = None\n        if stride != 1 or in_planes != planes:\n            self.downsample = nn.Sequential(\n                nn.Conv2d(\n                    in_planes,\n                    planes,\n                    kernel_size=1,\n                    stride=stride,\n                    bias=False,\n                ),\n                nn.BatchNorm2d(planes),\n            )\n\n    def forward(self, x):\n        identity = x\n        out = self.relu(self.bn1(self.conv1(x)))\n        out = self.bn2(self.conv2(out))\n        if self.downsample is not None:\n            identity = self.downsample(identity)\n        out += identity\n        out = self.relu(out)\n        return out\n\n\nclass ResNetCIFAR(nn.Module):\n    \"\"\"ResNet v1 for CIFAR with configurable depth (multiple of 6 + 2).\"\"\"\n\n    def __init__(self, depth: int = 20, num_classes: int = 10, in_channels: int = 3):\n        super().__init__()\n        assert (\n            depth - 2\n        ) % 6 == 0, \"Depth should be of the form 6n+2 for CIFAR ResNet\"\n        n = (depth - 2) // 6\n        self.in_planes = 16\n        self.conv1 = nn.Conv2d(\n            in_channels, 16, kernel_size=3, stride=1, padding=1, bias=False\n        )\n        self.bn1 = nn.BatchNorm2d(16)\n        self.relu = nn.ReLU(inplace=True)\n\n        # 3 stages\n        self.layer1 = self._make_layer(16, n, stride=1)\n        self.layer2 = self._make_layer(32, n, stride=2)\n        self.layer3 = self._make_layer(64, n, stride=2)\n        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))\n        self.fc = nn.Linear(64, num_classes)\n\n        # weight init\n        for m in self.modules():\n            if isinstance(m, nn.Conv2d):\n                nn.init.kaiming_normal_(m.weight, mode=\"fan_out\", nonlinearity=\"relu\")\n            elif isinstance(m, nn.BatchNorm2d):\n                nn.init.constant_(m.weight, 1)\n                nn.init.constant_(m.bias, 0)\n\n    def _make_layer(self, planes: int, blocks: int, stride: int):\n        layers = []\n        layers.append(_BasicBlock(self.in_planes, planes, stride))\n        self.in_planes = planes\n        for _ in range(1, blocks):\n            layers.append(_BasicBlock(self.in_planes, planes, 1))\n        return nn.Sequential(*layers)\n\n    def forward(self, x):\n        x = self.relu(self.bn1(self.conv1(x)))\n        x = self.layer1(x)\n        x = self.layer2(x)\n        x = self.layer3(x)\n        x = self.avgpool(x)\n        x = torch.flatten(x, 1)\n        x = self.fc(x)\n        return x\n\n\n# ---------------------------------------------------------------\n# Registry\n# ---------------------------------------------------------------\n\n\nclass SimpleCNN(nn.Module):\n    \"\"\"Generic small CNN used as a minimal baseline.\"\"\"\n\n    def __init__(self, in_channels: int, num_classes: int):\n        super().__init__()\n        self.net = nn.Sequential(\n            nn.Conv2d(in_channels, 32, kernel_size=3, padding=1),\n            nn.BatchNorm2d(32),\n            nn.ReLU(),\n            nn.MaxPool2d(2),\n            nn.Conv2d(32, 64, kernel_size=3, padding=1),\n            nn.BatchNorm2d(64),\n            nn.ReLU(),\n            nn.MaxPool2d(2),\n            nn.Flatten(),\n            nn.Linear(64 * 8 * 8 if in_channels == 3 else 64 * 7 * 7, 128),\n            nn.ReLU(),\n            nn.Linear(128, num_classes),\n        )\n\n    def forward(self, x):\n        return self.net(x)\n\n\nMODEL_REGISTRY = {\n    \"simplecnn\": SimpleCNN,\n    \"baseline\": SimpleCNN,\n    \"resnet20\": lambda in_c, n_cls: ResNetCIFAR(depth=20, num_classes=n_cls, in_channels=in_c),\n    \"resnet50\": lambda in_c, n_cls: tvm.resnet50(num_classes=n_cls),\n}\n\n\n# ---------------------------------------------------------------\n# Factory\n# ---------------------------------------------------------------\n\n\ndef get_model(name: str, input_shape, num_classes: int) -\u003e nn.Module:\n    cls_or_fn = MODEL_REGISTRY.get(name.lower())\n    if cls_or_fn is None:\n        raise ValueError(f\"Unknown model name: {name}. Available: {list(MODEL_REGISTRY)}\")\n    in_channels = input_shape[0]\n    model = cls_or_fn(in_channels, num_classes) if callable(cls_or_fn) else cls_or_fn\n    return model\n\n\n# ---------------------------------------------------------------\n# Hyper-parameter utilities\n# ---------------------------------------------------------------\n\ndef build_hyperparam_tensors(\n    lr: float, weight_decay: float, momentum: float, device\n) -\u003e Dict[str, torch.Tensor]:\n    \"\"\"Represent continuous hyper-parameters as differentiable tensors.\"\"\"\n    hypers = {\n        \"log_lr\": torch.tensor(np_log(lr), dtype=torch.float32, requires_grad=True, device=device),\n        \"log_wd\": torch.tensor(\n            np_log(max(weight_decay, 1e-12)),\n            dtype=torch.float32,\n            requires_grad=True,\n            device=device,\n        ),\n        \"momentum\": torch.tensor(momentum, dtype=torch.float32, requires_grad=True, device=device),\n    }\n    return hypers\n\n\ndef np_log(x: float):\n    import math\n\n    return math.log(x)\n\n\n# ---------------------------------------------------------------\n# OHGW \u0026 Random warm-start\n# ---------------------------------------------------------------\n\ndef apply_ohgw_step(\n    model: nn.Module,\n    hyperparams: Dict[str, torch.Tensor],\n    train_loader,\n    criterion,\n    eta_h: float,\n    device,\n):\n    \"\"\"Perform one stochastic hyper-gradient step (OHGW).\"\"\"\n    model.train()\n    data_iter = iter(train_loader)\n    data, target = next(data_iter)\n    data, target = data.to(device), target.to(device)\n\n    # Forward\n    output = model(data)\n    ce_loss = criterion(output, target)\n    reg_loss = torch.exp(hyperparams[\"log_wd\"]) * sum(\n        (p ** 2).sum() for p in model.parameters()\n    )\n    loss = ce_loss + reg_loss\n\n    grads = torch.autograd.grad(\n        loss, list(hyperparams.values()), allow_unused=True, retain_graph=False\n    )\n    with torch.no_grad():\n        for p, g in zip(hyperparams.values(), grads):\n            if g is not None:\n                p -= eta_h * g\n    return hyperparams\n\n\ndef apply_random_warm_step(hyperparams: Dict[str, torch.Tensor], sigma: float = 0.01):\n    \"\"\"Random Gaussian perturbation with std `sigma` as control experiment.\"\"\"\n    with torch.no_grad():\n        for p in hyperparams.values():\n            noise = torch.randn_like(p) * sigma\n            p += noise\n    return hyperparams\n", "preprocess_py": "\"\"\"Dataset loading and augmentation utilities for CIFAR-10 experiments.\"\"\"\n\nfrom pathlib import Path\nfrom typing import Tuple\n\nimport numpy as np\nimport torch\nfrom torch.utils.data import DataLoader, Subset\nimport torchvision.transforms as T\nfrom torchvision.datasets import CIFAR10\n\n__all__ = [\"load_dataset\"]\n\n\nCIFAR10_MEAN = (0.4914, 0.4822, 0.4465)\nCIFAR10_STD = (0.2023, 0.1994, 0.2010)\n\n\n# ---------------------------------------------------------------\n# Cutout implementation (operates on tensors after ToTensor)\n# ---------------------------------------------------------------\n\n\nclass Cutout:\n    \"\"\"Apply Cutout augmentation as described in DeVries \u0026 Taylor 2017.\"\"\"\n\n    def __init__(self, length: int = 16):\n        self.length = length\n\n    def __call__(self, img: torch.Tensor):\n        # img is Tensor C\u00d7H\u00d7W in [0,1]\n        _, h, w = img.shape\n        mask = torch.ones((h, w), dtype=torch.bool)\n        y = np.random.randint(h)\n        x = np.random.randint(w)\n        y1 = np.clip(y - self.length // 2, 0, h)\n        y2 = np.clip(y + self.length // 2, 0, h)\n        x1 = np.clip(x - self.length // 2, 0, w)\n        x2 = np.clip(x + self.length // 2, 0, w)\n        img[:, y1:y2, x1:x2] = 0.0\n        return img\n\n\n# ---------------------------------------------------------------\n# Stratified split helper\n# ---------------------------------------------------------------\n\n\ndef _stratified_split(dataset: CIFAR10, val_size: int = 5000, seed: int = 42):\n    rng = np.random.default_rng(seed)\n    targets = np.array(dataset.targets)\n    train_indices = []\n    val_indices = []\n    num_classes = 10\n    per_class_val = val_size // num_classes\n    for cls in range(num_classes):\n        cls_indices = np.where(targets == cls)[0]\n        rng.shuffle(cls_indices)\n        val_indices.extend(cls_indices[:per_class_val])\n        train_indices.extend(cls_indices[per_class_val:])\n    return train_indices, val_indices\n\n\n# ---------------------------------------------------------------\n# Public loader\n# ---------------------------------------------------------------\n\n\ndef load_dataset(\n    name: str,\n    batch_size: int = 128,\n    num_workers: int = 4,\n    smoke_test: bool = False,\n    randaugment_m: int = 9,\n    cutout_size: int = 16,\n):\n    \"\"\"Return train/val/test DataLoaders and meta-information.\n\n    Only \"cifar10\" is supported for this specialised experiment.\n    \"\"\"\n\n    if name.lower() != \"cifar10\":\n        raise ValueError(\n            \"This specialised experiment only supports \u0027cifar10\u0027. Got: {name}\"\n        )\n\n    root = Path.home() / \".cache\" / \"datasets\"\n\n    # Base transforms (shared mean/std)\n    normalize = T.Normalize(mean=CIFAR10_MEAN, std=CIFAR10_STD)\n\n    train_transform = T.Compose(\n        [\n            T.RandomCrop(32, padding=4),\n            T.RandAugment(num_ops=2, magnitude=randaugment_m),\n            T.ToTensor(),\n            Cutout(length=cutout_size),\n            normalize,\n        ]\n    )\n\n    test_transform = T.Compose([\n        T.ToTensor(),\n        normalize,\n    ])\n\n    full_train = CIFAR10(root=root, train=True, download=True, transform=train_transform)\n    test_ds = CIFAR10(root=root, train=False, download=True, transform=test_transform)\n\n    if smoke_test:\n        # Use a tiny subset for quick runs (e.g. 512 train, 128 val)\n        train_indices = list(range(512))\n        val_indices = list(range(512, 640))\n    else:\n        train_indices, val_indices = _stratified_split(full_train, val_size=5000, seed=42)\n\n    train_ds = Subset(full_train, train_indices)\n    # Validation must NOT use RandAugment / Cutout, so clone with test_transform\n    full_train_no_aug = CIFAR10(root=root, train=True, download=True, transform=test_transform)\n    val_ds = Subset(full_train_no_aug, val_indices)\n\n    train_loader = DataLoader(\n        train_ds,\n        batch_size=batch_size,\n        shuffle=True,\n        num_workers=num_workers,\n        pin_memory=True,\n    )\n    val_loader = DataLoader(\n        val_ds,\n        batch_size=batch_size,\n        shuffle=False,\n        num_workers=num_workers,\n        pin_memory=True,\n    )\n    test_loader = DataLoader(\n        test_ds,\n        batch_size=batch_size,\n        shuffle=False,\n        num_workers=num_workers,\n        pin_memory=True,\n    )\n\n    input_shape = (3, 32, 32)\n    num_classes = 10\n\n    return train_loader, val_loader, test_loader, input_shape, num_classes\n", "pyproject_toml": "[project]\nname = \"ohgw-experiments\"\nversion = \"0.1.0\"\ndescription = \"Common core foundation for OHGW experimental framework\"\nauthors = [\n  { name = \"Researcher\", email = \"researcher@example.com\" }\n]\nrequires-python = \"\u003e=3.9\"\nreadme = \"README.md\"\n\n[project.dependencies]\ntorch = \"*\"\ntorchvision = \"*\"\nPyYAML = \"*\"\nmatplotlib = \"*\"\nseaborn = \"*\"\nnumpy = \"*\"\ntqdm = \"*\"\n\n[build-system]\nrequires = [\"setuptools\u003e=61.0\"]\nbuild-backend = \"setuptools.build_meta\"\n", "smoke_test_yaml": "experiments:\n  - run_id: asha-baseline-smoke\n    model: resnet20\n    dataset: cifar10\n    epochs: 1\n    batch_size: 16\n    learning_rate: 0.1\n    weight_decay: 0.0005\n    momentum: 0.9\n    label_smoothing: 0.0\n    randaugment_m: 2\n    cutout_size: 8\n    use_ohgw: false\n    use_random_warm: false\n  - run_id: asha-random-warm-smoke\n    model: resnet20\n    dataset: cifar10\n    epochs: 1\n    batch_size: 16\n    learning_rate: 0.1\n    weight_decay: 0.0005\n    momentum: 0.9\n    label_smoothing: 0.0\n    randaugment_m: 2\n    cutout_size: 8\n    use_ohgw: false\n    use_random_warm: true\n    random_sigma: 0.01\n  - run_id: asha-ohgw-1step-smoke\n    model: resnet20\n    dataset: cifar10\n    epochs: 1\n    batch_size: 16\n    learning_rate: 0.1\n    weight_decay: 0.0005\n    momentum: 0.9\n    label_smoothing: 0.0\n    randaugment_m: 2\n    cutout_size: 8\n    use_ohgw: true\n    eta_h: 0.001\n    ohgw_steps: 1\n  - run_id: asha-ohgw-3step-smoke\n    model: resnet20\n    dataset: cifar10\n    epochs: 1\n    batch_size: 16\n    learning_rate: 0.1\n    weight_decay: 0.0005\n    momentum: 0.9\n    label_smoothing: 0.0\n    randaugment_m: 2\n    cutout_size: 8\n    use_ohgw: true\n    eta_h: 0.001\n    ohgw_steps: 3\n", "train_py": "import argparse\nimport json\nimport os\nimport random\nimport time\nfrom pathlib import Path\nfrom typing import Dict, Any\n\nimport numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader\nfrom tqdm import tqdm\n\nfrom .preprocess import load_dataset\nfrom .model import (\n    get_model,\n    build_hyperparam_tensors,\n    apply_ohgw_step,\n    apply_random_warm_step,\n)\n\n\ndef set_seed(seed: int = 42):\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    if torch.cuda.is_available():\n        torch.cuda.manual_seed_all(seed)\n\n\ndef accuracy(output: torch.Tensor, target: torch.Tensor) -\u003e float:\n    \"\"\"Compute top-1 accuracy.\"\"\"\n    with torch.no_grad():\n        preds = output.argmax(dim=1)\n        return (preds == target).float().mean().item()\n\n\ndef train_one_epoch(\n    model: nn.Module,\n    loader: DataLoader,\n    criterion: nn.Module,\n    optimizer: optim.Optimizer,\n    device: torch.device,\n    hyperparams: Dict[str, torch.Tensor],\n) -\u003e Dict[str, float]:\n    model.train()\n    running_loss = 0.0\n    running_acc = 0.0\n    for data, target in loader:\n        data, target = data.to(device), target.to(device)\n        optimizer.zero_grad()\n        output = model(data)\n        ce_loss = criterion(output, target)\n        reg_loss = 0.0\n        if \"log_wd\" in hyperparams:\n            weight_decay = torch.exp(hyperparams[\"log_wd\"])\n            reg_loss = weight_decay * sum((p ** 2).sum() for p in model.parameters())\n        loss = ce_loss + reg_loss\n        loss.backward()\n        optimizer.step()\n        # Metrics\n        running_loss += loss.item() * data.size(0)\n        running_acc += accuracy(output, target) * data.size(0)\n    epoch_loss = running_loss / len(loader.dataset)\n    epoch_acc = running_acc / len(loader.dataset)\n    return {\"train_loss\": epoch_loss, \"train_acc\": epoch_acc}\n\n\ndef evaluate(\n    model: nn.Module,\n    loader: DataLoader,\n    criterion: nn.Module,\n    device: torch.device,\n    hyperparams: Dict[str, torch.Tensor],\n) -\u003e Dict[str, float]:\n    model.eval()\n    running_loss = 0.0\n    running_acc = 0.0\n    with torch.no_grad():\n        for data, target in loader:\n            data, target = data.to(device), target.to(device)\n            output = model(data)\n            ce_loss = criterion(output, target)\n            reg_loss = 0.0\n            if \"log_wd\" in hyperparams:\n                weight_decay = torch.exp(hyperparams[\"log_wd\"])\n                reg_loss = weight_decay * sum((p ** 2).sum() for p in model.parameters())\n            loss = ce_loss + reg_loss\n            running_loss += loss.item() * data.size(0)\n            running_acc += accuracy(output, target) * data.size(0)\n    epoch_loss = running_loss / len(loader.dataset)\n    epoch_acc = running_acc / len(loader.dataset)\n    return {\"val_loss\": epoch_loss, \"val_acc\": epoch_acc}\n\n\n# ---------------------------------------------------------------\n# Utility helpers for warm-starts \u0026 hyper-param \u2194 optimizer sync\n# ---------------------------------------------------------------\n\ndef _update_optimizer_from_hypers(\n    optimizer: optim.Optimizer, hyperparams: Dict[str, torch.Tensor]\n):\n    \"\"\"Propagate tensor hyper-parameters back into `torch.optim` param groups.\"\"\"\n    new_lr = float(torch.exp(hyperparams[\"log_lr\"]).item())\n    new_wd = float(torch.exp(hyperparams[\"log_wd\"]).item())\n    new_momentum = float(hyperparams[\"momentum\"].item())\n    for pg in optimizer.param_groups:\n        pg[\"lr\"] = new_lr\n        pg[\"weight_decay\"] = new_wd\n        if \"momentum\" in pg:\n            pg[\"momentum\"] = new_momentum\n\n\n# ---------------------------------------------------------------\n# Main driver\n# ---------------------------------------------------------------\n\ndef main():\n    parser = argparse.ArgumentParser(\n        description=\"Run a single experiment variation (training + evaluation)\"\n    )\n    parser.add_argument(\n        \"--config\", type=str, required=True, help=\"Path to the run-specific YAML config file\"\n    )\n    parser.add_argument(\n        \"--run-id\", type=str, required=True, help=\"Unique identifier for this run (from YAML)\"\n    )\n    parser.add_argument(\n        \"--results-dir\", type=str, required=True, help=\"Directory where outputs are stored\"\n    )\n    parser.add_argument(\n        \"--smoke-test\", action=\"store_true\", help=\"Run a lightweight smoke test\"\n    )\n    args = parser.parse_args()\n\n    # Lazy import pyyaml to avoid unused dependency when train.py is imported elsewhere\n    import yaml\n\n    run_config: Dict[str, Any] = yaml.safe_load(Path(args.config).read_text())\n\n    results_dir = Path(args.results_dir)\n    results_dir.mkdir(parents=True, exist_ok=True)\n\n    set_seed(run_config.get(\"seed\", 42))\n\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n    # ---------------- Data ----------------\n    batch_size = run_config.get(\"batch_size\", 128 if not args.smoke_test else 16)\n    num_workers = run_config.get(\"num_workers\", 4)\n    randaugment_m = run_config.get(\"randaugment_m\", 9)\n    cutout_size = run_config.get(\"cutout_size\", 16)\n    train_loader, val_loader, test_loader, input_shape, num_classes = load_dataset(\n        name=run_config.get(\"dataset\", \"cifar10\"),\n        batch_size=batch_size,\n        num_workers=num_workers,\n        smoke_test=args.smoke_test,\n        randaugment_m=randaugment_m,\n        cutout_size=cutout_size,\n    )\n\n    # ---------------- Model --------------\n    model_name = run_config.get(\"model\", \"resnet20\")\n    model = get_model(model_name, input_shape, num_classes)\n    model.to(device)\n\n    # ---------------- Hyper-Params -------\n    lr = float(run_config.get(\"learning_rate\", 0.1))\n    weight_decay = float(run_config.get(\"weight_decay\", 5e-4))\n    momentum = float(run_config.get(\"momentum\", 0.9))\n    label_smoothing = float(run_config.get(\"label_smoothing\", 0.0))\n\n    hyperparams = build_hyperparam_tensors(\n        lr=lr, weight_decay=weight_decay, momentum=momentum, device=device\n    )\n\n    optimizer = optim.SGD(\n        model.parameters(), lr=lr, weight_decay=weight_decay, momentum=momentum\n    )\n    criterion = nn.CrossEntropyLoss(label_smoothing=label_smoothing)\n\n    # ---------------- Warm-Start ----------\n    if run_config.get(\"use_ohgw\", False):\n        eta_h = float(run_config.get(\"eta_h\", 1e-3))\n        steps = int(run_config.get(\"ohgw_steps\", 1))\n        for _ in range(steps):\n            apply_ohgw_step(model, hyperparams, train_loader, criterion, eta_h, device)\n        _update_optimizer_from_hypers(optimizer, hyperparams)\n\n    if run_config.get(\"use_random_warm\", False):\n        sigma = float(run_config.get(\"random_sigma\", 0.01))\n        apply_random_warm_step(hyperparams, sigma)\n        _update_optimizer_from_hypers(optimizer, hyperparams)\n\n    # --------------- Training Loop -------\n    epochs = int(run_config.get(\"epochs\", 200 if not args.smoke_test else 1))\n    history = []\n    best_val_acc = 0.0\n    start_time = time.time()\n    for epoch in range(1, epochs + 1):\n        train_metrics = train_one_epoch(\n            model, train_loader, criterion, optimizer, device, hyperparams\n        )\n        val_metrics = evaluate(model, val_loader, criterion, device, hyperparams)\n        best_val_acc = max(best_val_acc, val_metrics[\"val_acc\"])\n        epoch_metrics = {\n            \"epoch\": epoch,\n            **train_metrics,\n            **val_metrics,\n        }\n        history.append(epoch_metrics)\n        print(json.dumps({\"run_id\": args.run_id, **epoch_metrics}))\n\n    total_time = time.time() - start_time\n\n    # Final Test Evaluation\n    test_metrics = evaluate(model, test_loader, criterion, device, hyperparams)\n\n    # -------- Save Artifacts ----------\n    final_results = {\n        \"run_id\": args.run_id,\n        \"config\": run_config,\n        \"final_val_acc\": history[-1][\"val_acc\"],\n        \"best_val_acc\": best_val_acc,\n        \"test_acc\": test_metrics[\"val_acc\"],\n        \"epochs\": epochs,\n        \"total_time_sec\": total_time,\n        \"history\": history,\n    }\n\n    results_path = results_dir / \"results.json\"\n    with results_path.open(\"w\") as f:\n        json.dump(final_results, f, indent=2)\n\n    # Also print final summary so GitHub Actions can capture\n    print(\n        json.dumps(\n            {\n                \"run_id\": args.run_id,\n                \"status\": \"completed\",\n                \"best_val_acc\": best_val_acc,\n                \"test_acc\": test_metrics[\"val_acc\"],\n                \"total_time_sec\": total_time,\n            }\n        )\n    )\n\n\nif __name__ == \"__main__\":\n    main()\n"}


Compare the Base Code with the Derived Experiment Code for this specific experiment thoroughly. Ensure the derived code maintains all the quality, completeness, and functionality of the base code while properly replacing placeholders with specific implementations.
Output:
{
    "is_experiment_code_ready": true,
    "experiment_code_issue": ""
}
