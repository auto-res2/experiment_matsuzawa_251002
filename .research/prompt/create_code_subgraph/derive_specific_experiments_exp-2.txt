
Input:
You are a cutting-edge AI researcher generating complete, executable code for research paper experiments.

**Previous Step (Completed)**: Common base logic and evaluation framework have been generated with placeholders
**Current Task**: Generate production-ready code by completing all placeholders with actual implementations.

Your task is to take the common base foundation code and derive specific experimental variations by replacing ALL placeholders with complete, working implementations of datasets, models, and configurations specified in the experimental design. The resulting code must be immediately executable without any further modifications.

# Instructions: Experiment Specialization

## Core Task
- CONFIGURE ALL EXPERIMENTS: The primary task is to populate YAML file with a complete list of configurations for all run variations (baseline, proposed, ablations).
- REPLACE ALL PLACEHOLDERS: Replace all placeholders in the common base code with actual, complete implementations. No TODO, PLACEHOLDER, pass, or ... are allowed.
- IMPLEMENT MODELS: Implement all model architectures corresponding to the variations defined in the YAML file within `src/model.py`.
- COMPLETE DATA PIPELINE: Implement the specific data loading and preprocessing logic in `src/preprocess.py`.
- PRODUCTION READY: The generated code must be immediately executable for research paper experiments without any further modifications.

## Specialization Requirements
- Complete `config/full_experiment.yaml`: This file is the driver of the entire experiment. Define each run variation (['pasha-baseline', 'pasha-ohgw-vision-tuned-eta', 'pasha-ohgw-low-eta', 'pasha-ohgw-noisy-data']) as a separate item in the `runs` list, specifying its unique id, model name, and parameters.
- Complete `config/smoke_test.yaml`: Define lightweight versions of ALL run variations from full_experiment.yaml with reduced epochs/data to quickly validate pipeline integrity.
- Implement all required model architectures in `src/model.py`. The model names in the YAML must correspond to the model registry.
- Replace dataset placeholders with actual Hugging Face dataset loading and preprocessing
- Replace model placeholders with specific model architectures for each variation
- Ensure all external resources specified in the experimental design are properly integrated

## Complete Output Policy
- If a script/file has ANY changes: Output the COMPLETE, FULL script/file content
- If a script/file has NO changes needed: Output `[UNCHANGED]` placeholder only
- NEVER truncate or abbreviate changed content


# Experimental Environment
NVIDIA A100×8
VRAM：80GB×8
RAM：2048 GB

# Current Research Method
{
    "Open Problems": "Even the fastest gray–box and multi-fidelity HPO methods (ASHA, PASHA, DyHPO, BOIL) still waste computation on obviously bad configurations because every trial is treated as a black box; none of the information that is already available inside the training loop – most notably the stochastic hyper-gradient obtained at almost zero cost with automatic differentiation – is used to steer the search. The open problem is: how can we inject very cheap, noisy hyper-gradient signals into existing bandit-style schedulers without redesigning their core logic?",
    "Methods": "We propose ‘One-Shot Hyper-Gradient Warm-Starts’ (OHGW), a drop-in modification for any Successive-Halving style scheduler (Hyperband / ASHA / PASHA).  1. When a new configuration x is sampled it is run for only one **mini-batch** (≈10-2% of a normal epoch).  2. In this first forward / backward pass we keep the compute graph and call automatic differentiation once more to obtain a single stochastic hyper-gradient ∂L/∂ψ for every continuous hyperparameter ψ (learning-rate, weight-decay, momentum …) exactly as in implicit hyper-gradient papers, but **without unrolling** (cost <1.2× normal mini-batch).  3. We apply one hyper-parameter update ψ←ψ−η_h ∂L/∂ψ (η_h is a fixed tiny step such as 10-3).  4. The adjusted configuration x′ – which differs from x by at most one gradient step in each hyper-parameter – is what the scheduler subsequently evaluates for its first rung (e.g. 1 epoch).  5. Everything else (promotion rules, budget doubling, stopping) is untouched.  In effect the scheduler still explores the same region, but every candidate is lightly nudged towards a valley before costly training starts.",
    "Experimental Setup": "Benchmark: CIFAR-10 with ResNet-20 and 5-dim continuous search space {log-lr, log-wd, momentum, augment-magnitude, label-smoothing}.  Scheduler baselines: ASHA, PASHA, DyHPO (their public implementations).  Our variants: ASHA+OHGW, PASHA+OHGW, DyHPO+OHGW (one-line wrapper around trial creation).  Mini-batch for warm-start: 128 images.  Hyper-gradient lr η_h=1e-3, computed with PyTorch autograd; no higher-order terms.  Each method is given the same overall GPU budget (4×V100 for 12 hours) and 50 seeds.  Metrics: (i) best test accuracy reached vs. wall-clock, (ii) total GPU hours until 93% accuracy, (iii) distribution of final hyper-parameters to check bias.",
    "Experimental Code": "# pseudo-code\nfor cfg in scheduler.sample():\n    model = build_model(cfg)\n    data = next(train_loader)            # one mini-batch\n    loss  = forward_loss(model, data)\n    grads = torch.autograd.grad(loss, cfg.continuous_params())\n    with torch.no_grad():               # one hyper step\n        for p,g in zip(cfg.continuous_params(), grads):\n            p -= eta_h * g\n    scheduler.launch(cfg)               # continue as usual",
    "Expected Result": "Across all schedules OHGW cuts the median time-to-93%-accuracy by ≈20% (ASHA 11.2→9.0 h, PASHA 7.3→5.8 h, DyHPO 6.1→4.9 h) while keeping the same final accuracy. The added warm-start costs <3% extra compute. Hyper-parameter distributions remain similar, showing no harmful bias.",
    "Expected Conclusion": "A single stochastic hyper-gradient step collected before the first rung is enough to noticeably reduce wasted resources in bandit-style HPO. Because OHGW requires only two extra autograd calls and no change to the scheduler logic, it can be retro-fitted to almost any existing gray-box optimizer, offering an attractive efficiency boost with negligible engineering effort."
}

# Experimental Design
- Strategy: Overall Experimental Strategy for Validating One-Shot Hyper-Gradient Warm-Starts (OHGW)

1. Core Hypotheses to Validate
   a. Efficiency: OHGW reduces wall-clock time and GPU hours needed by bandit-style schedulers to reach a preset performance threshold.
   b. Performance Preservation: OHGW does not hurt (and ideally preserves or slightly improves) the best final metric attainable by the underlying scheduler.
   c. Robustness & Variance: OHGW’s benefit is consistent across random seeds, search-space dimensionalities, data sets, model families and scheduler types.
   d. Generalization: The same one-line wrapper applies without retuning to tasks beyond image classification (e.g. language modelling, tabular, RL) and to both small- and large-scale training loops.
   e. Cost Overhead: Extra compute, memory and engineering overhead introduced by OHGW remain negligible (<5 % GPU-hours, <10 % peak-memory, ≤20 LoC integration).

2. Experiment Families (all experiments draw from one common pool of settings below)
   • Task Breadth: vision (CIFAR-10/100, ImageNet-1k), NLP (WikiText-103), tabular (UCI suite), RL (Atari).
   • Model Breadth: ResNet family, ViT, Transformer-LM, XGBoost, PPO-CNN.
   • Scheduler Breadth: ASHA, PASHA, DyHPO, Hyperband-BO, BOIL (if open-sourced).
   • Search-Space Breadth: 3–10 continuous hyper-parameters; mixed discrete+continuous cases to show neutrality to inapplicable params.
   • Scale Breadth: single-GPU up to 64-GPU distributed training (multi-node pools or simulated via concurrency on the 8×A100 machine).

3. Comparison Axes for Every Experiment
   • Baseline Scheduler (vanilla).
   • Baseline + Random Warm-Start in ∆ψ range (controls for mere perturbation).
   • Baseline + Multiple Hyper-Gradient Steps (ablation to check diminishing returns).
   • Scheduler-specific SoTA gradient-aware HPO if available (e.g. DyHPO, BOIL) to position OHGW competitively.

4. Metrics & Evaluation Protocol
   Primary quantitative metrics (reported as median ±IQR over ≥30 seeds):
      – T@τ: Wall-clock/GPU-hour to reach target score τ (task-specific; chosen so that vanilla reaches it within budget).
      – Best final validation/test score after fixed budget.
      – Compute Overhead: (Σ warm-start flop) ⁄ (total flop) and peak VRAM.
   Secondary diagnostics:
      – AUC of best-score-vs-time curve (overall sample efficiency).
      – Seed-wise variance of T@τ and final score.
      – Hyper-parameter trajectory statistics (mean shift & KL-divergence of posterior over ψ).
   Qualitative/visual:
      – Survival plots of promoted configurations per rung.
      – Heatmaps of hyper-gradient magnitude vs. eventual benefit.
   Statistical test: two-sided Wilcoxon signed-rank (α=0.05) on paired seeds.

5. Success Criteria (must hold in ≥75 % of experiment tuples)
   • ≥15 % median reduction in T@τ with p<0.05.
   • ≤0.2 % relative drop (or improvement) in best final score.
   • ≤5 % extra GPU-hours and ≤10 % extra peak VRAM.
   • Std-dev(T@τ) not inflated by more than 10 %.

6. Multi-Perspective Validation Plan
   • Efficiency: Use identical global budgets and identical seed lists; plot temporal efficiency curves and compute aggregated speed-up ratios.
   • Performance Preservation: Report final accuracy/F1/return and confidence intervals.
   • Robustness: Repeat each experiment block with different batch sizes, η_h values (10⁻⁴…10⁻²) and noisy labels; perform sensitivity analysis.
   • Generalization: Run a “zero-tuning transfer” study—apply the CIFAR-tuned η_h to NLP, RL and tabular tasks unchanged.
   • Ablations & Controls: Random perturbation, multistep hyper-gradient, frozen discrete params, partial gradient masking.
   • Scalability: Micro-benchmark warm-start time and memory for 1, 8, 64 GPUs using synthetic workloads.

7. Experimental Logistics
   • Central harness (Hydra + PyTorch Lightning) to register all trials, guarantee identical I/O pipelines and logging format (wandb/MLflow).
   • Dedicate 4×A100 per independent replicate to avoid resource contention; schedule via Slurm with cgroup accounting to record accurate GPU-hour usage.
   • Automated post-processing notebook generates unified tables, statistical tests and publication-ready plots.

8. Risk Mitigation & Contingency
   • If hyper-gradient extraction fails for exotic layers, fall back to finite-difference on ψ only (flag run but keep in aggregated stats).
   • If OHGW underperforms on discrete-heavy spaces, isolate continuous subset and document limitation.

This unified strategy guarantees that every forthcoming experiment—regardless of domain—collects commensurate evidence on efficiency, performance, robustness, generality and overhead, enabling a cohesive, multi-angle validation of OHGW’s claimed benefits.

# Current Experiment (to generate code for)
- Experiment ID: exp-2
- Description: Objective / Hypothesis: Test zero-shot generalisation and robustness of OHGW in a different modality (language modelling) and under distribution shift.

Domain & Task: NLP – word-level language modelling on WikiText-103, with an additional OOD evaluation on WikiText-103-v1 (headlines first 5% shuffled – simulates domain drift).

Model: GPT2-small (124 M params, HuggingFace implementation) trained from scratch with BPE vocab 50 k.

Scheduler: PASHA (2023) – gradient-aware variation of Hyperband; ours wraps PASHA in the same way.

Search space (6 dims): log10-learning-rate, log10-weight-decay, attention-dropout, residual-dropout, label-smoothing, warmup-steps (continuous proxy by scaling factor).

Run variations:
• pasha-baseline – vanilla PASHA.
• pasha-ohgw-vision-tuned-eta – OHGW with η_h=1e-3 exactly copied from CIFAR experiment (tests transfer without retuning).
• pasha-ohgw-low-eta – OHGW with η_h=3e-4 (sensitivity extremum).
• pasha-ohgw-noisy-data – OHGW with η_h=1e-3 while 15% of training tokens are randomly replaced (robustness to noise).

Dataset processing: SentencePiece BPE (shared).  Sequence length 1024 tokens; dynamic batching up to 2M tokens/GPU.  Train/val/test split 238M / 8M / 8M tokens.  For OOD, evaluate perplexity on shuffled-headline subset (unseen ordering).

Training loop & budget: 50 training epochs (~250 k updates), AdamW, cosine LR.  PASHA minimum resource per config = 2 epochs, rungs ×2.  Total compute budget per replicate 16 GPU×hours (8 GPUs ×2 h).  24 replicates.

Evaluation metrics:
Primary – T@ppl=30 on validation set (wall-clock & GPU-h).
Secondary – best validation perplexity, best OOD perplexity, FLOPs overhead, peak VRAM, std-dev across seeds.
Calibration metric – ECE (expected calibration error) on top-k probabilities (k=10).

Data splitting: Configs use 90/10 split of train for inner-val to avoid test leakage; final report on held-out test.

Hyper-parameter analysis: log sweep of η_h done offline on 5 seeds; fit cubic spline to measure optimal region width (reports in appendix).

Robustness procedures:
1. Data noise: see pasha-ohgw-noisy-data.
2. Distribution shift: compute perplexity on OOD set after every rung, record Δppl.
3. Adversarial tokens: evaluate final models with TextFooler adversarial examples on 5 k sentences, report degradation.

Compute profiling: same toolkit as exp-1; additionally use PyTorch-CUDA-Profiler for kernel-level warm-start cost.

Example trial wrapper:
```python
loss = lm_model(input_ids, labels=input_ids).loss
hg = torch.autograd.grad(loss, cfg.continuous())
with torch.no_grad():
    for p,g in zip(cfg.continuous(), hg):
        p -= eta_h * g    # no extra unroll
pasha_scheduler.launch(cfg)
```

Statistical testing: Paired Wilcoxon on T@30 with Bonferroni correction (m=3 comparisons).  Significance if p<0.016.

Success criteria: vision-tuned η_h version achieves ≥15% speed-up vs. baseline on T@30 with ≤0.5 ppl regression on final test; effect still ≥10% under noisy data.  Extra compute overhead ≤5% of total FLOPs.
- Run Variations: ['pasha-baseline', 'pasha-ohgw-vision-tuned-eta', 'pasha-ohgw-low-eta', 'pasha-ohgw-noisy-data']

# Base Code
{'train_py': '"""src/train.py\nCore training logic for a single experiment variation.\nThis script is NOT dataset- or model-specific; any such specifics are\nsupplied via the YAML run-config that main.py passes in.\nIt implements the One-Shot Hyper-Gradient Warm-Start (OHGW) procedure\nonce at the beginning of training, then proceeds with standard epochs.\nResults, logs and figures for this single run are written into the\n<results_dir>/<run_id>/ sub-folder (created if necessary).\n"""\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport os\nimport time\nfrom pathlib import Path\nfrom typing import Dict, List, Tuple\n\nimport torch\nfrom torch import nn\nfrom torch.utils.data import DataLoader\n\n# Local imports – all generic / placeholder-aware\nfrom .preprocess import get_dataloaders  # noqa: E402\nfrom .model import build_model  # noqa: E402\n\n\ndef parse_args():\n    parser = argparse.ArgumentParser(description="Run a single OHGW experiment variation")\n    parser.add_argument("--run-config", type=str, required=True, help="Path to YAML file describing ONE experiment variation.")\n    parser.add_argument("--results-dir", type=str, required=True, help="Root directory where all results are stored")\n    return parser.parse_args()\n\n\n# ---------------------------------------------------------------------------\n# Hyper-parameter container\n# ---------------------------------------------------------------------------\n\nclass HyperParameters(nn.Module):\n    """Wraps continuous hyper-parameters as torch.Parameters so that\n    autograd can compute dL/dψ. A config field `hyperparams` must be\n    provided in the run-config YAML.\n    """\n\n    def __init__(self, cfg: Dict):\n        super().__init__()\n        hcfg: Dict = cfg["hyperparams"]\n        # Every hyper-param becomes a learnable scalar ‑- additional ones can be\n        # plugged in freely by later experiment variants.\n        self.log_lr = nn.Parameter(torch.tensor(float(hcfg.get("log_lr", -1.0))))\n        self.log_wd = nn.Parameter(torch.tensor(float(hcfg.get("log_wd", -4.0))))\n        # momentum can be negative for centred updates → use tanh to keep |m|<1\n        self.raw_momentum = nn.Parameter(torch.tensor(float(hcfg.get("momentum", 0.9)).atanh()))\n\n    # Convenient accessors ----------------------------------------------------\n    @property\n    def lr(self) -> float:\n        return float(10.0 ** self.log_lr.detach())\n\n    @property\n    def weight_decay(self) -> float:\n        return float(10.0 ** self.log_wd.detach())\n\n    @property\n    def momentum(self) -> float:\n        return float(self.raw_momentum.tanh().detach())\n\n    def as_dict(self):\n        return {\n            "log_lr": self.log_lr.detach().cpu().item(),\n            "log_wd": self.log_wd.detach().cpu().item(),\n            "momentum": self.momentum,\n        }\n\n\n# ---------------------------------------------------------------------------\n# Utility helpers\n# ---------------------------------------------------------------------------\n\ndef compute_loss(model: nn.Module, criterion: nn.Module, x: torch.Tensor, y: torch.Tensor, hp: HyperParameters) -> torch.Tensor:\n    """Loss = classification_loss + weight-decay that depends on hp.log_wd."""\n    logits = model(x)\n    loss = criterion(logits, y)\n    if hp.log_wd.requires_grad:\n        wd_coeff = torch.exp(hp.log_wd)\n        wd = torch.zeros([], device=logits.device)\n        for p in model.parameters():\n            wd = wd + (p ** 2).sum()\n        loss = loss + wd_coeff * wd\n    return loss\n\n\ndef evaluate(model: nn.Module, loader: DataLoader, criterion: nn.Module, hp: HyperParameters, device: torch.device) -> Tuple[float, float]:\n    """Returns (average loss, accuracy)"""\n    model.eval()\n    total_loss = 0.0\n    correct = 0\n    n = 0\n    with torch.no_grad():\n        for xb, yb in loader:\n            xb, yb = xb.to(device), yb.to(device)\n            loss = compute_loss(model, criterion, xb, yb, hp)\n            total_loss += loss.item() * xb.size(0)\n            logits = model(xb)\n            pred = logits.argmax(dim=1)\n            correct += (pred == yb).sum().item()\n            n += xb.size(0)\n    avg_loss = total_loss / max(1, n)\n    acc = correct / max(1, n)\n    return avg_loss, acc\n\n\n# ---------------------------------------------------------------------------\n# Main training routine\n# ---------------------------------------------------------------------------\n\ndef train(cfg: Dict, results_dir: Path):\n    run_id: str = cfg["run_id"]\n    torch.manual_seed(int(cfg.get("seed", 0)))\n\n    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")\n\n    # ---------------------------------------------------------------------\n    # Build model & data loaders (generic – specifics pluggable later)\n    # ---------------------------------------------------------------------\n    model = build_model(cfg).to(device)\n    train_loader, val_loader = get_dataloaders(cfg)\n\n    # Hyper-parameters (as trainable tensors to obtain hyper-gradient)\n    hp = HyperParameters(cfg).to(device)\n\n    criterion = nn.CrossEntropyLoss()\n\n    # ---------------------------------------------------------------------\n    # One-Shot Hyper-Gradient Warm-Start (OHGW)\n    # ---------------------------------------------------------------------\n    warm_inputs, warm_targets = next(iter(train_loader))\n    warm_inputs, warm_targets = warm_inputs.to(device), warm_targets.to(device)\n\n    loss_warm = compute_loss(model, criterion, warm_inputs, warm_targets, hp)\n    grads = torch.autograd.grad(loss_warm, list(hp.parameters()), create_graph=False)\n\n    eta_h: float = float(cfg.get("eta_h", 1e-3))\n    with torch.no_grad():\n        for p, g in zip(hp.parameters(), grads):\n            p -= eta_h * g  # one hyper-step\n\n    # ---------------------------------------------------------------------\n    # Optimiser INITIALISED *after* warm-start so that new hp values apply.\n    # ---------------------------------------------------------------------\n    optimiser = torch.optim.SGD(\n        model.parameters(),\n        lr=hp.lr,\n        momentum=hp.momentum,\n        weight_decay=hp.weight_decay,\n    )\n\n    # ---------------------------------------------------------------------\n    # Training loop (standard supervised classification)\n    # ---------------------------------------------------------------------\n    n_epochs = int(cfg.get("epochs", 10))\n    train_loss_hist: List[float] = []\n    val_loss_hist: List[float] = []\n    val_acc_hist: List[float] = []\n\n    start_time = time.time()\n    time_to_target: float | None = None\n\n    target_metric = cfg.get("target_metric")  # e.g. 0.93 accuracy\n\n    for epoch in range(n_epochs):\n        model.train()\n        epoch_loss = 0.0\n        n_train = 0\n        for xb, yb in train_loader:\n            xb, yb = xb.to(device), yb.to(device)\n            optimiser.zero_grad(set_to_none=True)\n            loss = compute_loss(model, criterion, xb, yb, hp)\n            loss.backward()\n            optimiser.step()\n            epoch_loss += loss.item() * xb.size(0)\n            n_train += xb.size(0)\n        avg_train_loss = epoch_loss / max(1, n_train)\n\n        val_loss, val_acc = evaluate(model, val_loader, criterion, hp, device)\n\n        train_loss_hist.append(avg_train_loss)\n        val_loss_hist.append(val_loss)\n        val_acc_hist.append(val_acc)\n\n        # Trigger wall-clock target metric timer\n        if target_metric is not None and time_to_target is None and val_acc >= target_metric:\n            time_to_target = time.time() - start_time\n\n        print(json.dumps({\n            "run_id": run_id,\n            "event": "epoch_end",\n            "epoch": epoch + 1,\n            "train_loss": avg_train_loss,\n            "val_loss": val_loss,\n            "val_accuracy": val_acc,\n        }))\n\n    total_time = time.time() - start_time\n\n    # ---------------------------------------------------------------------\n    # Persist results ------------------------------------------------------\n    # ---------------------------------------------------------------------\n    run_dir = results_dir / run_id\n    run_dir.mkdir(parents=True, exist_ok=True)\n\n    # Save model weights – may be useful for downstream analyses ----------\n    torch.save({\n        "model_state_dict": model.state_dict(),\n        "hyperparams": hp.as_dict(),\n    }, run_dir / "checkpoint.pt")\n\n    # Prepare metrics dict -------------------------------------------------\n    results = {\n        "run_id": run_id,\n        "hyperparameters": hp.as_dict(),\n        "train_loss_history": train_loss_hist,\n        "val_loss_history": val_loss_hist,\n        "val_accuracy_history": val_acc_hist,\n        "best_val_accuracy": max(val_acc_hist) if val_acc_hist else None,\n        "training_time_sec": total_time,\n        "time_to_target_sec": time_to_target,\n    }\n\n    with open(run_dir / "results.json", "w") as f:\n        json.dump(results, f, indent=2)\n\n    # Human-readable summary printed to stdout ----------------------------\n    summary_str = (\n        f"\\n=== Experiment Summary [{run_id}] ===\\n"\n        f"Best Val Acc: {results[\'best_val_accuracy\']:.4f}\\n"\n        f"Total time     : {total_time/60:.2f} min\\n"\n        f"Time→target(≥{target_metric}): {time_to_target if time_to_target is not None else \'N/A\'} sec\\n"\n        f"======================================\\n"\n    )\n    print(summary_str)\n\n\n# ---------------------------------------------------------------------------\n# Entry-point\n# ---------------------------------------------------------------------------\n\nif __name__ == "__main__":\n    args = parse_args()\n\n    import yaml  # local import to avoid dependency during module import\n\n    with open(args.run_config, "r") as fh:\n        cfg = yaml.safe_load(fh)\n\n    results_root = Path(args.results_dir).resolve()\n    train(cfg, results_root)\n', 'evaluate_py': '"""src/evaluate.py\nAggregates results of all experiment variations, computes comparison\nstatistics and generates publication-quality figures in .pdf format.\nFigures are stored in <results_dir>/figures/ and also listed in the\nstdout JSON summary for easy discovery.\n"""\nfrom __future__ import annotations\n\nimport json\nimport sys\nfrom pathlib import Path\nfrom typing import Dict, List\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\nFIG_KWARGS = dict(bbox_inches="tight")\n\n\ndef load_all_results(results_dir: Path) -> List[Dict]:\n    results: List[Dict] = []\n    for res_file in results_dir.rglob("results.json"):\n        with open(res_file) as f:\n            results.append(json.load(f))\n    if not results:\n        raise RuntimeError(f"No results.json files found under {results_dir}")\n    return results\n\n\ndef figure_training_loss(all_results: List[Dict], save_dir: Path):\n    plt.figure(figsize=(6, 4))\n    for res in all_results:\n        plt.plot(res["train_loss_history"], label=res["run_id"])\n        # Annotate final value\n        plt.annotate(f"{res[\'train_loss_history\'][-1]:.3f}",\n                     xy=(len(res[\'train_loss_history\']) - 1, res[\'train_loss_history\'][-1]),\n                     textcoords="offset points", xytext=(0, 5))\n    plt.xlabel("Epoch")\n    plt.ylabel("Training Loss")\n    plt.title("Training Loss Curves")\n    plt.legend()\n    fname = save_dir / "training_loss.pdf"\n    plt.savefig(fname, **FIG_KWARGS)\n    plt.close()\n    return str(fname.name)\n\n\ndef figure_accuracy(all_results: List[Dict], save_dir: Path):\n    plt.figure(figsize=(6, 4))\n    for res in all_results:\n        if not res["val_accuracy_history"]:\n            continue\n        plt.plot(res["val_accuracy_history"], label=res["run_id"])\n        plt.annotate(f"{res[\'val_accuracy_history\'][-1]:.3f}",\n                     xy=(len(res[\'val_accuracy_history\']) - 1, res[\'val_accuracy_history\'][-1]),\n                     textcoords="offset points", xytext=(0, 5))\n    plt.xlabel("Epoch")\n    plt.ylabel("Validation Accuracy")\n    plt.title("Validation Accuracy Curves")\n    plt.legend()\n    fname = save_dir / "accuracy.pdf"\n    plt.savefig(fname, **FIG_KWARGS)\n    plt.close()\n    return str(fname.name)\n\n\ndef bar_best_accuracy(all_results: List[Dict], save_dir: Path):\n    accs = {r["run_id"]: r["best_val_accuracy"] for r in all_results if r["best_val_accuracy"] is not None}\n    if not accs:\n        return None\n    plt.figure(figsize=(6, 4))\n    names = list(accs.keys())\n    vals = [accs[n] for n in names]\n    sns.barplot(x=names, y=vals)\n    for i, v in enumerate(vals):\n        plt.text(i, v + 0.01, f"{v:.3f}", ha="center")\n    plt.ylabel("Best Validation Accuracy")\n    plt.title("Comparison of Best Accuracies")\n    fname = save_dir / "best_val_accuracy.pdf"\n    plt.savefig(fname, **FIG_KWARGS)\n    plt.close()\n    return str(fname.name)\n\n\ndef evaluate(results_dir: Path):\n    print("\\n===== Aggregating experiment results =====\\n")\n    all_results = load_all_results(results_dir)\n\n    figures_dir = results_dir / "figures"\n    figures_dir.mkdir(exist_ok=True, parents=True)\n\n    figure_files: List[str] = []\n    figure_files.append(figure_training_loss(all_results, figures_dir))\n    fig_acc = figure_accuracy(all_results, figures_dir)\n    if fig_acc:\n        figure_files.append(fig_acc)\n    fig_bar = bar_best_accuracy(all_results, figures_dir)\n    if fig_bar:\n        figure_files.append(fig_bar)\n\n    # ------------------------------------------------------------------\n    # Consolidated comparison table for stdout -------------------------\n    # ------------------------------------------------------------------\n    df_rows = []\n    for r in all_results:\n        df_rows.append({\n            "run_id": r["run_id"],\n            "best_val_accuracy": r["best_val_accuracy"],\n            "training_time_sec": r["training_time_sec"],\n            "time_to_target_sec": r["time_to_target_sec"],\n        })\n    df = pd.DataFrame(df_rows)\n\n    comparison = df.to_dict(orient="records")\n    summary = {\n        "description": "Comparison of OHGW experiment variations",\n        "num_runs": len(all_results),\n        "figures": figure_files,\n        "table": comparison,\n    }\n    print(json.dumps(summary, indent=2))\n\n\n# ---------------------------------------------------------------------------\n# Entry-point\n# ---------------------------------------------------------------------------\nif __name__ == "__main__":\n    import argparse\n\n    p = argparse.ArgumentParser()\n    p.add_argument("--results-dir", type=str, required=True)\n    args = p.parse_args()\n\n    evaluate(Path(args.results_dir).resolve())\n', 'preprocess_py': '"""src/preprocess.py\nGeneric data loading & preprocessing utilities.\nDataset-specific logic is strictly *placeholder* so that later steps can\ninject true loaders. For smoke-tests we fall back to a tiny deterministic\nrandom dataset to keep the pipeline executable.\n"""\nfrom __future__ import annotations\n\nfrom typing import List, Tuple\n\nimport torch\nfrom torch.utils.data import DataLoader, Dataset\n\n\nclass RandomTensorDataset(Dataset):\n    """A deterministic pseudo-random dataset for smoke-testing the pipeline."""\n\n    def __init__(self, length: int, input_shape: List[int], num_classes: int):\n        super().__init__()\n        self.length = length\n        generator = torch.Generator().manual_seed(42)\n        self.data = torch.randn(length, *input_shape, generator=generator)\n        self.targets = torch.randint(0, num_classes, (length,), generator=generator)\n\n    def __len__(self):\n        return self.length\n\n    def __getitem__(self, idx):\n        return self.data[idx], self.targets[idx]\n\n\n# ---------------------------------------------------------------------------\n# Public API\n# ---------------------------------------------------------------------------\n\ndef get_dataloaders(cfg) -> Tuple[DataLoader, DataLoader]:\n    """Return train & validation DataLoaders based on the run-config.\n\n    Placeholders:\n      • If `dataset_name` is \'DATASET_PLACEHOLDER\' or \'dummy\', a random\n        dataset will be returned (useful for smoke tests).\n      • Otherwise this function *must* be extended in later experiment\n        specialisations to load the actual dataset.\n    """\n    dataset_name = cfg.get("dataset_name", "DATASET_PLACEHOLDER")\n    batch_size = int(cfg.get("batch_size", 64))\n    num_workers = int(cfg.get("num_workers", 2))\n\n    if dataset_name in {"dummy", "DATASET_PLACEHOLDER"}:\n        input_shape = cfg.get("input_shape", [1, 28, 28])\n        num_classes = int(cfg.get("num_classes", 10))\n        length = int(cfg.get("dummy_length", 1024))\n        train_ds = RandomTensorDataset(length, input_shape, num_classes)\n        val_ds = RandomTensorDataset(length // 4, input_shape, num_classes)\n        train_loader = DataLoader(train_ds, batch_size=batch_size, shuffle=True, num_workers=num_workers)\n        val_loader = DataLoader(val_ds, batch_size=batch_size, shuffle=False, num_workers=num_workers)\n        return train_loader, val_loader\n\n    # ------------------------------------------------------------------\n    # PLACEHOLDER: Real dataset loading must be implemented here.\n    # ------------------------------------------------------------------\n    raise NotImplementedError(\n        "PLACEHOLDER: Replace get_dataloaders with dataset-specific logic for "\n        f"dataset_name=\'{dataset_name}\'.")\n', 'model_py': '"""src/model.py\nModel-building utilities with clear placeholders for later injection of\nreal architectures. For smoke tests we supply a minimal *DummyModel* so\nthat the pipeline runs end-to-end without editing.\n"""\nfrom __future__ import annotations\n\nfrom typing import List\n\nimport torch\nfrom torch import nn\n\n\nclass DummyModel(nn.Module):\n    """A tiny MLP suitable only for smoke tests. Not task-specific."""\n\n    def __init__(self, input_shape: List[int], num_classes: int):\n        super().__init__()\n        c, h, w = input_shape\n        flat_dim = c * h * w\n        self.net = nn.Sequential(\n            nn.Flatten(),\n            nn.Linear(flat_dim, 128),\n            nn.ReLU(inplace=True),\n            nn.Linear(128, num_classes),\n        )\n\n    def forward(self, x):  # noqa: D401,E501  (simple forward pass)\n        return self.net(x)\n\n\n# ---------------------------------------------------------------------------\n# Public factory function\n# ---------------------------------------------------------------------------\n\ndef build_model(cfg):\n    """Return a torch.nn.Module according to `model_name` in cfg.\n\n    Placeholders:\n      • \'MODEL_PLACEHOLDER\' or \'dummy\' → returns DummyModel\n      • otherwise: must be implemented later.\n    """\n    model_name = cfg.get("model_name", "MODEL_PLACEHOLDER")\n    if model_name in {"dummy", "MODEL_PLACEHOLDER"}:\n        input_shape = cfg.get("input_shape", [1, 28, 28])\n        num_classes = int(cfg.get("num_classes", 10))\n        return DummyModel(input_shape, num_classes)\n\n    # ------------------------------------------------------------------\n    # PLACEHOLDER: Real model architectures must be injected here.\n    # ------------------------------------------------------------------\n    raise NotImplementedError(\n        f"PLACEHOLDER: Unknown model_name=\'{model_name}\'. Provide implementation in build_model().")\n', 'main_py': '"""src/main.py\nCentral experiment orchestrator. Reads the YAML configuration file that\nlists *all* run variations, schedules them on the available GPUs (one GPU\nper subprocess), manages logging tee-ing, and finally invokes evaluate.py\nonce all runs have finished.\n"""\nfrom __future__ import annotations\n\nimport argparse\nimport os\nimport queue\nimport subprocess\nimport sys\nimport threading\nimport time\nfrom pathlib import Path\nfrom typing import Dict, List\n\nimport yaml\nimport torch\n\nROOT_DIR = Path(__file__).resolve().parent.parent\nSRC_DIR = ROOT_DIR / "src"\n\n\n# ---------------------------------------------------------------------------\n# Helper: live tee of subprocess output to both file and main stdout ------\n# ---------------------------------------------------------------------------\n\ndef _reader_thread(pipe, tee_file):\n    with pipe:\n        for line in iter(pipe.readline, b""):\n            decoded = line.decode()\n            tee_file.write(decoded)\n            tee_file.flush()\n            sys.stdout.write(decoded)\n            sys.stdout.flush()\n\n\ndef launch_subprocess(cmd: List[str], env: Dict[str, str], stdout_path: Path, stderr_path: Path) -> subprocess.Popen:\n    stdout_f = open(stdout_path, "w")\n    stderr_f = open(stderr_path, "w")\n\n    # Merge stderr into its own pipe for tee-ing\n    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)\n\n    threading.Thread(target=_reader_thread, args=(proc.stdout, stdout_f), daemon=True).start()\n    threading.Thread(target=_reader_thread, args=(proc.stderr, stderr_f), daemon=True).start()\n    return proc\n\n\n# ---------------------------------------------------------------------------\n# Scheduler that ensures ≤ num_gpus concurrent processes ---------------\n# ---------------------------------------------------------------------------\n\ndef run_all_experiments(config_path: Path, results_dir: Path):\n    with open(config_path, "r") as fh:\n        cfg_root = yaml.safe_load(fh)\n\n    experiments: List[Dict] = cfg_root["experiments"]\n    if not experiments:\n        raise ValueError("No experiments found in config file")\n\n    n_available_gpus = torch.cuda.device_count()\n    if n_available_gpus == 0:\n        print("WARNING: No GPUs detected – running on CPU.")\n        n_available_gpus = 1  # schedule serially on CPU\n\n    print(f"Detected {n_available_gpus} GPUs → launching up to {n_available_gpus} concurrent runs.")\n\n    # Queue of pending experiments -------------------------------------\n    exp_queue = queue.Queue()\n    for exp in experiments:\n        exp_queue.put(exp)\n\n    active: Dict[int, subprocess.Popen] = {}\n    gpu_ids = list(range(n_available_gpus))\n\n    while not exp_queue.empty() or active:\n        # Launch new processes if GPU free\n        while gpu_ids and not exp_queue.empty():\n            gpu_id = gpu_ids.pop(0)\n            exp_cfg = exp_queue.get()\n            run_id = exp_cfg["run_id"]\n\n            run_dir = results_dir / run_id\n            run_dir.mkdir(parents=True, exist_ok=True)\n\n            # Write run-specific YAML config so train.py can read it.\n            run_cfg_path = run_dir / "run_config.yaml"\n            with open(run_cfg_path, "w") as fh:\n                yaml.safe_dump(exp_cfg, fh)\n\n            stdout_path = run_dir / "stdout.log"\n            stderr_path = run_dir / "stderr.log"\n\n            cmd = [\n                sys.executable,\n                "-m",\n                "src.train",\n                "--run-config",\n                str(run_cfg_path),\n                "--results-dir",\n                str(results_dir),\n            ]\n\n            env = os.environ.copy()\n            env["CUDA_VISIBLE_DEVICES"] = str(gpu_id)\n\n            print(f"[MAIN] Launching run_id={run_id} on GPU {gpu_id} …")\n            proc = launch_subprocess(cmd, env, stdout_path, stderr_path)\n            active[gpu_id] = proc\n\n        # Poll active processes ---------------------------------------\n        finished_gpus = []\n        for gid, proc in active.items():\n            ret = proc.poll()\n            if ret is not None:  # finished\n                if ret != 0:\n                    print(f"[MAIN] WARNING: run on GPU {gid} exited with code {ret}")\n                finished_gpus.append(gid)\n        for gid in finished_gpus:\n            active.pop(gid)\n            gpu_ids.append(gid)  # free GPU\n        time.sleep(1)\n\n    # All done → evaluation ---------------------------------------------\n    print("\\nAll runs finished – launching evaluation …\\n")\n    subprocess.run([\n        sys.executable,\n        "-m",\n        "src.evaluate",\n        "--results-dir",\n        str(results_dir),\n    ], check=True)\n\n\n# ---------------------------------------------------------------------------\n# CLI entry-point -----------------------------------------------------------\n# ---------------------------------------------------------------------------\nif __name__ == "__main__":\n    parser = argparse.ArgumentParser(description="OHGW Experiments Orchestrator")\n    group = parser.add_mutually_exclusive_group(required=True)\n    group.add_argument("--smoke-test", action="store_true", help="Run the smoke-test configuration")\n    group.add_argument("--full-experiment", action="store_true", help="Run the full experiment configuration")\n    parser.add_argument("--results-dir", type=str, required=True, help="Where to store outputs, logs, figures …")\n    args = parser.parse_args()\n\n    if args.smoke_test:\n        config_file = ROOT_DIR / "config" / "smoke_test.yaml"\n    else:\n        config_file = ROOT_DIR / "config" / "full_experiment.yaml"\n\n    run_all_experiments(config_file, Path(args.results_dir).resolve())\n', 'pyproject_toml': '[project]\nname = "ohgw_experiments"\nversion = "0.1.0"\ndescription = "Common core foundation for OHGW experimental framework"\nauthors = [\n  { name = "AI Research Assistant" }\n]\nreadme = "README.md"\nrequires-python = ">=3.9"\n\n[project.dependencies]\ntorch = "*"\npyyaml = "*"\nmatplotlib = "*"\nseaborn = "*"\npandas = "*"\n\n[build-system]\nrequires = ["setuptools", "wheel"]\nbuild-backend = "setuptools.build_meta"', 'smoke_test_yaml': '# config/smoke_test.yaml\n# A *fully runnable* configuration that uses dummy dataset/model so that\n# the GitHub Actions smoke test does not require heavy compute or data.\n\nexperiments:\n  - run_id: smoke_dummy\n    dataset_name: dummy                # uses RandomTensorDataset\n    model_name: dummy                  # uses DummyModel (tiny MLP)\n    input_shape: [1, 28, 28]           # channels, height, width\n    num_classes: 10\n    batch_size: 32\n    epochs: 2\n    seed: 0\n    target_metric: 0.5                 # arbitrary for dummy data\n    eta_h: 0.001\n    hyperparams:\n      log_lr: -1.0                     # → 0.1\n      log_wd: -4.0                     # → 1e-4\n      momentum: 0.9', 'full_experiment_yaml': '# config/full_experiment.yaml\n# ONLY placeholders are provided here. Real experiments will be injected\n# in the subsequent derivation step. The structure is fixed so that\n# main.py can already validate the schema.\n\nexperiments:\n  - run_id: EXPERIMENT_VARIATION_1\n    dataset_name: DATASET_PLACEHOLDER          # PLACEHOLDER: e.g. cifar10\n    model_name: MODEL_PLACEHOLDER              # PLACEHOLDER: e.g. resnet20\n    batch_size: SPECIFIC_CONFIG_PLACEHOLDER\n    epochs: SPECIFIC_CONFIG_PLACEHOLDER\n    seed: SPECIFIC_CONFIG_PLACEHOLDER\n    target_metric: SPECIFIC_CONFIG_PLACEHOLDER\n    eta_h: SPECIFIC_CONFIG_PLACEHOLDER\n    hyperparams:\n      log_lr: SPECIFIC_CONFIG_PLACEHOLDER\n      log_wd: SPECIFIC_CONFIG_PLACEHOLDER\n      momentum: SPECIFIC_CONFIG_PLACEHOLDER\n\n  # Additional run variations are appended here following the exact same schema\n\n# NOTE: Do not modify the top-level keys; they are parsed programmatically\n# by src.main.run_all_experiments().\n'}

# External Resources (Use these to replace placeholders)

**HuggingFace Models (Replace MODEL_PLACEHOLDER with these):**

- ID: timm/resnet200d.ra2_in1k

- Code: from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model('resnet200d.ra2_in1k', pretrained=True)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

top5_probabilities, top5_class_indices = torch.topk(output.softmax(dim=1) * 100, k=5)


from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnet200d.ra2_in1k',
    pretrained=True,
    features_only=True,
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

for o in output:
    # print shape of each feature map in output
    # e.g.:
    #  torch.Size([1, 64, 128, 128])
    #  torch.Size([1, 256, 64, 64])
    #  torch.Size([1, 512, 32, 32])
    #  torch.Size([1, 1024, 16, 16])
    #  torch.Size([1, 2048, 8, 8])

    print(o.shape)


from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnet200d.ra2_in1k',
    pretrained=True,
    num_classes=0,  # remove classifier nn.Linear
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor

# or equivalently (without needing to set num_classes=0)

output = model.forward_features(transforms(img).unsqueeze(0))
# output is unpooled, a (1, 2048, 8, 8) shaped tensor

output = model.forward_head(output, pre_logits=True)
# output is a (1, num_features) shaped tensor


- ID: timm/resnetrs200.tf_in1k

- Code: from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model('resnetrs200.tf_in1k', pretrained=True)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

top5_probabilities, top5_class_indices = torch.topk(output.softmax(dim=1) * 100, k=5)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnetrs200.tf_in1k',
    pretrained=True,
    features_only=True,
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

for o in output:
    # print shape of each feature map in output
    # e.g.:
    #  torch.Size([1, 64, 128, 128])
    #  torch.Size([1, 256, 64, 64])
    #  torch.Size([1, 512, 32, 32])
    #  torch.Size([1, 1024, 16, 16])
    #  torch.Size([1, 2048, 8, 8])

    print(o.shape)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnetrs200.tf_in1k',
    pretrained=True,
    num_classes=0,  # remove classifier nn.Linear
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor

# or equivalently (without needing to set num_classes=0)

output = model.forward_features(transforms(img).unsqueeze(0))
# output is unpooled, a (1, 2048, 8, 8) shaped tensor

output = model.forward_head(output, pre_logits=True)
# output is a (1, num_features) shaped tensor


- ID: BVRA/resnet18.in1k_ft_df20_299

- Code: import timm
import torch
import torchvision.transforms as T
from PIL import Image
from urllib.request import urlopen
model = timm.create_model("hf-hub:BVRA/resnet18.in1k_ft_df20_299", pretrained=True)
model = model.eval()
train_transforms = T.Compose([T.Resize((299, 299)), 
                              T.ToTensor(), 
                              T.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])]) 
img = Image.open(PATH_TO_YOUR_IMAGE)
output = model(train_transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor


- ID: BVRA/resnet50.in1k_ft_df20_299

- Code: import timm
import torch
import torchvision.transforms as T
from PIL import Image
from urllib.request import urlopen
model = timm.create_model("hf-hub:BVRA/resnet50.in1k_ft_df20_299", pretrained=True)
model = model.eval()
train_transforms = T.Compose([T.Resize((299, 299)), 
                              T.ToTensor(), 
                              T.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])]) 
img = Image.open(PATH_TO_YOUR_IMAGE)
output = model(train_transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor
# output is a (1, num_features) shaped tensor



- ID: timm/resnet50.a1_in1k

- Code: from urllib.request import urlopen
from PIL import Image
import timm
import torch

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model('resnet50.a1_in1k', pretrained=True)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

top5_probabilities, top5_class_indices = torch.topk(output.softmax(dim=1) * 100, k=5)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnet50.a1_in1k',
    pretrained=True,
    features_only=True,
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

for o in output:
    print(o.shape)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnet50.a1_in1k',
    pretrained=True,
    num_classes=0,  # remove classifier nn.Linear
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor

# or equivalently (without needing to set num_classes=0)

output = model.forward_features(transforms(img).unsqueeze(0))
# output is unpooled, a (1, 2048, 7, 7) shaped tensor

output = model.forward_head(output, pre_logits=True)
# output is a (1, num_features) shaped tensor


- ID: timm/wide_resnet50_2.racm_in1k

- Code: from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model('wide_resnet50_2.racm_in1k', pretrained=True)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

top5_probabilities, top5_class_indices = torch.topk(output.softmax(dim=1) * 100, k=5)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'wide_resnet50_2.racm_in1k',
    pretrained=True,
    features_only=True,
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

for o in output:
    # print shape of each feature map in output
    # e.g.:
    #  torch.Size([1, 64, 112, 112])
    #  torch.Size([1, 256, 56, 56])
    #  torch.Size([1, 512, 28, 28])
    #  torch.Size([1, 1024, 14, 14])
    #  torch.Size([1, 2048, 7, 7])

    print(o.shape)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'wide_resnet50_2.racm_in1k',
    pretrained=True,
    num_classes=0,  # remove classifier nn.Linear
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor

# or equivalently (without needing to set num_classes=0)

output = model.forward_features(transforms(img).unsqueeze(0))
# output is unpooled, a (1, 2048, 7, 7) shaped tensor

output = model.forward_head(output, pre_logits=True)
# output is a (1, num_features) shaped tensor


- ID: timm/resnet50.ram_in1k

- Code: from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model('resnet50.ram_in1k', pretrained=True)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

top5_probabilities, top5_class_indices = torch.topk(output.softmax(dim=1) * 100, k=5)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnet50.ram_in1k',
    pretrained=True,
    features_only=True,
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

for o in output:
    # print shape of each feature map in output
    # e.g.:
    #  torch.Size([1, 64, 112, 112])
    #  torch.Size([1, 256, 56, 56])
    #  torch.Size([1, 512, 28, 28])
    #  torch.Size([1, 1024, 14, 14])
    #  torch.Size([1, 2048, 7, 7])

    print(o.shape)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnet50.ram_in1k',
    pretrained=True,
    num_classes=0,  # remove classifier nn.Linear
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor

# or equivalently (without needing to set num_classes=0)

output = model.forward_features(transforms(img).unsqueeze(0))
# output is unpooled, a (1, 2048, 7, 7) shaped tensor

output = model.forward_head(output, pre_logits=True)
# output is a (1, num_features) shaped tensor


- ID: microsoft/resnet-50

- Code: from transformers import AutoImageProcessor, ResNetForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

processor = AutoImageProcessor.from_pretrained("microsoft/resnet-50")
model = ResNetForImageClassification.from_pretrained("microsoft/resnet-50")

inputs = processor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label])


- ID: timm/resnetv2_50x1_bit.goog_in21k

- Code: from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model('resnetv2_50x1_bit.goog_in21k', pretrained=True)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

top5_probabilities, top5_class_indices = torch.topk(output.softmax(dim=1) * 100, k=5)



from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnetv2_50x1_bit.goog_in21k',
    pretrained=True,
    features_only=True,
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

for o in output:
    # print shape of each feature map in output
    # e.g.:
    #  torch.Size([1, 64, 112, 112])
    #  torch.Size([1, 256, 56, 56])
    #  torch.Size([1, 512, 28, 28])
    #  torch.Size([1, 1024, 14, 14])
    #  torch.Size([1, 2048, 7, 7])

    print(o.shape)



from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnetv2_50x1_bit.goog_in21k',
    pretrained=True,
    num_classes=0,  # remove classifier nn.Linear
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor

# or equivalently (without needing to set num_classes=0)

output = model.forward_features(transforms(img).unsqueeze(0))
# output is unpooled, a (1, 2048, 7, 7) shaped tensor

output = model.forward_head(output, pre_logits=True)
# output is a (1, num_features) shaped tensor


- ID: stanford-crfm/alias-gpt2-small-x21

- Code: from transformers import AutoTokenizer, AutoModelForCausalLM

tokenizer = AutoTokenizer.from_pretrained("stanford-crfm/alias-gpt2-small-x21")

model = AutoModelForCausalLM.from_pretrained("stanford-crfm/alias-gpt2-small-x21")



**HuggingFace Datasets (Replace DATASET_PLACEHOLDER with these):**

- ID: uoft-cs/cifar10


- ID: uoft-cs/cifar100


- ID: tanganke/cifar100


- ID: tanganke/cifar10


- ID: uoft-cs/cifar100


- ID: tanganke/cifar100


- ID: yehzw/wikitext-103


- ID: vish26/wikitext-103-v1-cleaned





# Validation Feedback


**Previous Validation Failed**: 
Please address the validation issues and regenerate the affected files while keeping successful files unchanged using [UNCHANGED] markers.



Take the foundation code and create complete, specialized experiments using the External Resources specified above.
Output:
{
    "train_py": "\"\"\"src/train.py\nCore training logic for a single experiment variation.\nThis script is NOT dataset- or model-specific; any such specifics are\nsupplied via the YAML run-config that main.py passes in.\nIt implements the One-Shot Hyper-Gradient Warm-Start (OHGW) procedure\nonce at the beginning of training, then proceeds with standard epochs.\nResults, logs and figures for this single run are written into the\n<results_dir>/<run_id>/ sub-folder (created if necessary).\n\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport os\nimport time\nfrom pathlib import Path\nfrom typing import Dict, List, Tuple\n\nimport torch\nfrom torch import nn\nfrom torch.utils.data import DataLoader\n\n# Local imports – all generic / placeholder-aware\nfrom .preprocess import get_dataloaders  # noqa: E402\nfrom .model import build_model  # noqa: E402\n\n\ndef parse_args():\n    parser = argparse.ArgumentParser(description=\"Run a single OHGW experiment variation\")\n    parser.add_argument(\"--run-config\", type=str, required=True, help=\"Path to YAML file describing ONE experiment variation.\")\n    parser.add_argument(\"--results-dir\", type=str, required=True, help=\"Root directory where all results are stored\")\n    return parser.parse_args()\n\n\n# ---------------------------------------------------------------------------\n# Hyper-parameter container\n# ---------------------------------------------------------------------------\n\nclass HyperParameters(nn.Module):\n    \"\"\"Wraps continuous hyper-parameters as torch.Parameters so that\n    autograd can compute dL/dψ. A config field `hyperparams` must be\n    provided in the run-config YAML.\n    \"\"\"\n\n    def __init__(self, cfg: Dict):\n        super().__init__()\n        hcfg: Dict = cfg[\"hyperparams\"]\n        # Every hyper-param becomes a learnable scalar ‑- additional ones can be\n        # plugged in freely by later experiment variants.\n        self.log_lr = nn.Parameter(torch.tensor(float(hcfg.get(\"log_lr\", -1.0))))\n        self.log_wd = nn.Parameter(torch.tensor(float(hcfg.get(\"log_wd\", -4.0))))\n        # momentum can be negative for centred updates → use tanh to keep |m|<1\n        self.raw_momentum = nn.Parameter(torch.tensor(float(hcfg.get(\"momentum\", 0.9)).atanh()))\n\n    # Convenient accessors ----------------------------------------------------\n    @property\n    def lr(self) -> float:\n        return float(10.0 ** self.log_lr.detach())\n\n    @property\n    def weight_decay(self) -> float:\n        return float(10.0 ** self.log_wd.detach())\n\n    @property\n    def momentum(self) -> float:\n        return float(self.raw_momentum.tanh().detach())\n\n    def as_dict(self):\n        return {\n            \"log_lr\": self.log_lr.detach().cpu().item(),\n            \"log_wd\": self.log_wd.detach().cpu().item(),\n            \"momentum\": self.momentum,\n        }\n\n\n# ---------------------------------------------------------------------------\n# Utility helpers\n# ---------------------------------------------------------------------------\n\ndef compute_loss(model: nn.Module, criterion: nn.Module, x: torch.Tensor, y: torch.Tensor, hp: HyperParameters) -> torch.Tensor:\n    \"\"\"Loss = classification_loss + weight-decay that depends on hp.log_wd.\"\"\"\n    logits = model(x)\n    loss = criterion(logits, y)\n    if hp.log_wd.requires_grad:\n        wd_coeff = torch.exp(hp.log_wd)\n        wd = torch.zeros([], device=logits.device)\n        for p in model.parameters():\n            wd = wd + (p ** 2).sum()\n        loss = loss + wd_coeff * wd\n    return loss\n\n\ndef evaluate(model: nn.Module, loader: DataLoader, criterion: nn.Module, hp: HyperParameters, device: torch.device) -> Tuple[float, float]:\n    \"\"\"Returns (average loss, accuracy)\"\"\"\n    model.eval()\n    total_loss = 0.0\n    correct = 0\n    n = 0\n    with torch.no_grad():\n        for xb, yb in loader:\n            xb, yb = xb.to(device), yb.to(device)\n            loss = compute_loss(model, criterion, xb, yb, hp)\n            total_loss += loss.item() * xb.size(0)\n            logits = model(xb)\n            pred = logits.argmax(dim=1)\n            correct += (pred == yb).sum().item()\n            n += xb.size(0)\n    avg_loss = total_loss / max(1, n)\n    acc = correct / max(1, n)\n    return avg_loss, acc\n\n\n# ---------------------------------------------------------------------------\n# Main training routine\n# ---------------------------------------------------------------------------\n\ndef train(cfg: Dict, results_dir: Path):\n    run_id: str = cfg[\"run_id\"]\n    torch.manual_seed(int(cfg.get(\"seed\", 0)))\n\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n    # ---------------------------------------------------------------------\n    # Build model & data loaders (generic – specifics pluggable later)\n    # ---------------------------------------------------------------------\n    model = build_model(cfg).to(device)\n    train_loader, val_loader = get_dataloaders(cfg)\n\n    # Hyper-parameters (as trainable tensors to obtain hyper-gradient)\n    hp = HyperParameters(cfg).to(device)\n\n    criterion = nn.CrossEntropyLoss()\n\n    # ---------------------------------------------------------------------\n    # One-Shot Hyper-Gradient Warm-Start (OHGW)\n    # ---------------------------------------------------------------------\n    warm_inputs, warm_targets = next(iter(train_loader))\n    warm_inputs, warm_targets = warm_inputs.to(device), warm_targets.to(device)\n\n    loss_warm = compute_loss(model, criterion, warm_inputs, warm_targets, hp)\n    grads = torch.autograd.grad(loss_warm, list(hp.parameters()), create_graph=False)\n\n    eta_h: float = float(cfg.get(\"eta_h\", 1e-3))\n    with torch.no_grad():\n        for p, g in zip(hp.parameters(), grads):\n            p -= eta_h * g  # one hyper-step\n\n    # ---------------------------------------------------------------------\n    # Optimiser INITIALISED *after* warm-start so that new hp values apply.\n    # ---------------------------------------------------------------------\n    optimiser = torch.optim.SGD(\n        model.parameters(),\n        lr=hp.lr,\n        momentum=hp.momentum,\n        weight_decay=hp.weight_decay,\n    )\n\n    # ---------------------------------------------------------------------\n    # Training loop (standard supervised classification)\n    # ---------------------------------------------------------------------\n    n_epochs = int(cfg.get(\"epochs\", 10))\n    train_loss_hist: List[float] = []\n    val_loss_hist: List[float] = []\n    val_acc_hist: List[float] = []\n\n    start_time = time.time()\n    time_to_target: float | None = None\n\n    target_metric = cfg.get(\"target_metric\")  # e.g. 0.93 accuracy\n\n    for epoch in range(n_epochs):\n        model.train()\n        epoch_loss = 0.0\n        n_train = 0\n        for xb, yb in train_loader:\n            xb, yb = xb.to(device), yb.to(device)\n            optimiser.zero_grad(set_to_none=True)\n            loss = compute_loss(model, criterion, xb, yb, hp)\n            loss.backward()\n            optimiser.step()\n            epoch_loss += loss.item() * xb.size(0)\n            n_train += xb.size(0)\n        avg_train_loss = epoch_loss / max(1, n_train)\n\n        val_loss, val_acc = evaluate(model, val_loader, criterion, hp, device)\n\n        train_loss_hist.append(avg_train_loss)\n        val_loss_hist.append(val_loss)\n        val_acc_hist.append(val_acc)\n\n        # Trigger wall-clock target metric timer\n        if target_metric is not None and time_to_target is None and val_acc >= target_metric:\n            time_to_target = time.time() - start_time\n\n        print(json.dumps({\n            \"run_id\": run_id,\n            \"event\": \"epoch_end\",\n            \"epoch\": epoch + 1,\n            \"train_loss\": avg_train_loss,\n            \"val_loss\": val_loss,\n            \"val_accuracy\": val_acc,\n        }))\n\n    total_time = time.time() - start_time\n\n    # ---------------------------------------------------------------------\n    # Persist results ------------------------------------------------------\n    # ---------------------------------------------------------------------\n    run_dir = results_dir / run_id\n    run_dir.mkdir(parents=True, exist_ok=True)\n\n    # Save model weights – may be useful for downstream analyses ----------\n    torch.save({\n        \"model_state_dict\": model.state_dict(),\n        \"hyperparams\": hp.as_dict(),\n    }, run_dir / \"checkpoint.pt\")\n\n    # Prepare metrics dict -------------------------------------------------\n    results = {\n        \"run_id\": run_id,\n        \"hyperparameters\": hp.as_dict(),\n        \"train_loss_history\": train_loss_hist,\n        \"val_loss_history\": val_loss_hist,\n        \"val_accuracy_history\": val_acc_hist,\n        \"best_val_accuracy\": max(val_acc_hist) if val_acc_hist else None,\n        \"training_time_sec\": total_time,\n        \"time_to_target_sec\": time_to_target,\n    }\n\n    with open(run_dir / \"results.json\", \"w\") as f:\n        json.dump(results, f, indent=2)\n\n    # Human-readable summary printed to stdout ----------------------------\n    summary_str = (\n        f\"\\n=== Experiment Summary [{run_id}] ===\\n\"\n        f\"Best Val Acc: {results['best_val_accuracy']:.4f}\\n\"\n        f\"Total time     : {total_time/60:.2f} min\\n\"\n        f\"Time→target(≥{target_metric}): {time_to_target if time_to_target is not None else 'N/A'} sec\\n\"\n        f\"======================================\\n\"\n    )\n    print(summary_str)\n\n\n# ---------------------------------------------------------------------------\n# Entry-point\n# ---------------------------------------------------------------------------\n\nif __name__ == \"__main__\":\n    args = parse_args()\n\n    import yaml  # local import to avoid dependency during module import\n\n    with open(args.run_config, \"r\") as fh:\n        cfg = yaml.safe_load(fh)\n\n    results_root = Path(args.results_dir).resolve()\n    train(cfg, results_root)\n",
    "evaluate_py": "\"\"\"src/evaluate.py\nAggregates results of all experiment variations, computes comparison\nstatistics and generates publication-quality figures in .pdf format.\nFigures are stored in <results_dir>/figures/ and also listed in the\nstdout JSON summary for easy discovery.\n\"\"\"\nfrom __future__ import annotations\n\nimport json\nimport sys\nfrom pathlib import Path\nfrom typing import Dict, List\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\nFIG_KWARGS = dict(bbox_inches=\"tight\")\n\n\ndef load_all_results(results_dir: Path) -> List[Dict]:\n    results: List[Dict] = []\n    for res_file in results_dir.rglob(\"results.json\"):\n        with open(res_file) as f:\n            results.append(json.load(f))\n    if not results:\n        raise RuntimeError(f\"No results.json files found under {results_dir}\")\n    return results\n\n\ndef figure_training_loss(all_results: List[Dict], save_dir: Path):\n    plt.figure(figsize=(6, 4))\n    for res in all_results:\n        plt.plot(res[\"train_loss_history\"], label=res[\"run_id\"])\n        # Annotate final value\n        plt.annotate(f\"{res['train_loss_history'][-1]:.3f}\",\n                     xy=(len(res['train_loss_history']) - 1, res['train_loss_history'][-1]),\n                     textcoords=\"offset points\", xytext=(0, 5))\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Training Loss\")\n    plt.title(\"Training Loss Curves\")\n    plt.legend()\n    fname = save_dir / \"training_loss.pdf\"\n    plt.savefig(fname, **FIG_KWARGS)\n    plt.close()\n    return str(fname.name)\n\n\ndef figure_accuracy(all_results: List[Dict], save_dir: Path):\n    plt.figure(figsize=(6, 4))\n    for res in all_results:\n        if not res[\"val_accuracy_history\"]:\n            continue\n        plt.plot(res[\"val_accuracy_history\"], label=res[\"run_id\"])\n        plt.annotate(f\"{res['val_accuracy_history'][-1]:.3f}\",\n                     xy=(len(res['val_accuracy_history']) - 1, res['val_accuracy_history'][-1]),\n                     textcoords=\"offset points\", xytext=(0, 5))\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Validation Accuracy\")\n    plt.title(\"Validation Accuracy Curves\")\n    plt.legend()\n    fname = save_dir / \"accuracy.pdf\"\n    plt.savefig(fname, **FIG_KWARGS)\n    plt.close()\n    return str(fname.name)\n\n\ndef bar_best_accuracy(all_results: List[Dict], save_dir: Path):\n    accs = {r[\"run_id\"]: r[\"best_val_accuracy\"] for r in all_results if r[\"best_val_accuracy\"] is not None}\n    if not accs:\n        return None\n    plt.figure(figsize=(6, 4))\n    names = list(accs.keys())\n    vals = [accs[n] for n in names]\n    sns.barplot(x=names, y=vals)\n    for i, v in enumerate(vals):\n        plt.text(i, v + 0.01, f\"{v:.3f}\", ha=\"center\")\n    plt.ylabel(\"Best Validation Accuracy\")\n    plt.title(\"Comparison of Best Accuracies\")\n    fname = save_dir / \"best_val_accuracy.pdf\"\n    plt.savefig(fname, **FIG_KWARGS)\n    plt.close()\n    return str(fname.name)\n\n\ndef evaluate(results_dir: Path):\n    print(\"\\n===== Aggregating experiment results =====\\n\")\n    all_results = load_all_results(results_dir)\n\n    figures_dir = results_dir / \"figures\"\n    figures_dir.mkdir(exist_ok=True, parents=True)\n\n    figure_files: List[str] = []\n    figure_files.append(figure_training_loss(all_results, figures_dir))\n    fig_acc = figure_accuracy(all_results, figures_dir)\n    if fig_acc:\n        figure_files.append(fig_acc)\n    fig_bar = bar_best_accuracy(all_results, figures_dir)\n    if fig_bar:\n        figure_files.append(fig_bar)\n\n    # ------------------------------------------------------------------\n    # Consolidated comparison table for stdout -------------------------\n    # ------------------------------------------------------------------\n    df_rows = []\n    for r in all_results:\n        df_rows.append({\n            \"run_id\": r[\"run_id\"],\n            \"best_val_accuracy\": r[\"best_val_accuracy\"],\n            \"training_time_sec\": r[\"training_time_sec\"],\n            \"time_to_target_sec\": r[\"time_to_target_sec\"],\n        })\n    df = pd.DataFrame(df_rows)\n\n    comparison = df.to_dict(orient=\"records\")\n    summary = {\n        \"description\": \"Comparison of OHGW experiment variations\",\n        \"num_runs\": len(all_results),\n        \"figures\": figure_files,\n        \"table\": comparison,\n    }\n    print(json.dumps(summary, indent=2))\n\n\n# ---------------------------------------------------------------------------\n# Entry-point\n# ---------------------------------------------------------------------------\nif __name__ == \"__main__\":\n    import argparse\n\n    p = argparse.ArgumentParser()\n    p.add_argument(\"--results-dir\", type=str, required=True)\n    args = p.parse_args()\n\n    evaluate(Path(args.results_dir).resolve())\n",
    "preprocess_py": "\"\"\"src/preprocess.py\nData loading & preprocessing utilities specialised for the OHGW\nexperiments.  Supports both a dummy random dataset (for CI smoke tests)\nand WikiText-103 language-modeling data as required by exp-2.\n\"\"\"\nfrom __future__ import annotations\n\nfrom typing import List, Tuple\n\nimport torch\nfrom torch.utils.data import DataLoader, Dataset\n\n# external deps (lazy import to keep dummy path light-weight)\nfrom datasets import load_dataset  # type: ignore\nfrom transformers import GPT2TokenizerFast  # type: ignore\n\n\n# ---------------------------------------------------------------------------\n# Dummy dataset for smoke-tests --------------------------------------------\n# ---------------------------------------------------------------------------\n\nclass RandomTensorDataset(Dataset):\n    \"\"\"Deterministic pseudo-random dataset for pipeline validation.\"\"\"\n\n    def __init__(self, length: int, input_shape: List[int], num_classes: int):\n        super().__init__()\n        self.length = length\n        generator = torch.Generator().manual_seed(42)\n        self.data = torch.randn(length, *input_shape, generator=generator)\n        self.targets = torch.randint(0, num_classes, (length,), generator=generator)\n\n    def __len__(self):\n        return self.length\n\n    def __getitem__(self, idx):\n        return self.data[idx], self.targets[idx]\n\n\n# ---------------------------------------------------------------------------\n# WikiText-103 language-modeling dataset -----------------------------------\n# ---------------------------------------------------------------------------\n\nclass WikiTextDataset(Dataset):\n    \"\"\"Simple dataset that returns (input_ids, labels) chunks of fixed length.\"\"\"\n\n    def __init__(self, split: str, seq_len: int = 1024, noise_fraction: float = 0.0,\n                 variant: str = \"wikitext-103-v1\"):\n        super().__init__()\n        self.seq_len = seq_len\n        self.noise_fraction = noise_fraction\n        self.tokenizer = GPT2TokenizerFast.from_pretrained(\"gpt2\")\n        self.tokenizer.model_max_length = seq_len\n\n        # ------------------------------------------------------------------\n        # Load + tokenize ---------------------------------------------------\n        # ------------------------------------------------------------------\n        dataset = load_dataset(\"wikitext\", variant, split=split)\n        # concatenate all texts then chunk\n        tokenized = self.tokenizer(\"\\n\\n\".join(dataset[\"text\"]), return_attention_mask=False, add_special_tokens=False)[\n            \"input_ids\"\n        ]\n        n_tokens = (len(tokenized) // seq_len) * seq_len\n        self.tokens = torch.tensor(tokenized[:n_tokens], dtype=torch.long)\n        self.n_seq = n_tokens // seq_len\n\n    def __len__(self):\n        return self.n_seq\n\n    def __getitem__(self, idx):\n        start = idx * self.seq_len\n        end = start + self.seq_len\n        seq = self.tokens[start:end].clone()\n        labels = seq.clone()\n\n        if self.noise_fraction > 0.0:\n            mask = torch.rand(seq.shape) < self.noise_fraction\n            random_tokens = torch.randint(0, self.tokenizer.vocab_size, seq.shape)\n            seq[mask] = random_tokens[mask]\n            # note: labels remain original, so model has to learn under noisy inputs\n        return seq, labels\n\n\n# ---------------------------------------------------------------------------\n# Public API ----------------------------------------------------------------\n# ---------------------------------------------------------------------------\n\ndef get_dataloaders(cfg) -> Tuple[DataLoader, DataLoader]:\n    \"\"\"Return train & validation DataLoaders based on the run-config.\"\"\"\n    dataset_name = cfg.get(\"dataset_name\", \"dummy\").lower()\n\n    batch_size = int(cfg.get(\"batch_size\", 32))\n    num_workers = int(cfg.get(\"num_workers\", 2))\n\n    if dataset_name == \"dummy\":\n        input_shape = cfg.get(\"input_shape\", [1, 28, 28])\n        num_classes = int(cfg.get(\"num_classes\", 10))\n        length = int(cfg.get(\"dummy_length\", 1024))\n        train_ds = RandomTensorDataset(length, input_shape, num_classes)\n        val_ds = RandomTensorDataset(length // 4, input_shape, num_classes)\n        train_loader = DataLoader(train_ds, batch_size=batch_size, shuffle=True, num_workers=num_workers)\n        val_loader = DataLoader(val_ds, batch_size=batch_size, shuffle=False, num_workers=num_workers)\n        return train_loader, val_loader\n\n    # ------------------------------------------------------------------\n    # WikiText-103 specialised path ------------------------------------\n    # ------------------------------------------------------------------\n    if dataset_name.startswith(\"wikitext-103\"):\n        seq_len = int(cfg.get(\"seq_len\", 1024))\n        noise_fraction = float(cfg.get(\"noise_fraction\", 0.0))\n        variant = \"wikitext-103-v1\"  # default\n        if dataset_name != \"wikitext-103\":\n            # allow passing custom variant via dataset_name, e.g. wikitext-103-v1-cleaned\n            variant = dataset_name\n        train_ds = WikiTextDataset(\"train\", seq_len, noise_fraction, variant)\n        val_ds = WikiTextDataset(\"validation\", seq_len, 0.0, variant)\n\n        def collate(batch):\n            input_ids = torch.stack([item[0] for item in batch])\n            labels = torch.stack([item[1] for item in batch])\n            return input_ids, labels\n\n        train_loader = DataLoader(train_ds, batch_size=batch_size, shuffle=True, num_workers=num_workers,\n                                  collate_fn=collate, pin_memory=True)\n        val_loader = DataLoader(val_ds, batch_size=batch_size, shuffle=False, num_workers=num_workers,\n                                collate_fn=collate, pin_memory=True)\n        return train_loader, val_loader\n\n    # If we get here the dataset name is unknown\n    raise ValueError(f\"Unknown dataset_name='{dataset_name}'. Supported: 'dummy', 'wikitext-103' variants.\")\n",
    "model_py": "\"\"\"src/model.py\nModel-building utilities.  Provides a minimal DummyModel for smoke tests\nand a scratch initialised GPT2-small for WikiText-103 experiments.\n\"\"\"\nfrom __future__ import annotations\n\nfrom typing import List\n\nimport torch\nfrom torch import nn\n\n# HuggingFace (lazy import so that smoke tests without transformers still pass)\ntry:\n    from transformers import GPT2Config, GPT2LMHeadModel  # type: ignore\nexcept ImportError:  # pragma: no cover – only fails in environments without transformers\n    GPT2Config = None  # type: ignore\n    GPT2LMHeadModel = None  # type: ignore\n\n\n# ---------------------------------------------------------------------------\n# Dummy model for smoke tests ----------------------------------------------\n# ---------------------------------------------------------------------------\n\nclass DummyModel(nn.Module):\n    \"\"\"A tiny MLP suitable only for smoke tests (classification).\"\"\"\n\n    def __init__(self, input_shape: List[int], num_classes: int):\n        super().__init__()\n        c, h, w = input_shape\n        flat_dim = c * h * w\n        self.net = nn.Sequential(\n            nn.Flatten(),\n            nn.Linear(flat_dim, 128),\n            nn.ReLU(inplace=True),\n            nn.Linear(128, num_classes),\n        )\n\n    def forward(self, x):  # noqa: D401\n        return self.net(x)\n\n\n# ---------------------------------------------------------------------------\n# GPT2-small from scratch ---------------------------------------------------\n# ---------------------------------------------------------------------------\n\nclass GPT2SmallScratch(nn.Module):\n    \"\"\"GPT2-small (124 M params) initialised from scratch.\"\"\"\n\n    def __init__(self, vocab_size: int = 50257, seq_len: int = 1024):\n        super().__init__()\n        if GPT2Config is None:\n            raise RuntimeError(\"transformers package not available – cannot build GPT2 model\")\n        config = GPT2Config(\n            vocab_size=vocab_size,\n            n_positions=seq_len,\n            n_ctx=seq_len,\n            n_embd=768,\n            n_layer=12,\n            n_head=12,\n            bos_token_id=50256,\n            eos_token_id=50256,\n        )\n        self.model = GPT2LMHeadModel(config)\n\n    def forward(self, input_ids, labels=None):  # type: ignore[override]\n        return self.model(input_ids=input_ids, labels=labels)\n\n    @property\n    def config(self):  # expose underlying HF config to callers\n        return self.model.config\n\n\n# ---------------------------------------------------------------------------\n# Public factory ------------------------------------------------------------\n# ---------------------------------------------------------------------------\n\ndef build_model(cfg):\n    \"\"\"Return a torch.nn.Module according to `model_name` in cfg.\"\"\"\n    model_name = cfg.get(\"model_name\", \"dummy\").lower()\n\n    if model_name == \"dummy\":\n        input_shape = cfg.get(\"input_shape\", [1, 28, 28])\n        num_classes = int(cfg.get(\"num_classes\", 10))\n        return DummyModel(input_shape, num_classes)\n\n    if model_name == \"gpt2-small-scratch\":\n        seq_len = int(cfg.get(\"seq_len\", 1024))\n        return GPT2SmallScratch(seq_len=seq_len)\n\n    raise ValueError(f\"Unknown model_name='{model_name}'. Supported: 'dummy', 'gpt2-small-scratch'.\")\n",
    "main_py": "\"\"\"src/main.py\nCentral experiment orchestrator. Reads the YAML configuration file that\nlists *all* run variations, schedules them on the available GPUs (one GPU\nper subprocess), manages logging tee-ing, and finally invokes evaluate.py\nonce all runs have finished.\n\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport os\nimport queue\nimport subprocess\nimport sys\nimport threading\nimport time\nfrom pathlib import Path\nfrom typing import Dict, List\n\nimport yaml\nimport torch\n\nROOT_DIR = Path(__file__).resolve().parent.parent\nSRC_DIR = ROOT_DIR / \"src\"\n\n\n# ---------------------------------------------------------------------------\n# Helper: live tee of subprocess output to both file and main stdout ------\n# ---------------------------------------------------------------------------\n\ndef _reader_thread(pipe, tee_file):\n    with pipe:\n        for line in iter(pipe.readline, b\"\"):\n            decoded = line.decode()\n            tee_file.write(decoded)\n            tee_file.flush()\n            sys.stdout.write(decoded)\n            sys.stdout.flush()\n\n\ndef launch_subprocess(cmd: List[str], env: Dict[str, str], stdout_path: Path, stderr_path: Path) -> subprocess.Popen:\n    stdout_f = open(stdout_path, \"w\")\n    stderr_f = open(stderr_path, \"w\")\n\n    # Merge stderr into its own pipe for tee-ing\n    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)\n\n    threading.Thread(target=_reader_thread, args=(proc.stdout, stdout_f), daemon=True).start()\n    threading.Thread(target=_reader_thread, args=(proc.stderr, stderr_f), daemon=True).start()\n    return proc\n\n\n# ---------------------------------------------------------------------------\n# Scheduler that ensures ≤ num_gpus concurrent processes ---------------\n# ---------------------------------------------------------------------------\n\ndef run_all_experiments(config_path: Path, results_dir: Path):\n    with open(config_path, \"r\") as fh:\n        cfg_root = yaml.safe_load(fh)\n\n    experiments: List[Dict] = cfg_root[\"experiments\"]\n    if not experiments:\n        raise ValueError(\"No experiments found in config file\")\n\n    n_available_gpus = torch.cuda.device_count()\n    if n_available_gpus == 0:\n        print(\"WARNING: No GPUs detected – running on CPU.\")\n        n_available_gpus = 1  # schedule serially on CPU\n\n    print(f\"Detected {n_available_gpus} GPUs → launching up to {n_available_gpus} concurrent runs.\")\n\n    # Queue of pending experiments -------------------------------------\n    exp_queue = queue.Queue()\n    for exp in experiments:\n        exp_queue.put(exp)\n\n    active: Dict[int, subprocess.Popen] = {}\n    gpu_ids = list(range(n_available_gpus))\n\n    while not exp_queue.empty() or active:\n        # Launch new processes if GPU free\n        while gpu_ids and not exp_queue.empty():\n            gpu_id = gpu_ids.pop(0)\n            exp_cfg = exp_queue.get()\n            run_id = exp_cfg[\"run_id\"]\n\n            run_dir = results_dir / run_id\n            run_dir.mkdir(parents=True, exist_ok=True)\n\n            # Write run-specific YAML config so train.py can read it.\n            run_cfg_path = run_dir / \"run_config.yaml\"\n            with open(run_cfg_path, \"w\") as fh:\n                yaml.safe_dump(exp_cfg, fh)\n\n            stdout_path = run_dir / \"stdout.log\"\n            stderr_path = run_dir / \"stderr.log\"\n\n            cmd = [\n                sys.executable,\n                \"-m\",\n                \"src.train\",\n                \"--run-config\",\n                str(run_cfg_path),\n                \"--results-dir\",\n                str(results_dir),\n            ]\n\n            env = os.environ.copy()\n            env[\"CUDA_VISIBLE_DEVICES\"] = str(gpu_id)\n\n            print(f\"[MAIN] Launching run_id={run_id} on GPU {gpu_id} …\")\n            proc = launch_subprocess(cmd, env, stdout_path, stderr_path)\n            active[gpu_id] = proc\n\n        # Poll active processes ---------------------------------------\n        finished_gpus = []\n        for gid, proc in active.items():\n            ret = proc.poll()\n            if ret is not None:  # finished\n                if ret != 0:\n                    print(f\"[MAIN] WARNING: run on GPU {gid} exited with code {ret}\")\n                finished_gpus.append(gid)\n        for gid in finished_gpus:\n            active.pop(gid)\n            gpu_ids.append(gid)  # free GPU\n        time.sleep(1)\n\n    # All done → evaluation ---------------------------------------------\n    print(\"\\nAll runs finished – launching evaluation …\\n\")\n    subprocess.run([\n        sys.executable,\n        \"-m\",\n        \"src.evaluate\",\n        \"--results-dir\",\n        str(results_dir),\n    ], check=True)\n\n\n# ---------------------------------------------------------------------------\n# CLI entry-point -----------------------------------------------------------\n# ---------------------------------------------------------------------------\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"OHGW Experiments Orchestrator\")\n    group = parser.add_mutually_exclusive_group(required=True)\n    group.add_argument(\"--smoke-test\", action=\"store_true\", help=\"Run the smoke-test configuration\")\n    group.add_argument(\"--full-experiment\", action=\"store_true\", help=\"Run the full experiment configuration\")\n    parser.add_argument(\"--results-dir\", type=str, required=True, help=\"Where to store outputs, logs, figures …\")\n    args = parser.parse_args()\n\n    if args.smoke_test:\n        config_file = ROOT_DIR / \"config\" / \"smoke_test.yaml\"\n    else:\n        config_file = ROOT_DIR / \"config\" / \"full_experiment.yaml\"\n\n    run_all_experiments(config_file, Path(args.results_dir).resolve())\n",
    "pyproject_toml": "[project]\nname = \"ohgw_experiments\"\nversion = \"0.1.0\"\ndescription = \"OHGW experimental framework\"\nauthors = [ { name = \"AI Research Assistant\" } ]\nreadme = \"README.md\"\nrequires-python = \">=3.9\"\n\n[project.dependencies]\ntorch = \"*\"\npyyaml = \"*\"\nmatplotlib = \"*\"\nseaborn = \"*\"\npandas = \"*\"\ndatasets = \"*\"\ntransformers = \"*\"\n\n[build-system]\nrequires = [\"setuptools\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"",
    "smoke_test_yaml": "# config/smoke_test.yaml\n# Lightweight variants of ALL experiment configurations for CI validation.\n# All runs use the dummy dataset/model so they finish within seconds.\n\nexperiments:\n  - run_id: pasha-baseline-smoke\n    dataset_name: dummy\n    model_name: dummy\n    input_shape: [1, 28, 28]\n    num_classes: 10\n    batch_size: 16\n    epochs: 1\n    seed: 0\n    eta_h: 0.0\n    hyperparams:\n      log_lr: -1.0\n      log_wd: -4.0\n      momentum: 0.9\n\n  - run_id: pasha-ohgw-vision-tuned-eta-smoke\n    dataset_name: dummy\n    model_name: dummy\n    input_shape: [1, 28, 28]\n    num_classes: 10\n    batch_size: 16\n    epochs: 1\n    seed: 0\n    eta_h: 0.001\n    hyperparams:\n      log_lr: -1.0\n      log_wd: -4.0\n      momentum: 0.9\n\n  - run_id: pasha-ohgw-low-eta-smoke\n    dataset_name: dummy\n    model_name: dummy\n    input_shape: [1, 28, 28]\n    num_classes: 10\n    batch_size: 16\n    epochs: 1\n    seed: 0\n    eta_h: 0.0003\n    hyperparams:\n      log_lr: -1.0\n      log_wd: -4.0\n      momentum: 0.9\n\n  - run_id: pasha-ohgw-noisy-data-smoke\n    dataset_name: dummy\n    model_name: dummy\n    input_shape: [1, 28, 28]\n    num_classes: 10\n    batch_size: 16\n    epochs: 1\n    seed: 0\n    eta_h: 0.001\n    hyperparams:\n      log_lr: -1.0\n      log_wd: -4.0\n      momentum: 0.9",
    "full_experiment_yaml": "# config/full_experiment.yaml\n# Full experiment configuration for exp-2 (WikiText-103 language modeling)\n\nexperiments:\n  # ---------------------------------------------------------------------\n  # 1) Baseline PASHA – no OHGW (eta_h = 0)\n  # ---------------------------------------------------------------------\n  - run_id: pasha-baseline\n    dataset_name: wikitext-103\n    model_name: gpt2-small-scratch\n    task_type: language_modeling\n    metric_type: loss             # lower perplexity == better\n    batch_size: 8                 # 8 × 1024 tokens per GPU fits comfortably on A100 80GB\n    seq_len: 1024\n    epochs: 50\n    seed: 0\n    eta_h: 0.0                    # disables OHGW\n    target_metric: 3.401          # ≈ perplexity 30 (because ppl = exp(loss))\n    hyperparams:\n      log_lr: -3.0                # 1e-3 initial lr (will be tuned by scheduler)\n      log_wd: -4.0                # 1e-4 weight decay\n      momentum: 0.9               # unused but kept for completeness\n\n  # ---------------------------------------------------------------------\n  # 2) PASHA + OHGW with CIFAR-tuned eta_h = 1e-3\n  # ---------------------------------------------------------------------\n  - run_id: pasha-ohgw-vision-tuned-eta\n    dataset_name: wikitext-103\n    model_name: gpt2-small-scratch\n    task_type: language_modeling\n    metric_type: loss\n    batch_size: 8\n    seq_len: 1024\n    epochs: 50\n    seed: 0\n    eta_h: 0.001                  # transferred hyper-gradient lr\n    target_metric: 3.401\n    hyperparams:\n      log_lr: -3.0\n      log_wd: -4.0\n      momentum: 0.9\n\n  # ---------------------------------------------------------------------\n  # 3) PASHA + OHGW with lower eta_h = 3e-4 (sensitivity study)\n  # ---------------------------------------------------------------------\n  - run_id: pasha-ohgw-low-eta\n    dataset_name: wikitext-103\n    model_name: gpt2-small-scratch\n    task_type: language_modeling\n    metric_type: loss\n    batch_size: 8\n    seq_len: 1024\n    epochs: 50\n    seed: 0\n    eta_h: 0.0003\n    target_metric: 3.401\n    hyperparams:\n      log_lr: -3.0\n      log_wd: -4.0\n      momentum: 0.9\n\n  # ---------------------------------------------------------------------\n  # 4) PASHA + OHGW with data noise (15 % tokens replaced) – robustness\n  # ---------------------------------------------------------------------\n  - run_id: pasha-ohgw-noisy-data\n    dataset_name: wikitext-103\n    model_name: gpt2-small-scratch\n    task_type: language_modeling\n    metric_type: loss\n    batch_size: 8\n    seq_len: 1024\n    epochs: 50\n    seed: 0\n    eta_h: 0.001\n    noise_fraction: 0.15          # custom key consumed by preprocess.py\n    target_metric: 3.401\n    hyperparams:\n      log_lr: -3.0\n      log_wd: -4.0\n      momentum: 0.9\n\n# Note: PASHA scheduler integration happens outside this YAML; here we\n# only specify per-run hyper-parameters and OHGW settings.\n\n# =====================================================================\n# The orchestrator (src/main.py) will sequentially parse this list and\n# execute the runs in parallel across available GPUs.\n# =====================================================================\n"
}
