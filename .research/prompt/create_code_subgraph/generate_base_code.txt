
Input:
You are a cutting-edge AI researcher preparing the COMMON CORE FOUNDATION for experiments that will ensure consistency across all experimental variations.

This step generates the **COMMON CORE FOUNDATION** for experiments that will ensure consistency across all experimental variations.

**Current Task**: Generate common base logic, evaluation framework, and infrastructure with placeholders for specific datasets/models
**Next Step**: A subsequent step will derive specific experiments by replacing placeholders with actual datasets/models

Based on the research method in # Current Research Method and experimental design in # Experimental Design, generate the foundational code that will serve as the common base for ALL experimental variations.

# Instructions: Common Core Foundation Generation

## Core Requirements
- **COMMON EVALUATION LOGIC**: Implement consistent evaluation metrics, result collection, and comparison logic that will work across all experimental variations
- **CORE ALGORITHM IMPLEMENTATION**: Implement the main method/algorithm with full functionality
- **INFRASTRUCTURE CODE**: Complete training loops, model saving/loading, configuration handling, and result visualization
- **PLACEHOLDER STRATEGY**: Use clear, descriptive placeholders for dataset-specific and model-specific components that will be replaced in subsequent steps
- **CONSISTENCY FRAMEWORK**: Ensure all experiments will use identical evaluation criteria, metrics calculation, and result formatting

## Placeholder Guidelines
- Use descriptive placeholder names like `DATASET_PLACEHOLDER`, `MODEL_PLACEHOLDER`, `SPECIFIC_CONFIG_PLACEHOLDER`
- Include comments explaining what will be replaced: `# PLACEHOLDER: Will be replaced with specific dataset loading logic`
- Ensure placeholders are easily identifiable and replaceable in the next phase
- Keep the base logic intact - only dataset/model-specific parts should be placeholders

## Implementation Requirements
- **ZERO PLACEHOLDER POLICY FOR CORE LOGIC**: Generate complete, production-ready base framework. NO placeholders for training loops, evaluation logic, or result processing.
- **COMPLETE IMPLEMENTATION**: Every base component must be fully functional. No "omitted for brevity", no "simplified version" for base logic.
- **PUBLICATION-READY INFRASTRUCTURE**: Framework must produce actual publication-worthy results when datasets/models are specified
- **USE PYTORCH EXCLUSIVELY** as the deep learning framework
- **COMPLETE DATA PIPELINE FRAMEWORK**: Implement data loading and preprocessing pipeline with placeholders for specific datasets
- **COMPREHENSIVE EXPERIMENT INFRASTRUCTURE**: Full-scale experiment framework with sufficient training epochs, proper validation splits, and thorough evaluation metrics
- **STRUCTURED PLACEHOLDER APPROACH**: Use well-defined placeholders for dataset/model specifics while ensuring base logic is complete and functional

## Standard Output Content Requirements
- Experiment description: Before printing experimental results, the standard output must include a detailed description of the experiment.
- Experimental numerical data: All experimental data obtained in the experiments must be output to the standard output.
- Names of figures summarizing the numerical data

## Figure Output Requirements
- Experimental results must always be presented in clear and interpretable figures without exception.
- Use matplotlib or seaborn to output the results (e.g., accuracy, loss curves, confusion matrix).
- Numeric values must be annotated on the axes of the graphs.
- For line graphs, annotate significant values (e.g., the final or best value) to highlight key findings. For bar graphs, annotate the value above each bar.
- Include legends in the figures.
- All figures must be saved in .pdf format (e.g., using plt.savefig("filename.pdf", bbox_inches="tight")).
  - Do not use .png or any other formats—only .pdf is acceptable for publication quality.

## Figure Naming Convention
File names must follow the format: `<figure_topic>[_<condition>][_pairN].pdf`
- `<figure_topic>`: The main subject of the figure (e.g., training_loss, accuracy, inference_latency)
- `_<condition>` (optional): Indicates model, setting, or comparison condition (e.g., amict, baseline, tokens, multimodal_vs_text)
- `_pairN` (optional): Used when presenting figures in pairs (e.g., _pair1, _pair2)
- For standalone figures, do not include _pairN.


- Environment Variables: The following environment variables are available: HF_TOKEN, ANTHROPIC_API_KEY


## Command Line Interface and Run Variations
The `full_experiment.yaml` file defines a list of all experiments to be run (e.g., baseline, proposed, ablations). The `main.py` script reads this file and executes experiments sequentially.

The generated main.py must support:
```bash
# Smoke test (runs a lightweight version of ALL run variations defined in smoke_test.yaml)
uv run python -m src.main --smoke-test --results-dir <path>

# Full experiment (reads full_experiment.yaml, runs all variations sequentially)
uv run python -m src.main --full-experiment --results-dir <path>
```

The `--results-dir` argument is passed from the GitHub Actions workflow and specifies where all outputs (figures, logs, metrics) should be saved.

## Output Structure
Generate complete foundational code for these files ONLY. Do not create any additional files beyond this structure:

### Script Structure (ExperimentCode format)
Generate complete foundational code for these files ONLY. Do not create any additional files beyond this structure:
- `src/train.py`: Logic to run a single experiment variation. It is called as a subprocess by main.py. It must save final metrics to a structured file (e.g., results.json).
- `src/evaluate.py`: Comparison and visualization tool. It reads the result files from all experiment variations and generates comparison figures.
- `src/preprocess.py`: Common preprocessing pipeline with dataset placeholders
- `src/model.py`: Model architecture implementations. It will contain classes for baseline, proposed, and ablation models.
- `src/main.py`: The main orchestrator script. It reads a config file, launches train.py for each experiment sequentially, manages subprocesses, collects and consolidates logs, and finally triggers evaluate.py.
- `pyproject.toml`: Complete project dependencies
- `config/smoke_test.yaml`: Configuration file template with placeholder structure for run variations. Actual variations will be populated in derive_specific step.
- `config/full_experiment.yaml`: Configuration file template with placeholder structure for run variations. Actual variations will be populated in derive_specific step.

### Key Implementation Focus Areas
1. Algorithm Core: Full implementation of the proposed method with proper abstraction
2. Sequential Execution: main.py executes run variations one at a time in sequential order.
3. Configuration Driven: The entire workflow must be driven by the YAML configuration files.
4. Evaluation Consistency: Identical metrics calculation, result formatting, and comparison logic. evaluate.py must operate on the saved results after all training is complete.
5. Structured Logging:
   - train.py: Print JSON-formatted experimental data (epoch-wise metrics, final results) to stdout using `print(json.dumps({...}))`. Always include `"run_id"` field (use the run variation name from config).
   - evaluate.py: Print JSON-formatted comparison results to stdout
   - main.py: For each subprocess, redirect stdout/stderr to `{results_dir}/{run_id}/stdout.log` and `{results_dir}/{run_id}/stderr.log` while also forwarding to main process stdout/stderr (using tee-like logic) so logs are captured both structurally and by GitHub Actions.


## Core code Validation Feedback




# Experimental Environment
NVIDIA A100×8
VRAM：80GB×8
RAM：2048 GB

# Current Research Method (Target for Experiment Design)
{
    "Open Problems": "Even the fastest gray–box and multi-fidelity HPO methods (ASHA, PASHA, DyHPO, BOIL) still waste computation on obviously bad configurations because every trial is treated as a black box; none of the information that is already available inside the training loop – most notably the stochastic hyper-gradient obtained at almost zero cost with automatic differentiation – is used to steer the search. The open problem is: how can we inject very cheap, noisy hyper-gradient signals into existing bandit-style schedulers without redesigning their core logic?",
    "Methods": "We propose ‘One-Shot Hyper-Gradient Warm-Starts’ (OHGW), a drop-in modification for any Successive-Halving style scheduler (Hyperband / ASHA / PASHA).  1. When a new configuration x is sampled it is run for only one **mini-batch** (≈10-2% of a normal epoch).  2. In this first forward / backward pass we keep the compute graph and call automatic differentiation once more to obtain a single stochastic hyper-gradient ∂L/∂ψ for every continuous hyperparameter ψ (learning-rate, weight-decay, momentum …) exactly as in implicit hyper-gradient papers, but **without unrolling** (cost <1.2× normal mini-batch).  3. We apply one hyper-parameter update ψ←ψ−η_h ∂L/∂ψ (η_h is a fixed tiny step such as 10-3).  4. The adjusted configuration x′ – which differs from x by at most one gradient step in each hyper-parameter – is what the scheduler subsequently evaluates for its first rung (e.g. 1 epoch).  5. Everything else (promotion rules, budget doubling, stopping) is untouched.  In effect the scheduler still explores the same region, but every candidate is lightly nudged towards a valley before costly training starts.",
    "Experimental Setup": "Benchmark: CIFAR-10 with ResNet-20 and 5-dim continuous search space {log-lr, log-wd, momentum, augment-magnitude, label-smoothing}.  Scheduler baselines: ASHA, PASHA, DyHPO (their public implementations).  Our variants: ASHA+OHGW, PASHA+OHGW, DyHPO+OHGW (one-line wrapper around trial creation).  Mini-batch for warm-start: 128 images.  Hyper-gradient lr η_h=1e-3, computed with PyTorch autograd; no higher-order terms.  Each method is given the same overall GPU budget (4×V100 for 12 hours) and 50 seeds.  Metrics: (i) best test accuracy reached vs. wall-clock, (ii) total GPU hours until 93% accuracy, (iii) distribution of final hyper-parameters to check bias.",
    "Experimental Code": "# pseudo-code\nfor cfg in scheduler.sample():\n    model = build_model(cfg)\n    data = next(train_loader)            # one mini-batch\n    loss  = forward_loss(model, data)\n    grads = torch.autograd.grad(loss, cfg.continuous_params())\n    with torch.no_grad():               # one hyper step\n        for p,g in zip(cfg.continuous_params(), grads):\n            p -= eta_h * g\n    scheduler.launch(cfg)               # continue as usual",
    "Expected Result": "Across all schedules OHGW cuts the median time-to-93%-accuracy by ≈20% (ASHA 11.2→9.0 h, PASHA 7.3→5.8 h, DyHPO 6.1→4.9 h) while keeping the same final accuracy. The added warm-start costs <3% extra compute. Hyper-parameter distributions remain similar, showing no harmful bias.",
    "Expected Conclusion": "A single stochastic hyper-gradient step collected before the first rung is enough to noticeably reduce wasted resources in bandit-style HPO. Because OHGW requires only two extra autograd calls and no change to the scheduler logic, it can be retro-fitted to almost any existing gray-box optimizer, offering an attractive efficiency boost with negligible engineering effort."
}

# Experimental Design
- Strategy: Overall Experimental Strategy for Validating One-Shot Hyper-Gradient Warm-Starts (OHGW)

1. Core Hypotheses to Validate
   a. Efficiency: OHGW reduces wall-clock time and GPU hours needed by bandit-style schedulers to reach a preset performance threshold.
   b. Performance Preservation: OHGW does not hurt (and ideally preserves or slightly improves) the best final metric attainable by the underlying scheduler.
   c. Robustness & Variance: OHGW’s benefit is consistent across random seeds, search-space dimensionalities, data sets, model families and scheduler types.
   d. Generalization: The same one-line wrapper applies without retuning to tasks beyond image classification (e.g. language modelling, tabular, RL) and to both small- and large-scale training loops.
   e. Cost Overhead: Extra compute, memory and engineering overhead introduced by OHGW remain negligible (<5 % GPU-hours, <10 % peak-memory, ≤20 LoC integration).

2. Experiment Families (all experiments draw from one common pool of settings below)
   • Task Breadth: vision (CIFAR-10/100, ImageNet-1k), NLP (WikiText-103), tabular (UCI suite), RL (Atari).
   • Model Breadth: ResNet family, ViT, Transformer-LM, XGBoost, PPO-CNN.
   • Scheduler Breadth: ASHA, PASHA, DyHPO, Hyperband-BO, BOIL (if open-sourced).
   • Search-Space Breadth: 3–10 continuous hyper-parameters; mixed discrete+continuous cases to show neutrality to inapplicable params.
   • Scale Breadth: single-GPU up to 64-GPU distributed training (multi-node pools or simulated via concurrency on the 8×A100 machine).

3. Comparison Axes for Every Experiment
   • Baseline Scheduler (vanilla).
   • Baseline + Random Warm-Start in ∆ψ range (controls for mere perturbation).
   • Baseline + Multiple Hyper-Gradient Steps (ablation to check diminishing returns).
   • Scheduler-specific SoTA gradient-aware HPO if available (e.g. DyHPO, BOIL) to position OHGW competitively.

4. Metrics & Evaluation Protocol
   Primary quantitative metrics (reported as median ±IQR over ≥30 seeds):
      – T@τ: Wall-clock/GPU-hour to reach target score τ (task-specific; chosen so that vanilla reaches it within budget).
      – Best final validation/test score after fixed budget.
      – Compute Overhead: (Σ warm-start flop) ⁄ (total flop) and peak VRAM.
   Secondary diagnostics:
      – AUC of best-score-vs-time curve (overall sample efficiency).
      – Seed-wise variance of T@τ and final score.
      – Hyper-parameter trajectory statistics (mean shift & KL-divergence of posterior over ψ).
   Qualitative/visual:
      – Survival plots of promoted configurations per rung.
      – Heatmaps of hyper-gradient magnitude vs. eventual benefit.
   Statistical test: two-sided Wilcoxon signed-rank (α=0.05) on paired seeds.

5. Success Criteria (must hold in ≥75 % of experiment tuples)
   • ≥15 % median reduction in T@τ with p<0.05.
   • ≤0.2 % relative drop (or improvement) in best final score.
   • ≤5 % extra GPU-hours and ≤10 % extra peak VRAM.
   • Std-dev(T@τ) not inflated by more than 10 %.

6. Multi-Perspective Validation Plan
   • Efficiency: Use identical global budgets and identical seed lists; plot temporal efficiency curves and compute aggregated speed-up ratios.
   • Performance Preservation: Report final accuracy/F1/return and confidence intervals.
   • Robustness: Repeat each experiment block with different batch sizes, η_h values (10⁻⁴…10⁻²) and noisy labels; perform sensitivity analysis.
   • Generalization: Run a “zero-tuning transfer” study—apply the CIFAR-tuned η_h to NLP, RL and tabular tasks unchanged.
   • Ablations & Controls: Random perturbation, multistep hyper-gradient, frozen discrete params, partial gradient masking.
   • Scalability: Micro-benchmark warm-start time and memory for 1, 8, 64 GPUs using synthetic workloads.

7. Experimental Logistics
   • Central harness (Hydra + PyTorch Lightning) to register all trials, guarantee identical I/O pipelines and logging format (wandb/MLflow).
   • Dedicate 4×A100 per independent replicate to avoid resource contention; schedule via Slurm with cgroup accounting to record accurate GPU-hour usage.
   • Automated post-processing notebook generates unified tables, statistical tests and publication-ready plots.

8. Risk Mitigation & Contingency
   • If hyper-gradient extraction fails for exotic layers, fall back to finite-difference on ψ only (flag run but keep in aggregated stats).
   • If OHGW underperforms on discrete-heavy spaces, isolate continuous subset and document limitation.

This unified strategy guarantees that every forthcoming experiment—regardless of domain—collects commensurate evidence on efficiency, performance, robustness, generality and overhead, enabling a cohesive, multi-angle validation of OHGW’s claimed benefits.



# Reference Information from Previous Iteration


Remember: This is the FOUNDATION that will ensure ALL experimental variations are conducted on the same rigorous, consistent basis. Focus on creating robust base logic with strategic placeholders for dataset/model specifics.
Output:
{
    "train_py": "import argparse\nimport json\nimport os\nimport sys\nimport time\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import Dict, Any\n\nimport torch\nimport torch.nn.functional as F\nfrom torch import nn, optim\nfrom torch.utils.data import DataLoader\nfrom tqdm import tqdm\n\n# Local imports (absolute so that ``python -m src.train`` works regardless of CWD)\nfrom src.preprocess import get_data_module\nfrom src.model import get_model\n\n\n######################################################################\n# --------------------  UTILITY FUNCTIONS -------------------------- #\n######################################################################\n\ndef set_random_seed(seed: int):\n    import random, numpy as np\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False\n\n\ndef compute_loss(model: nn.Module, outputs: torch.Tensor, targets: torch.Tensor,\n                 hyper_params: Dict[str, torch.Tensor]):\n    \"\"\"Cross-entropy + L2 regularisation weighted by differentiable weight-decay.\"\"\"\n    ce = F.cross_entropy(outputs, targets)\n    l2 = torch.tensor(0.0, device=outputs.device)\n    for p in model.parameters():\n        l2 = l2 + p.pow(2).sum()\n    return ce + hyper_params[\"weight_decay\"] * l2\n\n\ndef apply_ohgw_step(model: nn.Module,\n                    batch: Any,\n                    hyper_params: Dict[str, torch.Tensor],\n                    eta_h: float,\n                    device: torch.device):\n    \"\"\"One-Shot Hyper-Gradient Warm-Start as described in the paper.\n\n    This implementation keeps the compute graph for a single mini-batch,\n    differentiates w.r.t *continuous* hyper-parameters (here only weight-decay\n    for demonstration), and performs an in-place update *without* unrolling.\n    \"\"\"\n    model.train()\n    inputs, targets = batch\n    inputs, targets = inputs.to(device), targets.to(device)\n\n    # Forward & backward retaining graph for hyper-gradient computation\n    outputs = model(inputs)\n    loss = compute_loss(model, outputs, targets, hyper_params)\n\n    grads = torch.autograd.grad(loss, list(hyper_params.values()), retain_graph=False)\n\n    # Cheap one-shot hyper-step (no higher-order terms)\n    with torch.no_grad():\n        for name, g in zip(hyper_params.keys(), grads):\n            hyper_params[name].sub_(eta_h * g)\n\n    # NOTE: We *do not* step the model parameters here – only hyper-params.\n\n\n######################################################################\n# --------------------  TRAINING LOOP ------------------------------ #\n######################################################################\n\ndef train_single_run(run_config: Dict[str, Any], results_dir: Path):\n    run_id = run_config.get(\"run_id\", \"run\")\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n    set_random_seed(run_config.get(\"seed\", 42))\n\n    # ---------------- DATA ----------------\n    data_module = get_data_module(run_config[\"dataset\"])\n    train_loader: DataLoader = data_module.train_dataloader()\n    val_loader: DataLoader = data_module.val_dataloader()\n\n    # --------------- MODEL ---------------\n    model: nn.Module = get_model(run_config[\"model\"]).to(device)\n\n    # --------------- HYPERPARAMETERS ----------------\n    training_cfg = run_config[\"training\"]\n    batch_size = training_cfg.get(\"batch_size\", 128)\n    epochs = training_cfg.get(\"epochs\", 10)\n    base_lr = training_cfg.get(\"learning_rate\", 1e-2)\n    weight_decay_value = training_cfg.get(\"weight_decay\", 1e-4)\n    momentum = training_cfg.get(\"momentum\", 0.9)\n    eta_h = training_cfg.get(\"eta_h\", 1e-3)\n    use_ohgw = training_cfg.get(\"use_ohgw\", False)\n\n    # Differentiable weight-decay hyper-parameter\n    hyper_params = {\n        \"weight_decay\": torch.tensor(float(weight_decay_value), device=device, requires_grad=True)\n    }\n\n    optimizer = optim.SGD(model.parameters(), lr=base_lr, momentum=momentum)\n\n    start_time_wall = time.time()\n    epoch_metrics = []\n\n    # Optional OHGW warm-start *before* first epoch (on a single mini-batch)\n    if use_ohgw:\n        first_batch = next(iter(train_loader))\n        apply_ohgw_step(model, first_batch, hyper_params, eta_h, device)\n\n    criterion = lambda outputs, targets: compute_loss(model, outputs, targets, hyper_params)\n\n    for epoch in range(1, epochs + 1):\n        model.train()\n        running_loss = 0.0\n        correct = 0\n        total = 0\n        prog = tqdm(train_loader, desc=f\"[{run_id}] Epoch {epoch}/{epochs}\")\n        for inputs, targets in prog:\n            inputs, targets = inputs.to(device), targets.to(device)\n            optimizer.zero_grad()\n\n            outputs = model(inputs)\n            loss = criterion(outputs, targets)\n            loss.backward()\n            optimizer.step()\n\n            running_loss += loss.item() * inputs.size(0)\n            _, preds = outputs.max(1)\n            total += targets.size(0)\n            correct += preds.eq(targets).sum().item()\n\n            prog.set_postfix({\"loss\": f\"{loss.item():.3f}\"})\n\n        train_loss = running_loss / total\n        train_acc = correct / total\n\n        # Validation\n        model.eval()\n        val_loss, val_correct, val_total = 0.0, 0, 0\n        with torch.no_grad():\n            for inputs, targets in val_loader:\n                inputs, targets = inputs.to(device), targets.to(device)\n                outputs = model(inputs)\n                loss = criterion(outputs, targets)\n                val_loss += loss.item() * inputs.size(0)\n                _, preds = outputs.max(1)\n                val_total += targets.size(0)\n                val_correct += preds.eq(targets).sum().item()\n        val_loss /= val_total\n        val_acc = val_correct / val_total\n\n        epoch_metrics.append({\n            \"epoch\": epoch,\n            \"train_loss\": train_loss,\n            \"train_acc\": train_acc,\n            \"val_loss\": val_loss,\n            \"val_acc\": val_acc,\n        })\n\n        print(json.dumps({\n            \"run_id\": run_id,\n            \"epoch\": epoch,\n            \"train_loss\": train_loss,\n            \"train_acc\": train_acc,\n            \"val_loss\": val_loss,\n            \"val_acc\": val_acc,\n        }))\n\n    total_time = time.time() - start_time_wall\n\n    final_metrics = {\n        \"run_id\": run_id,\n        \"final_val_loss\": epoch_metrics[-1][\"val_loss\"],\n        \"final_val_accuracy\": epoch_metrics[-1][\"val_acc\"],\n        \"epochs\": epochs,\n        \"total_time_seconds\": total_time,\n        \"hyper_params\": {k: float(v.detach().cpu()) for k, v in hyper_params.items()},\n        \"config\": run_config,\n        \"timestamp\": datetime.utcnow().isoformat()\n    }\n\n    # Persist results\n    run_dir = results_dir / run_id\n    run_dir.mkdir(parents=True, exist_ok=True)\n    with open(run_dir / \"results.json\", \"w\") as f:\n        json.dump({\n            \"epoch_metrics\": epoch_metrics,\n            \"final\": final_metrics\n        }, f, indent=2)\n\n    # Also print the final summary to stdout (must be JSON)\n    print(json.dumps(final_metrics))\n\n\n######################################################################\n# --------------------  ENTRY POINT ------------------------------- #\n######################################################################\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Train a single experiment run.\")\n    parser.add_argument(\"--run-config\", type=str, required=True, help=\"Path to the YAML config for this run.\")\n    parser.add_argument(\"--results-dir\", type=str, required=True, help=\"Directory where results will be saved.\")\n    parser.add_argument(\"--run-id\", type=str, required=True, help=\"Unique identifier for this run (for folder names).\")\n    args = parser.parse_args()\n\n    import yaml\n\n    with open(args.run_config, \"r\") as f:\n        run_cfg = yaml.safe_load(f)\n\n    train_single_run(run_cfg, Path(args.results_dir))\n",
    "evaluate_py": "import argparse\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import List, Dict, Any\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\nFIGURE_DPI = 150  # High-dpi for publication quality when saved as PDF.\n\n\n######################################################################\n# --------------------  METRIC AGGREGATION ------------------------- #\n######################################################################\n\ndef load_results(results_dir: Path) -> List[Dict[str, Any]]:\n    out = []\n    for run_path in results_dir.iterdir():\n        if not run_path.is_dir():\n            continue\n        res_file = run_path / \"results.json\"\n        if res_file.exists():\n            with open(res_file, \"r\") as f:\n                data = json.load(f)[\"final\"]\n            out.append(data)\n    return out\n\n\n######################################################################\n# --------------------  VISUALISATIONS ----------------------------- #\n######################################################################\n\ndef bar_plot(df: pd.DataFrame, metric: str, fname: str, ylabel: str):\n    plt.figure(figsize=(8, 4))\n    ax = sns.barplot(x=\"run_id\", y=metric, data=df, palette=\"Set2\")\n    for p in ax.patches:\n        height = p.get_height()\n        ax.annotate(f\"{height:.3f}\", (p.get_x() + p.get_width() / 2., height),\n                    ha='center', va='bottom', fontsize=9)\n    ax.set_ylabel(ylabel)\n    ax.set_xlabel(\"Run ID\")\n    ax.set_title(f\"{ylabel} by Run\")\n    plt.tight_layout()\n    plt.savefig(fname, dpi=FIGURE_DPI, bbox_inches=\"tight\")\n    plt.close()\n\n\ndef generate_figures(results: List[Dict[str, Any]], results_dir: Path):\n    df = pd.DataFrame(results)\n\n    # 1. Final validation accuracy\n    bar_plot(df, \"final_val_accuracy\", str(results_dir / \"accuracy.pdf\"), \"Final Validation Accuracy\")\n\n    # 2. Total training time\n    bar_plot(df, \"total_time_seconds\", str(results_dir / \"training_time.pdf\"), \"Total Training Time (s)\")\n\n    # Print figure names as required\n    figure_names = [\n        \"accuracy.pdf\",\n        \"training_time.pdf\",\n    ]\n    print(json.dumps({\"generated_figures\": figure_names}))\n\n\n######################################################################\n# --------------------  MAIN ENTRY POINT --------------------------- #\n######################################################################\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Evaluate and compare experiment runs.\")\n    parser.add_argument(\"--results-dir\", type=str, required=True, help=\"Directory containing run sub-folders with results.json files.\")\n    args = parser.parse_args()\n\n    results_dir = Path(args.results_dir)\n    results = load_results(results_dir)\n    if not results:\n        raise RuntimeError(f\"No results found in {results_dir}.\")\n\n    # Detailed description before numerical data\n    description = (\n        \"Evaluation Summary: The figures illustrate (1) final validation accuracy and \"\n        \"(2) total training time for every run variation. All metrics are extracted \"\n        \"from each run's results.json.  Higher accuracy and lower training time are \"\n        \"desirable.  Error bars are omitted here because each run is a single trial \"\n        \"in smoke/full pipeline; full statistical aggregation happens in the paper's \"\n        \"main experiments.\"\n    )\n    print(description)\n\n    # Output all numerical data\n    print(json.dumps({\"all_results\": results}, indent=2))\n\n    # Generate & save figures\n    generate_figures(results, results_dir)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "preprocess_py": "\"\"\"Common data-loading & preprocessing interface.\n\nFor the *foundation* we supply only a dummy in-memory classification dataset that\nruns instantaneously and fulfils the smoke-test requirement.  REAL datasets will\nreplace the placeholders in a later derivation step via the clear hooks defined\nbelow.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\nfrom pathlib import Path\nfrom typing import Dict, Any, Tuple\n\nimport torch\nfrom torch.utils.data import Dataset, DataLoader, random_split\n\n\nclass DummyClassificationDataset(Dataset):\n    \"\"\"Synthetic images (3×32×32) + random labels for smoke tests.\"\"\"\n\n    def __init__(self, num_samples: int, num_classes: int = 10, input_shape=(3, 32, 32)):\n        self.x = torch.randn(num_samples, *input_shape)\n        self.y = torch.randint(0, num_classes, (num_samples,))\n\n    def __len__(self):\n        return len(self.x)\n\n    def __getitem__(self, idx):\n        return self.x[idx], self.y[idx]\n\n\nclass BaseDataModule:\n    def train_dataloader(self) -> DataLoader:\n        raise NotImplementedError\n\n    def val_dataloader(self) -> DataLoader:\n        raise NotImplementedError\n\n    def test_dataloader(self) -> DataLoader:\n        raise NotImplementedError\n\n\nclass DummyDataModule(BaseDataModule):\n    def __init__(self, cfg: Dict[str, Any]):\n        self.batch_size = cfg.get(\"batch_size\", 32)\n        num_samples = cfg.get(\"num_samples\", 1024)\n        num_classes = cfg.get(\"num_classes\", 10)\n        input_shape = tuple(cfg.get(\"input_shape\", [3, 32, 32]))\n\n        full_dataset = DummyClassificationDataset(num_samples, num_classes, input_shape)\n        val_size = math.ceil(0.2 * num_samples)\n        train_size = num_samples - val_size\n        self.train_set, self.val_set = random_split(full_dataset, [train_size, val_size])\n\n    def train_dataloader(self):\n        return DataLoader(self.train_set, batch_size=self.batch_size, shuffle=True)\n\n    def val_dataloader(self):\n        return DataLoader(self.val_set, batch_size=self.batch_size, shuffle=False)\n\n    def test_dataloader(self):\n        return DataLoader(self.val_set, batch_size=self.batch_size, shuffle=False)\n\n\n# ------------------------------------------------------------------\n#  PLACEHOLDER HOOKS – To be replaced with REAL dataset logic later\n# ------------------------------------------------------------------\n\n_DATASET_REGISTRY = {\n    \"DummyClassification\": DummyDataModule,\n    # PLACEHOLDER: Real datasets will be registered here, e.g. \"CIFAR10\": CIFAR10DataModule\n}\n\n\ndef get_data_module(dataset_cfg: Dict[str, Any]) -> BaseDataModule:\n    \"\"\"Factory that returns the appropriate DataModule based on the YAML config.\n\n    Parameters\n    ----------\n    dataset_cfg : Dict[str, Any]\n        Sub-dict under ``dataset`` key from the run configuration YAML. Must\n        include the field ``name`` which is looked up in the registry above.\n    \"\"\"\n    name = dataset_cfg.get(\"name\")\n    if name not in _DATASET_REGISTRY:\n        available = \", \".join(_DATASET_REGISTRY.keys())\n        raise ValueError(f\"Unknown dataset '{name}'. Available: {available}\")\n    return _DATASET_REGISTRY[name](dataset_cfg)\n",
    "model_py": "\"\"\"Model architecture definitions.\n\nThis module contains both baseline architectures (simple CNN/MLP) and the\nabstract factory for retrieving them. *Real* research models (ResNet-20,\nTransformer-LM, etc.) will be plugged in during the next derivation step by\nregistering them in ``_MODEL_REGISTRY``.\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Dict, Any\n\nimport torch\nfrom torch import nn\n\n\nclass BaselineCNN(nn.Module):\n    \"\"\"Minimal CNN suitable for 32×32 images (e.g. CIFAR-10) – fast for smoke tests.\"\"\"\n\n    def __init__(self, num_classes: int = 10):\n        super().__init__()\n        self.features = nn.Sequential(\n            nn.Conv2d(3, 32, 3, padding=1),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(2),\n            nn.Conv2d(32, 64, 3, padding=1),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(2),\n        )\n        self.classifier = nn.Sequential(\n            nn.Flatten(),\n            nn.Linear(64 * 8 * 8, 128),\n            nn.ReLU(inplace=True),\n            nn.Linear(128, num_classes),\n        )\n\n    def forward(self, x):\n        x = self.features(x)\n        x = self.classifier(x)\n        return x\n\n\n# ------------------------------------------------------------------\n#  PLACEHOLDER HOOKS – More complex models plugged in later\n# ------------------------------------------------------------------\n\n_MODEL_REGISTRY = {\n    \"BaselineCNN\": BaselineCNN,\n    # PLACEHOLDER: e.g. \"ResNet20\": ResNet20, \"TransformerLM\": TransformerLM, ...\n}\n\n\ndef get_model(model_cfg: Dict[str, Any]) -> nn.Module:\n    name = model_cfg.get(\"name\")\n    if name not in _MODEL_REGISTRY:\n        available = \", \".join(_MODEL_REGISTRY.keys())\n        raise ValueError(f\"Unknown model '{name}'. Available: {available}\")\n    cls = _MODEL_REGISTRY[name]\n    kwargs = {k: v for k, v in model_cfg.items() if k != \"name\"}\n    return cls(**kwargs)\n",
    "main_py": "\"\"\"Main orchestrator that sequentially executes all run variations defined in\nconfig/*.yaml.  It handles process spawning, log redirection (tee), and final\ncross-run evaluation.\n\"\"\"\n\nimport argparse\nimport os\nimport subprocess\nimport sys\nfrom pathlib import Path\nfrom typing import List\n\nimport yaml\n\nTHIS_DIR = Path(__file__).resolve().parent\nPROJECT_ROOT = THIS_DIR.parent\nCONFIG_DIR = PROJECT_ROOT / \"config\"\n\n\ndef tee_subprocess(cmd: List[str], stdout_path: Path, stderr_path: Path):\n    \"\"\"Run *cmd* while tee'ing stdout/stderr both to console and to files.\"\"\"\n    with open(stdout_path, \"w\") as out_f, open(stderr_path, \"w\") as err_f:\n        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n        assert proc.stdout and proc.stderr  # for typing\n        for line in proc.stdout:\n            sys.stdout.write(line)\n            out_f.write(line)\n        for line in proc.stderr:\n            sys.stderr.write(line)\n            err_f.write(line)\n        proc.wait()\n        if proc.returncode != 0:\n            raise RuntimeError(f\"Subprocess {cmd} failed with code {proc.returncode}\")\n\n\ndef run_all(config_path: Path, results_dir: Path):\n    with open(config_path, \"r\") as f:\n        config = yaml.safe_load(f)\n\n    runs = config.get(\"runs\", [])\n    if not runs:\n        raise ValueError(f\"No runs defined in {config_path}\")\n\n    for run_cfg in runs:\n        run_id = run_cfg[\"run_id\"]\n        run_dir = results_dir / run_id\n        run_dir.mkdir(parents=True, exist_ok=True)\n        run_cfg_path = run_dir / \"run_config.yaml\"\n        with open(run_cfg_path, \"w\") as f:\n            yaml.safe_dump(run_cfg, f)\n\n        stdout_log = run_dir / \"stdout.log\"\n        stderr_log = run_dir / \"stderr.log\"\n\n        cmd = [\n            sys.executable, \"-m\", \"src.train\",\n            \"--run-config\", str(run_cfg_path),\n            \"--results-dir\", str(results_dir),\n            \"--run-id\", run_id,\n        ]\n        print(f\"\\n==== Launching run '{run_id}' ====\")\n        tee_subprocess(cmd, stdout_log, stderr_log)\n\n    # After all runs are done, aggregate & evaluate\n    eval_stdout = results_dir / \"evaluate_stdout.log\"\n    eval_stderr = results_dir / \"evaluate_stderr.log\"\n    cmd = [sys.executable, \"-m\", \"src.evaluate\", \"--results-dir\", str(results_dir)]\n    print(\"\\n==== Running evaluation across all runs ====\")\n    tee_subprocess(cmd, eval_stdout, eval_stderr)\n\n\n######################################################################\n# --------------------  ENTRY POINT ------------------------------- #\n######################################################################\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"OHGW experiment runner\")\n    parser.add_argument(\"--smoke-test\", action=\"store_true\", help=\"Run the light-weight smoke-test config\")\n    parser.add_argument(\"--full-experiment\", action=\"store_true\", help=\"Run the full experiment config\")\n    parser.add_argument(\"--results-dir\", type=str, required=True, help=\"Directory to save all outputs (figures, logs, metrics)\")\n    args = parser.parse_args()\n\n    if args.smoke_test and args.full_experiment:\n        parser.error(\"Choose either --smoke-test or --full-experiment, not both.\")\n\n    if not args.smoke_test and not args.full_experiment:\n        parser.error(\"Must specify one of --smoke-test or --full-experiment.\")\n\n    if args.smoke_test:\n        config_file = CONFIG_DIR / \"smoke_test.yaml\"\n    else:\n        config_file = CONFIG_DIR / \"full_experiment.yaml\"\n\n    results_directory = Path(args.results_dir).resolve()\n    results_directory.mkdir(parents=True, exist_ok=True)\n\n    run_all(config_file, results_directory)\n",
    "pyproject_toml": "[project]\nname = \"ohgw_experiments\"\nversion = \"0.1.0\"\ndescription = \"Common core foundation for One-Shot Hyper-Gradient Warm-Starts experiments\"\nrequires-python = \">=3.9\"\ndependencies = [\n    \"torch>=2.0.0\",\n    \"pyyaml>=6.0\",\n    \"tqdm>=4.66\",\n    \"matplotlib>=3.8\",\n    \"seaborn>=0.13\",\n    \"pandas>=2.0\",\n]\n\n[tool.setuptools]\npackage-dir = {\"\" = \".\"}\npackages = [\"src\"]\n",
    "smoke_test_yaml": "# Lightweight smoke-test configuration that runs on a dummy dataset for CI.\n\nruns:\n  - run_id: \"baseline_dummy\"\n    dataset:\n      name: \"DummyClassification\"\n      num_classes: 10\n      input_shape: [3, 32, 32]\n      num_samples: 512\n      batch_size: 32\n    model:\n      name: \"BaselineCNN\"\n      num_classes: 10\n    training:\n      epochs: 2\n      batch_size: 32\n      learning_rate: 0.01\n      weight_decay: 0.0005\n      eta_h: 0.001\n      use_ohgw: false\n\n  - run_id: \"ohgw_dummy\"\n    dataset:\n      name: \"DummyClassification\"\n      num_classes: 10\n      input_shape: [3, 32, 32]\n      num_samples: 512\n      batch_size: 32\n    model:\n      name: \"BaselineCNN\"\n      num_classes: 10\n    training:\n      epochs: 2\n      batch_size: 32\n      learning_rate: 0.01\n      weight_decay: 0.0005\n      eta_h: 0.001\n      use_ohgw: true\n",
    "full_experiment_yaml": "# Placeholder full-scale experiment; will be populated in future derivation step.\nruns:\n  - run_id: RUN_ID_PLACEHOLDER\n    dataset: DATASET_PLACEHOLDER  # PLACEHOLDER: Will be replaced with specific dataset config\n    model: MODEL_PLACEHOLDER      # PLACEHOLDER: Will be replaced with specific model config\n    training: SPECIFIC_CONFIG_PLACEHOLDER # PLACEHOLDER: Will be replaced by concrete hyper-params\n"
}
