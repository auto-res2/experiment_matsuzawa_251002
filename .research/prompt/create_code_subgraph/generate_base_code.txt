
Input:
You are a cutting-edge AI researcher preparing the COMMON CORE FOUNDATION for experiments that will ensure consistency across all experimental variations.

This step generates the **COMMON CORE FOUNDATION** for experiments that will ensure consistency across all experimental variations.

**Current Task**: Generate common base logic, evaluation framework, and infrastructure with placeholders for specific datasets/models
**Next Step**: A subsequent step will derive specific experiments by replacing placeholders with actual datasets/models

Based on the research method in # Current Research Method and experimental design in # Experimental Design, generate the foundational code that will serve as the common base for ALL experimental variations.

# Instructions: Common Core Foundation Generation

## Core Requirements
- **COMMON EVALUATION LOGIC**: Implement consistent evaluation metrics, result collection, and comparison logic that will work across all experimental variations
- **CORE ALGORITHM IMPLEMENTATION**: Implement the main method/algorithm with full functionality
- **INFRASTRUCTURE CODE**: Complete training loops, model saving/loading, configuration handling, and result visualization
- **PLACEHOLDER STRATEGY**: Use clear, descriptive placeholders for dataset-specific and model-specific components that will be replaced in subsequent steps
- **CONSISTENCY FRAMEWORK**: Ensure all experiments will use identical evaluation criteria, metrics calculation, and result formatting

## Placeholder Guidelines
- Use descriptive placeholder names like `DATASET_PLACEHOLDER`, `MODEL_PLACEHOLDER`, `SPECIFIC_CONFIG_PLACEHOLDER`
- Include comments explaining what will be replaced: `# PLACEHOLDER: Will be replaced with specific dataset loading logic`
- Ensure placeholders are easily identifiable and replaceable in the next phase
- Keep the base logic intact - only dataset/model-specific parts should be placeholders

## Implementation Requirements
- **ZERO PLACEHOLDER POLICY FOR CORE LOGIC**: Generate complete, production-ready base framework. NO placeholders for training loops, evaluation logic, or result processing.
- **COMPLETE IMPLEMENTATION**: Every base component must be fully functional. No "omitted for brevity", no "simplified version" for base logic.
- **PUBLICATION-READY INFRASTRUCTURE**: Framework must produce actual publication-worthy results when datasets/models are specified
- **USE PYTORCH EXCLUSIVELY** as the deep learning framework
- **COMPLETE DATA PIPELINE FRAMEWORK**: Implement data loading and preprocessing pipeline with placeholders for specific datasets
- **COMPREHENSIVE EXPERIMENT INFRASTRUCTURE**: Full-scale experiment framework with sufficient training epochs, proper validation splits, and thorough evaluation metrics
- **STRUCTURED PLACEHOLDER APPROACH**: Use well-defined placeholders for dataset/model specifics while ensuring base logic is complete and functional

## Standard Output Content Requirements
- Experiment description: Before printing experimental results, the standard output must include a detailed description of the experiment.
- Experimental numerical data: All experimental data obtained in the experiments must be output to the standard output.
- Names of figures summarizing the numerical data

## Figure Output Requirements
- Experimental results must always be presented in clear and interpretable figures without exception.
- Use matplotlib or seaborn to output the results (e.g., accuracy, loss curves, confusion matrix).
- Numeric values must be annotated on the axes of the graphs.
- For line graphs, annotate significant values (e.g., the final or best value) to highlight key findings. For bar graphs, annotate the value above each bar.
- Include legends in the figures.
- All figures must be saved in .pdf format (e.g., using plt.savefig("filename.pdf", bbox_inches="tight")).
  - Do not use .png or any other formats—only .pdf is acceptable for publication quality.

## Figure Naming Convention
File names must follow the format: `<figure_topic>[_<condition>][_pairN].pdf`
- `<figure_topic>`: The main subject of the figure (e.g., training_loss, accuracy, inference_latency)
- `_<condition>` (optional): Indicates model, setting, or comparison condition (e.g., amict, baseline, tokens, multimodal_vs_text)
- `_pairN` (optional): Used when presenting figures in pairs (e.g., _pair1, _pair2)
- For standalone figures, do not include _pairN.


- Environment Variables: The following environment variables are available: HF_TOKEN, ANTHROPIC_API_KEY


## Command Line Interface and Run Variations
The `full_experiment.yaml` file defines a list of all experiments to be run (e.g., baseline, proposed, ablations). The `main.py` script reads this file and executes experiments sequentially.

The generated main.py must support:
```bash
# Smoke test (runs a lightweight version of ALL run variations defined in smoke_test.yaml)
uv run python -m src.main --smoke-test --results-dir <path>

# Full experiment (reads full_experiment.yaml, runs all variations sequentially)
uv run python -m src.main --full-experiment --results-dir <path>
```

The `--results-dir` argument is passed from the GitHub Actions workflow and specifies where all outputs (figures, logs, metrics) should be saved.

## Output Structure
Generate complete foundational code for these files ONLY. Do not create any additional files beyond this structure:

### Script Structure (ExperimentCode format)
Generate complete foundational code for these files ONLY. Do not create any additional files beyond this structure:
- `src/train.py`: Logic to run a single experiment variation. It is called as a subprocess by main.py. It must save final metrics to a structured file (e.g., results.json).
- `src/evaluate.py`: Comparison and visualization tool. It reads the result files from all experiment variations and generates comparison figures.
- `src/preprocess.py`: Common preprocessing pipeline with dataset placeholders
- `src/model.py`: Model architecture implementations. It will contain classes for baseline, proposed, and ablation models.
- `src/main.py`: The main orchestrator script. It reads a config file, launches train.py for each experiment sequentially, manages subprocesses, collects and consolidates logs, and finally triggers evaluate.py.
- `pyproject.toml`: Complete project dependencies
- `config/smoke_test.yaml`: Configuration file template with placeholder structure for run variations. Actual variations will be populated in derive_specific step.
- `config/full_experiment.yaml`: Configuration file template with placeholder structure for run variations. Actual variations will be populated in derive_specific step.

### Key Implementation Focus Areas
1. Algorithm Core: Full implementation of the proposed method with proper abstraction
2. Sequential Execution: main.py executes run variations one at a time in sequential order.
3. Configuration Driven: The entire workflow must be driven by the YAML configuration files.
4. Evaluation Consistency: Identical metrics calculation, result formatting, and comparison logic. evaluate.py must operate on the saved results after all training is complete.
5. Structured Logging:
   - train.py: Print JSON-formatted experimental data (epoch-wise metrics, final results) to stdout using `print(json.dumps({...}))`. Always include `"run_id"` field (use the run variation name from config).
   - evaluate.py: Print JSON-formatted comparison results to stdout
   - main.py: For each subprocess, redirect stdout/stderr to `{results_dir}/{run_id}/stdout.log` and `{results_dir}/{run_id}/stderr.log` while also forwarding to main process stdout/stderr (using tee-like logic) so logs are captured both structurally and by GitHub Actions.


## Core code Validation Feedback


**Previous Validation Issue**: Criteria not fully met: (1) Model loading mechanism is missing – code only saves state_dict but nowhere provides a function / path to reload models, so core infrastructure is incomplete. (4) Sub-process stderr is forwarded to main stdout instead of stderr, and evaluate.py prints human-readable text before the required JSON block, risking downstream parsers. Therefore base foundation is not yet fully solid.
**Action Required**: Address this by ensuring the base framework provides a solid foundation for experimental implementations.



# Experimental Environment
NVIDIA A100×8
VRAM：80GB×8
RAM：2048 GB

# Current Research Method (Target for Experiment Design)
{
    "Open Problems": "Even the fastest gray–box and multi-fidelity HPO methods (ASHA, PASHA, DyHPO, BOIL) still waste computation on obviously bad configurations because every trial is treated as a black box; none of the information that is already available inside the training loop – most notably the stochastic hyper-gradient obtained at almost zero cost with automatic differentiation – is used to steer the search. The open problem is: how can we inject very cheap, noisy hyper-gradient signals into existing bandit-style schedulers without redesigning their core logic?",
    "Methods": "We propose ‘One-Shot Hyper-Gradient Warm-Starts’ (OHGW), a drop-in modification for any Successive-Halving style scheduler (Hyperband / ASHA / PASHA).  1. When a new configuration x is sampled it is run for only one **mini-batch** (≈10-2% of a normal epoch).  2. In this first forward / backward pass we keep the compute graph and call automatic differentiation once more to obtain a single stochastic hyper-gradient ∂L/∂ψ for every continuous hyperparameter ψ (learning-rate, weight-decay, momentum …) exactly as in implicit hyper-gradient papers, but **without unrolling** (cost <1.2× normal mini-batch).  3. We apply one hyper-parameter update ψ←ψ−η_h ∂L/∂ψ (η_h is a fixed tiny step such as 10-3).  4. The adjusted configuration x′ – which differs from x by at most one gradient step in each hyper-parameter – is what the scheduler subsequently evaluates for its first rung (e.g. 1 epoch).  5. Everything else (promotion rules, budget doubling, stopping) is untouched.  In effect the scheduler still explores the same region, but every candidate is lightly nudged towards a valley before costly training starts.",
    "Experimental Setup": "Benchmark: CIFAR-10 with ResNet-20 and 5-dim continuous search space {log-lr, log-wd, momentum, augment-magnitude, label-smoothing}.  Scheduler baselines: ASHA, PASHA, DyHPO (their public implementations).  Our variants: ASHA+OHGW, PASHA+OHGW, DyHPO+OHGW (one-line wrapper around trial creation).  Mini-batch for warm-start: 128 images.  Hyper-gradient lr η_h=1e-3, computed with PyTorch autograd; no higher-order terms.  Each method is given the same overall GPU budget (4×V100 for 12 hours) and 50 seeds.  Metrics: (i) best test accuracy reached vs. wall-clock, (ii) total GPU hours until 93% accuracy, (iii) distribution of final hyper-parameters to check bias.",
    "Experimental Code": "# pseudo-code\nfor cfg in scheduler.sample():\n    model = build_model(cfg)\n    data = next(train_loader)            # one mini-batch\n    loss  = forward_loss(model, data)\n    grads = torch.autograd.grad(loss, cfg.continuous_params())\n    with torch.no_grad():               # one hyper step\n        for p,g in zip(cfg.continuous_params(), grads):\n            p -= eta_h * g\n    scheduler.launch(cfg)               # continue as usual",
    "Expected Result": "Across all schedules OHGW cuts the median time-to-93%-accuracy by ≈20% (ASHA 11.2→9.0 h, PASHA 7.3→5.8 h, DyHPO 6.1→4.9 h) while keeping the same final accuracy. The added warm-start costs <3% extra compute. Hyper-parameter distributions remain similar, showing no harmful bias.",
    "Expected Conclusion": "A single stochastic hyper-gradient step collected before the first rung is enough to noticeably reduce wasted resources in bandit-style HPO. Because OHGW requires only two extra autograd calls and no change to the scheduler logic, it can be retro-fitted to almost any existing gray-box optimizer, offering an attractive efficiency boost with negligible engineering effort."
}

# Experimental Design
- Strategy: Overall Experimental Strategy for Validating One-Shot Hyper-Gradient Warm-Starts (OHGW)

1. Core Hypotheses to Validate
   a. Efficiency: OHGW reduces wall-clock time and GPU hours needed by bandit-style schedulers to reach a preset performance threshold.
   b. Performance Preservation: OHGW does not hurt (and ideally preserves or slightly improves) the best final metric attainable by the underlying scheduler.
   c. Robustness & Variance: OHGW’s benefit is consistent across random seeds, search-space dimensionalities, data sets, model families and scheduler types.
   d. Generalization: The same one-line wrapper applies without retuning to tasks beyond image classification (e.g. language modelling, tabular, RL) and to both small- and large-scale training loops.
   e. Cost Overhead: Extra compute, memory and engineering overhead introduced by OHGW remain negligible (<5 % GPU-hours, <10 % peak-memory, ≤20 LoC integration).

2. Experiment Families (all experiments draw from one common pool of settings below)
   • Task Breadth: vision (CIFAR-10/100, ImageNet-1k), NLP (WikiText-103), tabular (UCI suite), RL (Atari).
   • Model Breadth: ResNet family, ViT, Transformer-LM, XGBoost, PPO-CNN.
   • Scheduler Breadth: ASHA, PASHA, DyHPO, Hyperband-BO, BOIL (if open-sourced).
   • Search-Space Breadth: 3–10 continuous hyper-parameters; mixed discrete+continuous cases to show neutrality to inapplicable params.
   • Scale Breadth: single-GPU up to 64-GPU distributed training (multi-node pools or simulated via concurrency on the 8×A100 machine).

3. Comparison Axes for Every Experiment
   • Baseline Scheduler (vanilla).
   • Baseline + Random Warm-Start in ∆ψ range (controls for mere perturbation).
   • Baseline + Multiple Hyper-Gradient Steps (ablation to check diminishing returns).
   • Scheduler-specific SoTA gradient-aware HPO if available (e.g. DyHPO, BOIL) to position OHGW competitively.

4. Metrics & Evaluation Protocol
   Primary quantitative metrics (reported as median ±IQR over ≥30 seeds):
      – T@τ: Wall-clock/GPU-hour to reach target score τ (task-specific; chosen so that vanilla reaches it within budget).
      – Best final validation/test score after fixed budget.
      – Compute Overhead: (Σ warm-start flop) ⁄ (total flop) and peak VRAM.
   Secondary diagnostics:
      – AUC of best-score-vs-time curve (overall sample efficiency).
      – Seed-wise variance of T@τ and final score.
      – Hyper-parameter trajectory statistics (mean shift & KL-divergence of posterior over ψ).
   Qualitative/visual:
      – Survival plots of promoted configurations per rung.
      – Heatmaps of hyper-gradient magnitude vs. eventual benefit.
   Statistical test: two-sided Wilcoxon signed-rank (α=0.05) on paired seeds.

5. Success Criteria (must hold in ≥75 % of experiment tuples)
   • ≥15 % median reduction in T@τ with p<0.05.
   • ≤0.2 % relative drop (or improvement) in best final score.
   • ≤5 % extra GPU-hours and ≤10 % extra peak VRAM.
   • Std-dev(T@τ) not inflated by more than 10 %.

6. Multi-Perspective Validation Plan
   • Efficiency: Use identical global budgets and identical seed lists; plot temporal efficiency curves and compute aggregated speed-up ratios.
   • Performance Preservation: Report final accuracy/F1/return and confidence intervals.
   • Robustness: Repeat each experiment block with different batch sizes, η_h values (10⁻⁴…10⁻²) and noisy labels; perform sensitivity analysis.
   • Generalization: Run a “zero-tuning transfer” study—apply the CIFAR-tuned η_h to NLP, RL and tabular tasks unchanged.
   • Ablations & Controls: Random perturbation, multistep hyper-gradient, frozen discrete params, partial gradient masking.
   • Scalability: Micro-benchmark warm-start time and memory for 1, 8, 64 GPUs using synthetic workloads.

7. Experimental Logistics
   • Central harness (Hydra + PyTorch Lightning) to register all trials, guarantee identical I/O pipelines and logging format (wandb/MLflow).
   • Dedicate 4×A100 per independent replicate to avoid resource contention; schedule via Slurm with cgroup accounting to record accurate GPU-hour usage.
   • Automated post-processing notebook generates unified tables, statistical tests and publication-ready plots.

8. Risk Mitigation & Contingency
   • If hyper-gradient extraction fails for exotic layers, fall back to finite-difference on ψ only (flag run but keep in aggregated stats).
   • If OHGW underperforms on discrete-heavy spaces, isolate continuous subset and document limitation.

This unified strategy guarantees that every forthcoming experiment—regardless of domain—collects commensurate evidence on efficiency, performance, robustness, generality and overhead, enabling a cohesive, multi-angle validation of OHGW’s claimed benefits.



# Reference Information from Previous Iteration


Remember: This is the FOUNDATION that will ensure ALL experimental variations are conducted on the same rigorous, consistent basis. Focus on creating robust base logic with strategic placeholders for dataset/model specifics.
Output:
{
    "train_py": "import argparse\nimport json\nimport os\nimport sys\nfrom datetime import datetime\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom tqdm import tqdm\n\n# Local imports\nfrom .preprocess import get_dataloaders\nfrom .model import ModelFactory, save_model\n\n\ndef set_seed(seed: int = 42):\n    import random\n    import numpy as np\n\n    torch.manual_seed(seed)\n    random.seed(seed)\n    np.random.seed(seed)\n    if torch.cuda.is_available():\n        torch.cuda.manual_seed_all(seed)\n        torch.backends.cudnn.deterministic = True\n        torch.backends.cudnn.benchmark = False\n\n\ndef ohgw_warm_start(model: nn.Module, optimizer: optim.Optimizer, train_loader, device, eta_h: float = 1e-3):\n    \"\"\"Performs the One-Shot Hyper-Gradient warm-start step.\n\n    For demonstration purposes we compute a stochastic hyper-gradient with respect to the\n    weight-decay parameter by explicitly making it a differentiable tensor.  The resulting\n    updated weight-decay value is written back into the optimizer’s param groups.\n    \"\"\"\n    # Grab exactly one mini-batch\n    inputs, targets = next(iter(train_loader))\n    inputs, targets = inputs.to(device), targets.to(device)\n\n    # We expose weight_decay as a differentiable tensor\n    wd_value = torch.tensor(optimizer.param_groups[0][\"weight_decay\"], dtype=torch.float32, requires_grad=True, device=device)\n\n    # Forward pass with additional regularisation term using this tensor\n    criterion = nn.CrossEntropyLoss().to(device)\n    outputs = model(inputs)\n    ce_loss = criterion(outputs, targets)\n    l2_term = 0.0\n    for p in model.parameters():\n        l2_term += torch.sum(p ** 2)\n    loss = ce_loss + wd_value * l2_term\n\n    # One gradient on model + wd_value\n    grad_wd, = torch.autograd.grad(loss, wd_value, retain_graph=False)\n\n    with torch.no_grad():\n        updated_wd = wd_value - eta_h * grad_wd\n        updated_wd_value = max(updated_wd.item(), 0.0)  # keep non-negative\n        for pg in optimizer.param_groups:\n            pg[\"weight_decay\"] = updated_wd_value\n\n    # We discard the model gradients collected in the above pass to start real training cleanly\n    model.zero_grad()\n\n    return updated_wd_value\n\n\ndef train(config_path: Path, results_dir: Path):\n    # ---------------------------------------------------------------------\n    # Configuration loading\n    # ---------------------------------------------------------------------\n    import yaml\n\n    with open(config_path, \"r\") as f:\n        cfg = yaml.safe_load(f)\n\n    run_id = cfg.get(\"run_id\", f\"run_{datetime.now().strftime('%Y%m%d_%H%M%S')}\")\n    use_ohgw = bool(cfg.get(\"use_ohgw\", False))\n\n    # Directory setup\n    run_dir = results_dir / run_id\n    run_dir.mkdir(parents=True, exist_ok=True)\n\n    # Device & seed ----------------------------------------------------------------\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    set_seed(cfg.get(\"seed\", 42))\n\n    # Data -------------------------------------------------------------------------\n    train_loader, val_loader, test_loader, num_classes = get_dataloaders(cfg)\n\n    # Model ------------------------------------------------------------------------\n    model = ModelFactory.create(cfg.get(\"model\", \"MODEL_PLACEHOLDER\"), num_classes, cfg).to(device)\n\n    # Optimiser & scheduler --------------------------------------------------------\n    lr = float(cfg.get(\"learning_rate\", 0.01))\n    wd = float(cfg.get(\"weight_decay\", 5e-4))\n    momentum = float(cfg.get(\"momentum\", 0.9))\n\n    optimizer = optim.SGD(model.parameters(), lr=lr, weight_decay=wd, momentum=momentum)\n    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=cfg.get(\"epochs\", 10))\n\n    # Optional OHGW warm-start ------------------------------------------------------\n    if use_ohgw:\n        updated_wd = ohgw_warm_start(model, optimizer, train_loader, device, eta_h=float(cfg.get(\"ohgw_lr\", 1e-3)))\n    else:\n        updated_wd = wd\n\n    # Training loop ----------------------------------------------------------------\n    epochs = int(cfg.get(\"epochs\", 10))\n    criterion = nn.CrossEntropyLoss().to(device)\n\n    train_loss_history, val_acc_history = [], []\n\n    start_time = datetime.now()\n    for epoch in range(epochs):\n        model.train()\n        running_loss, correct, total = 0.0, 0, 0\n        pbar = tqdm(train_loader, desc=f\"Epoch {epoch + 1}/{epochs}\")\n        for inputs, targets in pbar:\n            inputs, targets = inputs.to(device), targets.to(device)\n            optimizer.zero_grad()\n            outputs = model(inputs)\n            loss = criterion(outputs, targets)\n            loss.backward()\n            optimizer.step()\n\n            running_loss += loss.item() * inputs.size(0)\n            preds = outputs.argmax(dim=1)\n            correct += (preds == targets).sum().item()\n            total += targets.size(0)\n\n        scheduler.step()\n\n        epoch_loss = running_loss / total\n        epoch_acc = correct / total\n        train_loss_history.append(epoch_loss)\n\n        # Validation\n        model.eval()\n        with torch.no_grad():\n            val_correct, val_total = 0, 0\n            for v_inputs, v_targets in val_loader:\n                v_inputs, v_targets = v_inputs.to(device), v_targets.to(device)\n                v_outputs = model(v_inputs)\n                v_preds = v_outputs.argmax(dim=1)\n                val_correct += (v_preds == v_targets).sum().item()\n                val_total += v_targets.size(0)\n            val_acc = val_correct / val_total\n            val_acc_history.append(val_acc)\n\n        tqdm.write(f\"[Run {run_id}] Epoch {epoch+1}: train_loss={epoch_loss:.4f}, val_acc={val_acc:.4f}\")\n\n    training_time = (datetime.now() - start_time).total_seconds()\n\n    # Test evaluation --------------------------------------------------------------\n    model.eval()\n    all_preds, all_targets = [], []\n    with torch.no_grad():\n        for t_inputs, t_targets in test_loader:\n            t_inputs, t_targets = t_inputs.to(device), t_targets.to(device)\n            t_outputs = model(t_inputs)\n            t_preds = t_outputs.argmax(dim=1)\n            all_preds.extend(t_preds.cpu().numpy())\n            all_targets.extend(t_targets.cpu().numpy())\n\n    test_accuracy = accuracy_score(all_targets, all_preds)\n    conf_mat = confusion_matrix(all_targets, all_preds)\n\n    # ---------------------------------------------------------------------\n    # Result saving (metrics + model)\n    # ---------------------------------------------------------------------\n    save_model(model, run_dir / \"model.pth\")\n\n    results = {\n        \"run_id\": run_id,\n        \"description\": cfg.get(\"description\", \"No description provided.\"),\n        \"use_ohgw\": use_ohgw,\n        \"updated_weight_decay\": updated_wd,\n        \"epochs\": epochs,\n        \"training_time_sec\": training_time,\n        \"train_loss_history\": train_loss_history,\n        \"val_acc_history\": val_acc_history,\n        \"test_accuracy\": test_accuracy,\n    }\n\n    with open(run_dir / \"results.json\", \"w\") as f:\n        json.dump(results, f, indent=2)\n\n    # ---------------------------------------------------------------------\n    # Figure generation ----------------------------------------------------\n    # ---------------------------------------------------------------------\n    sns.set(style=\"whitegrid\")\n\n    # Loss curve -----------------------------------------------------------\n    plt.figure()\n    plt.plot(range(1, epochs + 1), train_loss_history, label=\"Training Loss\")\n    plt.scatter([epochs], [train_loss_history[-1]], color=\"red\")\n    plt.text(epochs, train_loss_history[-1], f\"{train_loss_history[-1]:.3f}\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Loss\")\n    plt.legend()\n    plt.title(f\"Training Loss – {run_id}\")\n    loss_fig_name = f\"training_loss_{run_id}.pdf\"\n    plt.savefig(run_dir / loss_fig_name, bbox_inches=\"tight\")\n    plt.close()\n\n    # Accuracy curve -------------------------------------------------------\n    plt.figure()\n    plt.plot(range(1, epochs + 1), val_acc_history, label=\"Validation Accuracy\")\n    plt.scatter([epochs], [val_acc_history[-1]], color=\"red\")\n    plt.text(epochs, val_acc_history[-1], f\"{val_acc_history[-1]*100:.2f}%\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Accuracy\")\n    plt.legend()\n    plt.title(f\"Validation Accuracy – {run_id}\")\n    acc_fig_name = f\"accuracy_{run_id}.pdf\"\n    plt.savefig(run_dir / acc_fig_name, bbox_inches=\"tight\")\n    plt.close()\n\n    # Confusion matrix -----------------------------------------------------\n    plt.figure(figsize=(6, 5))\n    sns.heatmap(conf_mat, annot=True, fmt=\"d\", cmap=\"Blues\")\n    plt.xlabel(\"Predicted\")\n    plt.ylabel(\"True\")\n    plt.title(f\"Confusion Matrix – {run_id}\")\n    cm_fig_name = f\"confusion_matrix_{run_id}.pdf\"\n    plt.savefig(run_dir / cm_fig_name, bbox_inches=\"tight\")\n    plt.close()\n\n    # ---------------------------------------------------------------------\n    # Console output (experiment description, numerical data & figures)\n    # ---------------------------------------------------------------------\n    print(\"=\" * 80)\n    print(f\"Experiment Description (Run ID: {run_id}):\")\n    print(cfg.get(\"description\", \"No description provided.\"))\n    print(\"=\" * 80)\n    print(json.dumps(results))\n    print(\"Generated Figures:\")\n    print(\"\\n\".join([loss_fig_name, acc_fig_name, cm_fig_name]))\n    print(\"=\" * 80)\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Run a single experimental variation.\")\n    parser.add_argument(\"--config\", type=str, required=True, help=\"Path to the YAML config for this variation.\")\n    parser.add_argument(\"--results-dir\", type=str, required=True, help=\"Root directory where results will be stored.\")\n    args = parser.parse_args()\n\n    train(Path(args.config), Path(args.results_dir))",
    "evaluate_py": "import argparse\nimport json\nimport os\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n\ndef aggregate_results(results_dir: Path):\n    records = []\n    for run_dir in results_dir.iterdir():\n        if not run_dir.is_dir():\n            continue\n        result_file = run_dir / \"results.json\"\n        if not result_file.exists():\n            continue\n        with open(result_file, \"r\") as f:\n            rec = json.load(f)\n        records.append(rec)\n    return pd.DataFrame(records)\n\n\ndef generate_figures(df: pd.DataFrame, results_dir: Path):\n    sns.set(style=\"whitegrid\")\n\n    # Bar graph of final test accuracies -----------------------------------\n    plt.figure(figsize=(8, 4))\n    ax = sns.barplot(x=\"run_id\", y=\"test_accuracy\", data=df)\n    ax.set_xlabel(\"Run ID\")\n    ax.set_ylabel(\"Test Accuracy\")\n    ax.set_title(\"Final Test Accuracy Across Runs\")\n    for p in ax.patches:\n        height = p.get_height()\n        ax.annotate(f\"{height*100:.2f}%\", (p.get_x() + p.get_width() / 2., height), ha='center', va='bottom')\n    acc_fig = \"final_accuracy.pdf\"\n    plt.savefig(results_dir / acc_fig, bbox_inches=\"tight\")\n    plt.close()\n\n    # Bar graph of training time ------------------------------------------\n    plt.figure(figsize=(8, 4))\n    ax2 = sns.barplot(x=\"run_id\", y=\"training_time_sec\", data=df)\n    ax2.set_xlabel(\"Run ID\")\n    ax2.set_ylabel(\"Training Time (sec)\")\n    ax2.set_title(\"Training Time Across Runs\")\n    for p in ax2.patches:\n        height = p.get_height()\n        ax2.annotate(f\"{height/60:.1f}m\", (p.get_x() + p.get_width() / 2., height), ha='center', va='bottom')\n    time_fig = \"training_time.pdf\"\n    plt.savefig(results_dir / time_fig, bbox_inches=\"tight\")\n    plt.close()\n\n    return [acc_fig, time_fig]\n\n\ndef main(results_dir: Path):\n    df = aggregate_results(results_dir)\n    figure_files = generate_figures(df, results_dir)\n\n    summary = {\n        \"description\": \"Aggregated comparison of all experimental variations.\",\n        \"num_runs\": int(df.shape[0]),\n        \"best_accuracy_per_run\": df.set_index(\"run_id\")[\"test_accuracy\"].to_dict(),\n        \"median_training_time_sec\": float(df[\"training_time_sec\"].median()),\n        \"figure_files\": figure_files,\n    }\n\n    # Save summary JSON for programmatic access\n    with open(results_dir / \"evaluation_summary.json\", \"w\") as f:\n        json.dump(summary, f, indent=2)\n\n    # Strict requirement: pure JSON block to stdout ------------------------\n    print(json.dumps(summary))\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Evaluate and compare multiple runs.\")\n    parser.add_argument(\"--results-dir\", type=str, required=True, help=\"Directory with per-run sub-folders containing results.json files.\")\n    args = parser.parse_args()\n\n    main(Path(args.results_dir))",
    "preprocess_py": "\"\"\"Common data-loading and preprocessing utilities.\n\n All dataset-specific logic is expressed via clear placeholders to be filled in\n in subsequent steps.  During the foundational phase we fall back to\n torchvision.datasets.FakeData so that the pipeline is fully functional and\n self-contained.\n\"\"\"\n\nfrom pathlib import Path\nfrom typing import Tuple\n\nimport torch\nimport torchvision.transforms as T\nfrom torch.utils.data import DataLoader, random_split\nfrom torchvision.datasets import FakeData\n\n# -------------------------------------------------------------\n# PLACEHOLDER identifiers – will be replaced with real datasets\n# -------------------------------------------------------------\nDATASET_PLACEHOLDER = \"DATASET_PLACEHOLDER\"\n\n\ndef _build_transforms(cfg):\n    \"\"\"Returns torchvision transforms for training / evaluation.\"\"\"\n    img_size = cfg.get(\"img_size\", 32)\n    train_tf = T.Compose([\n        T.RandomHorizontalFlip(),\n        T.RandomCrop(img_size, padding=4),\n        T.ToTensor(),\n    ])\n    test_tf = T.Compose([T.ToTensor()])\n    return train_tf, test_tf\n\n\ndef get_dataloaders(cfg) -> Tuple[DataLoader, DataLoader, DataLoader, int]:\n    \"\"\"Returns (train, val, test, num_classes).\"\"\"\n    dataset_name = cfg.get(\"dataset\", DATASET_PLACEHOLDER)\n    batch_size = int(cfg.get(\"batch_size\", 64))\n    num_workers = int(cfg.get(\"num_workers\", 4))\n    val_split = float(cfg.get(\"val_split\", 0.1))\n\n    train_tf, test_tf = _build_transforms(cfg)\n\n    # ---------------------------------------------------------------------\n    # PLACEHOLDER: Switch-board for loading real datasets\n    # ---------------------------------------------------------------------\n    if dataset_name == DATASET_PLACEHOLDER:\n        # Use FakeData as a stand-in so the pipeline can execute end-to-end\n        dataset = FakeData(size=1000, image_size=(3, 32, 32), num_classes=10, transform=train_tf)\n        num_classes = 10\n    else:\n        raise NotImplementedError(\n            \"Dataset loading for '{}' is not yet implemented. Replace the placeholder block in preprocess.py.\".format(\n                dataset_name))\n\n    # Split dataset into train/val/test\n    n_total = len(dataset)\n    n_val = int(n_total * val_split)\n    n_test = int(n_total * val_split)\n    n_train = n_total - n_val - n_test\n    train_set, val_set, test_set = random_split(dataset, [n_train, n_val, n_test])\n\n    # Apply different transforms to validation/test\n    val_set.dataset.transform = test_tf  # type: ignore\n    test_set.dataset.transform = test_tf  # type: ignore\n\n    train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True, num_workers=num_workers)\n    val_loader = DataLoader(val_set, batch_size=batch_size, shuffle=False, num_workers=num_workers)\n    test_loader = DataLoader(test_set, batch_size=batch_size, shuffle=False, num_workers=num_workers)\n\n    return train_loader, val_loader, test_loader, num_classes",
    "model_py": "\"\"\"Model definitions and utility functions.\n\nThis foundational version ships with a minimal yet fully functional CNN for\nimage classification so that the common infrastructure can be executed\nend-to-end.  Future steps will inject task-specific architectures by extending\nModelFactory.create().\n\"\"\"\n\nfrom pathlib import Path\nfrom typing import Any, Dict\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nMODEL_PLACEHOLDER = \"MODEL_PLACEHOLDER\"\n\n\nclass SimpleConvNet(nn.Module):\n    def __init__(self, num_classes: int = 10):\n        super().__init__()\n        self.features = nn.Sequential(\n            nn.Conv2d(3, 32, kernel_size=3, padding=1),\n            nn.BatchNorm2d(32),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(2),\n            nn.Conv2d(32, 64, kernel_size=3, padding=1),\n            nn.BatchNorm2d(64),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(2),\n        )\n        self.classifier = nn.Sequential(\n            nn.Flatten(),\n            nn.Linear(64 * 8 * 8, 128),\n            nn.ReLU(inplace=True),\n            nn.Linear(128, num_classes),\n        )\n\n    def forward(self, x):\n        x = self.features(x)\n        x = self.classifier(x)\n        return x\n\n\nclass ModelFactory:\n    \"\"\"Factory for constructing models by name.\"\"\"\n\n    registry = {\n        MODEL_PLACEHOLDER: SimpleConvNet,\n        \"baseline\": SimpleConvNet,  # alias\n    }\n\n    @classmethod\n    def create(cls, name: str, num_classes: int, cfg: Dict[str, Any]):\n        if name not in cls.registry:\n            raise KeyError(f\"Unknown model type '{name}'. Extend ModelFactory.registry in model.py.\")\n        return cls.registry[name](num_classes=num_classes)\n\n\n# ---------------------------------------------------------------------\n# Saving / Loading utilities\n# ---------------------------------------------------------------------\n\ndef save_model(model: nn.Module, path: Path):\n    path = Path(path)\n    torch.save({\"state_dict\": model.state_dict()}, path)\n\n\ndef load_model_from_checkpoint(path: Path, model_name: str, num_classes: int, cfg: Dict[str, Any]):\n    path = Path(path)\n    if not path.exists():\n        raise FileNotFoundError(f\"Checkpoint '{path}' not found.\")\n    model = ModelFactory.create(model_name, num_classes, cfg)\n    ckpt = torch.load(path, map_location=\"cpu\")\n    model.load_state_dict(ckpt[\"state_dict\"])\n    return model",
    "main_py": "import argparse\nimport json\nimport os\nimport subprocess\nimport sys\nimport threading\nfrom pathlib import Path\n\nimport yaml\n\n\n###############################################################################\n# Tee helpers to forward subprocess output to both file and parent stream\n###############################################################################\n\ndef _stream_pipe(src, dest_stream, log_file):\n    \"\"\"Reads bytes from src (subprocess pipe) and writes them to dest_stream & file.\"\"\"\n    for line in iter(src.readline, b\"\"):\n        decoded = line.decode(\"utf-8\", errors=\"replace\")\n        dest_stream.write(decoded)\n        dest_stream.flush()\n        log_file.write(decoded)\n        log_file.flush()\n    src.close()\n\n\n###############################################################################\n# Main orchestration logic\n###############################################################################\n\ndef run_variation(python_exe: str, train_module: str, variation_cfg: dict, run_dir: Path):\n    \"\"\"Launches a single experimental variation as a subprocess with tee-style logging.\"\"\"\n    cfg_path = run_dir / \"config.yaml\"\n    with open(cfg_path, \"w\") as f:\n        yaml.safe_dump(variation_cfg, f)\n\n    stdout_path = run_dir / \"stdout.log\"\n    stderr_path = run_dir / \"stderr.log\"\n\n    cmd = [python_exe, \"-m\", train_module, \"--config\", str(cfg_path), \"--results-dir\", str(run_dir.parent)]\n\n    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n    # Start tee threads\n    with open(stdout_path, \"w\") as fout, open(stderr_path, \"w\") as ferr:\n        t_stdout = threading.Thread(target=_stream_pipe, args=(process.stdout, sys.stdout, fout))\n        t_stderr = threading.Thread(target=_stream_pipe, args=(process.stderr, sys.stderr, ferr))\n        t_stdout.start()\n        t_stderr.start()\n        process.wait()\n        t_stdout.join()\n        t_stderr.join()\n\n    if process.returncode != 0:\n        raise RuntimeError(f\"Subprocess for run_id='{variation_cfg.get('run_id')}' exited with non-zero status {process.returncode}.\")\n\n\ndef main(smoke_test: bool, full_experiment: bool, results_dir: Path):\n    if smoke_test == full_experiment:\n        raise ValueError(\"Exactly one of --smoke-test or --full-experiment must be specified.\")\n\n    config_file = Path(\"config/smoke_test.yaml\" if smoke_test else \"config/full_experiment.yaml\")\n    with open(config_file, \"r\") as f:\n        cfg_root = yaml.safe_load(f)\n\n    runs = cfg_root.get(\"runs\", [])\n    if not runs:\n        raise ValueError(f\"No runs defined in {config_file}\")\n\n    results_dir.mkdir(parents=True, exist_ok=True)\n\n    python_exe = sys.executable  # current Python interpreter\n    train_module = \"src.train\"\n\n    for variation_cfg in runs:\n        run_id = variation_cfg.get(\"run_id\")\n        if not run_id:\n            raise KeyError(\"Each run configuration must contain a unique 'run_id'.\")\n        run_dir = results_dir / run_id\n        run_dir.mkdir(parents=True, exist_ok=True)\n        print(f\"\\n========== Launching variation '{run_id}' ==========\")\n        run_variation(python_exe, train_module, variation_cfg, run_dir)\n        print(f\"========== Finished variation '{run_id}' ==========\")\n\n    # After all runs are finished, launch evaluation\n    print(\"\\n========== Launching evaluation ==========\")\n    eval_cmd = [python_exe, \"-m\", \"src.evaluate\", \"--results-dir\", str(results_dir)]\n    subprocess.run(eval_cmd, check=True)\n    print(\"========== Evaluation completed ==========\")\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Experiment Orchestrator (COMMON CORE FOUNDATION)\")\n    parser.add_argument(\"--results-dir\", type=str, required=True, help=\"Directory where all outputs will be stored.\")\n\n    group = parser.add_mutually_exclusive_group(required=True)\n    group.add_argument(\"--smoke-test\", action=\"store_true\", help=\"Run the smoke test (lightweight).\")\n    group.add_argument(\"--full-experiment\", action=\"store_true\", help=\"Run the full experiment suite.\")\n\n    args = parser.parse_args()\n    main(args.smoke_test, args.full_experiment, Path(args.results_dir))",
    "pyproject_toml": "[project]\nname = \"common-core-foundation\"\nversion = \"0.1.0\"\ndescription = \"Foundational experiment framework for OHGW research.\"\nrequires-python = \">=3.10\"\n\n[project.dependencies]\ntorch = \"*\"\ntorchvision = \"*\"\nPyYAML = \"*\"\nmatplotlib = \"*\"\nseaborn = \"*\"\nscikit-learn = \"*\"\ntqdm = \"*\"\n\n[build-system]\nrequires = [\"setuptools\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"",
    "smoke_test_yaml": "# Lightweight configuration to ensure the entire pipeline executes quickly.\n# PLACEHOLDER values will be replaced with task-specific ones in subsequent steps.\n\nruns:\n  - run_id: smoke_baseline\n    description: \"Smoke-test baseline run on placeholder data.\"\n    dataset: DATASET_PLACEHOLDER      # PLACEHOLDER: replace with actual dataset\n    model: MODEL_PLACEHOLDER          # PLACEHOLDER: replace with actual model\n    use_ohgw: false\n    epochs: 2\n    batch_size: 32\n    learning_rate: 0.01\n    weight_decay: 0.0005\n    seed: 1\n\n  - run_id: smoke_ohgw\n    description: \"Smoke-test OHGW run on placeholder data.\"\n    dataset: DATASET_PLACEHOLDER      # PLACEHOLDER: replace with actual dataset\n    model: MODEL_PLACEHOLDER          # PLACEHOLDER: replace with actual model\n    use_ohgw: true\n    ohgw_lr: 0.001\n    epochs: 2\n    batch_size: 32\n    learning_rate: 0.01\n    weight_decay: 0.0005\n    seed: 1",
    "full_experiment_yaml": "# Template for the full experimental suite.  Detailed, dataset-specific\n# configurations will be filled in later.\n\nruns:\n  # Example entry – duplicate & adapt as needed\n  - run_id: baseline_scheduler\n    description: \"Baseline grey-box scheduler without hyper-gradient warm-start.\"\n    dataset: DATASET_PLACEHOLDER      # PLACEHOLDER: CIFAR10 / ImageNet / etc.\n    model: MODEL_PLACEHOLDER          # PLACEHOLDER: ResNet20 / ViT / etc.\n    use_ohgw: false\n    epochs: 100\n    batch_size: 128\n    learning_rate: 0.1\n    weight_decay: 0.0005\n    momentum: 0.9\n    seed: 42\n\n  - run_id: scheduler_plus_ohgw\n    description: \"Same scheduler augmented with One-Shot Hyper-Gradient Warm-Start.\"\n    dataset: DATASET_PLACEHOLDER\n    model: MODEL_PLACEHOLDER\n    use_ohgw: true\n    ohgw_lr: 0.001\n    epochs: 100\n    batch_size: 128\n    learning_rate: 0.1\n    weight_decay: 0.0005\n    momentum: 0.9\n    seed: 42\n\n  # Additional ablations / variants go here according to the Experimental Design.\n  "
}
