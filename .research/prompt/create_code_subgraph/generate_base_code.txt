
Input:
You are a cutting-edge AI researcher preparing the COMMON CORE FOUNDATION for experiments that will ensure consistency across all experimental variations.

This step generates the **COMMON CORE FOUNDATION** for experiments that will ensure consistency across all experimental variations.

**Current Task**: Generate common base logic, evaluation framework, and infrastructure with placeholders for specific datasets/models
**Next Step**: A subsequent step will derive specific experiments by replacing placeholders with actual datasets/models

Based on the research method in # Current Research Method and experimental design in # Experimental Design, generate the foundational code that will serve as the common base for ALL experimental variations.

# Instructions: Common Core Foundation Generation

## Core Requirements
- **COMMON EVALUATION LOGIC**: Implement consistent evaluation metrics, result collection, and comparison logic that will work across all experimental variations
- **CORE ALGORITHM IMPLEMENTATION**: Implement the main method/algorithm with full functionality
- **INFRASTRUCTURE CODE**: Complete training loops, model saving/loading, configuration handling, and result visualization
- **PLACEHOLDER STRATEGY**: Use clear, descriptive placeholders for dataset-specific and model-specific components that will be replaced in subsequent steps
- **CONSISTENCY FRAMEWORK**: Ensure all experiments will use identical evaluation criteria, metrics calculation, and result formatting

## Placeholder Guidelines
- Use descriptive placeholder names like `DATASET_PLACEHOLDER`, `MODEL_PLACEHOLDER`, `SPECIFIC_CONFIG_PLACEHOLDER`
- Include comments explaining what will be replaced: `# PLACEHOLDER: Will be replaced with specific dataset loading logic`
- Ensure placeholders are easily identifiable and replaceable in the next phase
- Keep the base logic intact - only dataset/model-specific parts should be placeholders

## Implementation Requirements
- **ZERO PLACEHOLDER POLICY FOR CORE LOGIC**: Generate complete, production-ready base framework. NO placeholders for training loops, evaluation logic, or result processing.
- **COMPLETE IMPLEMENTATION**: Every base component must be fully functional. No "omitted for brevity", no "simplified version" for base logic.
- **PUBLICATION-READY INFRASTRUCTURE**: Framework must produce actual publication-worthy results when datasets/models are specified
- **USE PYTORCH EXCLUSIVELY** as the deep learning framework
- **COMPLETE DATA PIPELINE FRAMEWORK**: Implement data loading and preprocessing pipeline with placeholders for specific datasets
- **COMPREHENSIVE EXPERIMENT INFRASTRUCTURE**: Full-scale experiment framework with sufficient training epochs, proper validation splits, and thorough evaluation metrics
- **STRUCTURED PLACEHOLDER APPROACH**: Use well-defined placeholders for dataset/model specifics while ensuring base logic is complete and functional

## Standard Output Content Requirements
- Experiment description: Before printing experimental results, the standard output must include a detailed description of the experiment.
- Experimental numerical data: All experimental data obtained in the experiments must be output to the standard output.
- Names of figures summarizing the numerical data

## Figure Output Requirements
- Experimental results must always be presented in clear and interpretable figures without exception.
- Use matplotlib or seaborn to output the results (e.g., accuracy, loss curves, confusion matrix).
- Numeric values must be annotated on the axes of the graphs.
- For line graphs, annotate significant values (e.g., the final or best value) to highlight key findings. For bar graphs, annotate the value above each bar.
- Include legends in the figures.
- All figures must be saved in .pdf format (e.g., using plt.savefig("filename.pdf", bbox_inches="tight")).
  - Do not use .png or any other formats—only .pdf is acceptable for publication quality.

## Figure Naming Convention
File names must follow the format: `<figure_topic>[_<condition>][_pairN].pdf`
- `<figure_topic>`: The main subject of the figure (e.g., training_loss, accuracy, inference_latency)
- `_<condition>` (optional): Indicates model, setting, or comparison condition (e.g., amict, baseline, tokens, multimodal_vs_text)
- `_pairN` (optional): Used when presenting figures in pairs (e.g., _pair1, _pair2)
- For standalone figures, do not include _pairN.


- Environment Variables: The following environment variables are available: HF_TOKEN, ANTHROPIC_API_KEY


## Command Line Interface and Run Variations
The `full_experiment.yaml` file defines a list of all experiments to be run (e.g., baseline, proposed, ablations). The `main.py` script reads this file and executes experiments with one GPU per run variation. If GPUs are insufficient, experiments run sequentially.

The generated main.py must support:
```bash
# Smoke test (runs a lightweight version of ALL run variations defined in smoke_test.yaml)
uv run python -m src.main --smoke-test --results-dir <path>

# Full experiment (reads full_experiment.yaml, runs all variations with 1 GPU per variation)
uv run python -m src.main --full-experiment --results-dir <path>
```

The `--results-dir` argument is passed from the GitHub Actions workflow and specifies where all outputs (figures, logs, metrics) should be saved.

## Output Structure
Generate complete foundational code for these files ONLY. Do not create any additional files beyond this structure:

### Script Structure (ExperimentCode format)
Generate complete foundational code for these files ONLY. Do not create any additional files beyond this structure:
- `src/train.py`: Logic to run a single experiment variation. It is called as a subprocess by main.py. It must save final metrics to a structured file (e.g., results.json).
- `src/evaluate.py`: Comparison and visualization tool. It reads the result files from all experiment variations and generates comparison figures.
- `src/preprocess.py`: Common preprocessing pipeline with dataset placeholders
- `src/model.py`: Model architecture implementations. It will contain classes for baseline, proposed, and ablation models.
- `src/main.py`: The main orchestrator script. It reads a config file, launches train.py for each experiment in parallel across available GPUs, manages subprocesses, collects and consolidates logs, and finally triggers evaluate.py.
- `pyproject.toml`: Complete project dependencies
- `config/smoke_test.yaml`: Configuration file template with placeholder structure for run variations. Actual variations will be populated in derive_specific step.
- `config/full_experiment.yaml`: Configuration file template with placeholder structure for run variations. Actual variations will be populated in derive_specific step.

### Key Implementation Focus Areas
1. Algorithm Core: Full implementation of the proposed method with proper abstraction
2. GPU Allocation: main.py assigns 1 GPU per run variation. If available GPUs < total variations, queue remaining runs sequentially.
3. Configuration Driven: The entire workflow must be driven by the YAML configuration files.
4. Evaluation Consistency: Identical metrics calculation, result formatting, and comparison logic. evaluate.py must operate on the saved results after all training is complete.
5. Structured Logging:
   - train.py: Print JSON-formatted experimental data (epoch-wise metrics, final results) to stdout using `print(json.dumps({...}))`. Always include `"run_id"` field (use the run variation name from config).
   - evaluate.py: Print JSON-formatted comparison results to stdout
   - main.py: For each subprocess, redirect stdout/stderr to `{results_dir}/{run_id}/stdout.log` and `{results_dir}/{run_id}/stderr.log` while also forwarding to main process stdout/stderr (using tee-like logic) so logs are captured both structurally and by GitHub Actions.


## Core code Validation Feedback


**Previous Validation Issue**: Training code is not runnable: train.py calls model.register_module("hparams", hparam_dict) but nn.Module has no register_module method (should use add_module or setattr). This raises AttributeError and prevents the training loop/evaluation from running, so the core logic is incomplete/unverified, violating requirement 1.
**Action Required**: Address this by ensuring the base framework provides a solid foundation for experimental implementations.



# Experimental Environment
NVIDIA A100×8
VRAM：80GB×8
RAM：2048 GB

# Current Research Method (Target for Experiment Design)
{
    "Open Problems": "Even the fastest gray–box and multi-fidelity HPO methods (ASHA, PASHA, DyHPO, BOIL) still waste computation on obviously bad configurations because every trial is treated as a black box; none of the information that is already available inside the training loop – most notably the stochastic hyper-gradient obtained at almost zero cost with automatic differentiation – is used to steer the search. The open problem is: how can we inject very cheap, noisy hyper-gradient signals into existing bandit-style schedulers without redesigning their core logic?",
    "Methods": "We propose ‘One-Shot Hyper-Gradient Warm-Starts’ (OHGW), a drop-in modification for any Successive-Halving style scheduler (Hyperband / ASHA / PASHA).  1. When a new configuration x is sampled it is run for only one **mini-batch** (≈10-2% of a normal epoch).  2. In this first forward / backward pass we keep the compute graph and call automatic differentiation once more to obtain a single stochastic hyper-gradient ∂L/∂ψ for every continuous hyperparameter ψ (learning-rate, weight-decay, momentum …) exactly as in implicit hyper-gradient papers, but **without unrolling** (cost <1.2× normal mini-batch).  3. We apply one hyper-parameter update ψ←ψ−η_h ∂L/∂ψ (η_h is a fixed tiny step such as 10-3).  4. The adjusted configuration x′ – which differs from x by at most one gradient step in each hyper-parameter – is what the scheduler subsequently evaluates for its first rung (e.g. 1 epoch).  5. Everything else (promotion rules, budget doubling, stopping) is untouched.  In effect the scheduler still explores the same region, but every candidate is lightly nudged towards a valley before costly training starts.",
    "Experimental Setup": "Benchmark: CIFAR-10 with ResNet-20 and 5-dim continuous search space {log-lr, log-wd, momentum, augment-magnitude, label-smoothing}.  Scheduler baselines: ASHA, PASHA, DyHPO (their public implementations).  Our variants: ASHA+OHGW, PASHA+OHGW, DyHPO+OHGW (one-line wrapper around trial creation).  Mini-batch for warm-start: 128 images.  Hyper-gradient lr η_h=1e-3, computed with PyTorch autograd; no higher-order terms.  Each method is given the same overall GPU budget (4×V100 for 12 hours) and 50 seeds.  Metrics: (i) best test accuracy reached vs. wall-clock, (ii) total GPU hours until 93% accuracy, (iii) distribution of final hyper-parameters to check bias.",
    "Experimental Code": "# pseudo-code\nfor cfg in scheduler.sample():\n    model = build_model(cfg)\n    data = next(train_loader)            # one mini-batch\n    loss  = forward_loss(model, data)\n    grads = torch.autograd.grad(loss, cfg.continuous_params())\n    with torch.no_grad():               # one hyper step\n        for p,g in zip(cfg.continuous_params(), grads):\n            p -= eta_h * g\n    scheduler.launch(cfg)               # continue as usual",
    "Expected Result": "Across all schedules OHGW cuts the median time-to-93%-accuracy by ≈20% (ASHA 11.2→9.0 h, PASHA 7.3→5.8 h, DyHPO 6.1→4.9 h) while keeping the same final accuracy. The added warm-start costs <3% extra compute. Hyper-parameter distributions remain similar, showing no harmful bias.",
    "Expected Conclusion": "A single stochastic hyper-gradient step collected before the first rung is enough to noticeably reduce wasted resources in bandit-style HPO. Because OHGW requires only two extra autograd calls and no change to the scheduler logic, it can be retro-fitted to almost any existing gray-box optimizer, offering an attractive efficiency boost with negligible engineering effort."
}

# Experimental Design
- Strategy: Overall Experimental Strategy for Validating One-Shot Hyper-Gradient Warm-Starts (OHGW)

1. Core Hypotheses to Validate
   a. Efficiency: OHGW reduces wall-clock time and GPU hours needed by bandit-style schedulers to reach a preset performance threshold.
   b. Performance Preservation: OHGW does not hurt (and ideally preserves or slightly improves) the best final metric attainable by the underlying scheduler.
   c. Robustness & Variance: OHGW’s benefit is consistent across random seeds, search-space dimensionalities, data sets, model families and scheduler types.
   d. Generalization: The same one-line wrapper applies without retuning to tasks beyond image classification (e.g. language modelling, tabular, RL) and to both small- and large-scale training loops.
   e. Cost Overhead: Extra compute, memory and engineering overhead introduced by OHGW remain negligible (<5 % GPU-hours, <10 % peak-memory, ≤20 LoC integration).

2. Experiment Families (all experiments draw from one common pool of settings below)
   • Task Breadth: vision (CIFAR-10/100, ImageNet-1k), NLP (WikiText-103), tabular (UCI suite), RL (Atari).
   • Model Breadth: ResNet family, ViT, Transformer-LM, XGBoost, PPO-CNN.
   • Scheduler Breadth: ASHA, PASHA, DyHPO, Hyperband-BO, BOIL (if open-sourced).
   • Search-Space Breadth: 3–10 continuous hyper-parameters; mixed discrete+continuous cases to show neutrality to inapplicable params.
   • Scale Breadth: single-GPU up to 64-GPU distributed training (multi-node pools or simulated via concurrency on the 8×A100 machine).

3. Comparison Axes for Every Experiment
   • Baseline Scheduler (vanilla).
   • Baseline + Random Warm-Start in ∆ψ range (controls for mere perturbation).
   • Baseline + Multiple Hyper-Gradient Steps (ablation to check diminishing returns).
   • Scheduler-specific SoTA gradient-aware HPO if available (e.g. DyHPO, BOIL) to position OHGW competitively.

4. Metrics & Evaluation Protocol
   Primary quantitative metrics (reported as median ±IQR over ≥30 seeds):
      – T@τ: Wall-clock/GPU-hour to reach target score τ (task-specific; chosen so that vanilla reaches it within budget).
      – Best final validation/test score after fixed budget.
      – Compute Overhead: (Σ warm-start flop) ⁄ (total flop) and peak VRAM.
   Secondary diagnostics:
      – AUC of best-score-vs-time curve (overall sample efficiency).
      – Seed-wise variance of T@τ and final score.
      – Hyper-parameter trajectory statistics (mean shift & KL-divergence of posterior over ψ).
   Qualitative/visual:
      – Survival plots of promoted configurations per rung.
      – Heatmaps of hyper-gradient magnitude vs. eventual benefit.
   Statistical test: two-sided Wilcoxon signed-rank (α=0.05) on paired seeds.

5. Success Criteria (must hold in ≥75 % of experiment tuples)
   • ≥15 % median reduction in T@τ with p<0.05.
   • ≤0.2 % relative drop (or improvement) in best final score.
   • ≤5 % extra GPU-hours and ≤10 % extra peak VRAM.
   • Std-dev(T@τ) not inflated by more than 10 %.

6. Multi-Perspective Validation Plan
   • Efficiency: Use identical global budgets and identical seed lists; plot temporal efficiency curves and compute aggregated speed-up ratios.
   • Performance Preservation: Report final accuracy/F1/return and confidence intervals.
   • Robustness: Repeat each experiment block with different batch sizes, η_h values (10⁻⁴…10⁻²) and noisy labels; perform sensitivity analysis.
   • Generalization: Run a “zero-tuning transfer” study—apply the CIFAR-tuned η_h to NLP, RL and tabular tasks unchanged.
   • Ablations & Controls: Random perturbation, multistep hyper-gradient, frozen discrete params, partial gradient masking.
   • Scalability: Micro-benchmark warm-start time and memory for 1, 8, 64 GPUs using synthetic workloads.

7. Experimental Logistics
   • Central harness (Hydra + PyTorch Lightning) to register all trials, guarantee identical I/O pipelines and logging format (wandb/MLflow).
   • Dedicate 4×A100 per independent replicate to avoid resource contention; schedule via Slurm with cgroup accounting to record accurate GPU-hour usage.
   • Automated post-processing notebook generates unified tables, statistical tests and publication-ready plots.

8. Risk Mitigation & Contingency
   • If hyper-gradient extraction fails for exotic layers, fall back to finite-difference on ψ only (flag run but keep in aggregated stats).
   • If OHGW underperforms on discrete-heavy spaces, isolate continuous subset and document limitation.

This unified strategy guarantees that every forthcoming experiment—regardless of domain—collects commensurate evidence on efficiency, performance, robustness, generality and overhead, enabling a cohesive, multi-angle validation of OHGW’s claimed benefits.



# Reference Information from Previous Iteration


Remember: This is the FOUNDATION that will ensure ALL experimental variations are conducted on the same rigorous, consistent basis. Focus on creating robust base logic with strategic placeholders for dataset/model specifics.
Output:
{
    "train_py": "import argparse\nimport json\nimport os\nimport random\nimport sys\nimport time\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport yaml\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom tqdm import tqdm\n\n# Local imports\nfrom .preprocess import build_dataloaders, get_num_classes\nfrom .model import build_model\n\n\ndef set_seed(seed: int):\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False\n\n\ndef apply_hypergradient_warmstart(model: nn.Module,\n                                  dataloader: torch.utils.data.DataLoader,\n                                  hyperparams: dict,\n                                  device: torch.device,\n                                  eta_h: float):\n    \"\"\"Perform a single mini-batch hyper-gradient warm-start step.\n\n    Only hyper-parameters that are `torch.Tensor` with `requires_grad=True`\n    will receive gradients. This design makes the routine generic and\n    extensible: any continuous hyper-parameter you wish to optimise merely\n    has to be represented as such a tensor and referenced in the forward\n    pass or auxiliary regularisation term.\n    \"\"\"\n    model.train()\n    # Grab exactly one mini-batch\n    try:\n        batch = next(iter(dataloader))\n    except StopIteration:\n        raise RuntimeError(\"Dataloader exhausted while attempting warm-start mini-batch\")\n\n    inputs, targets = batch[0].to(device), batch[1].to(device)\n\n    # Forward\n    outputs = model(inputs)\n    criterion = nn.CrossEntropyLoss()\n    loss = criterion(outputs, targets)\n\n    # Optional: include weight-decay L2 penalty if weight_decay hyper-param supplied\n    if 'weight_decay' in hyperparams:\n        wd = hyperparams['weight_decay']  # tensor\n        l2_norm = sum((p ** 2).sum() for p in model.parameters())\n        loss = loss + 0.5 * wd * l2_norm\n\n    # Backward wrt model params AND hyper-params\n    grads = torch.autograd.grad(loss, list(model.parameters()) + list(hyperparams.values()), create_graph=False)\n    hyper_grads = grads[len(list(model.parameters())):]  # last elements correspond to hyperparams\n\n    # Apply one SGD step on hyper-parameters\n    with torch.no_grad():\n        for (name, tensor), g in zip(hyperparams.items(), hyper_grads):\n            if g is None:\n                continue  # hyper-param did not participate in graph\n            tensor -= eta_h * g\n            # Clamp common hyper-parameters to valid range\n            if name == 'weight_decay':\n                tensor.clamp_(min=0.0, max=1.0)\n            if name == 'lr':\n                tensor.clamp_(min=1e-6, max=10.0)\n\n    return {name: float(tensor.detach().cpu().item()) for name, tensor in hyperparams.items()}\n\n\ndef train(config_path: str, results_dir: str, gpu_id: int):\n    # ------------------------------------------------------------------\n    # 1. Load configuration\n    # ------------------------------------------------------------------\n    with open(config_path, 'r') as f:\n        cfg = yaml.safe_load(f)\n\n    run_id = cfg['run_id']\n\n    # ------------------------------------------------------------------\n    # 2. Reproducibility and device placement\n    # ------------------------------------------------------------------\n    seed = cfg.get('seed', 42)\n    set_seed(seed)\n    device = torch.device(f'cuda:{gpu_id}' if torch.cuda.is_available() else 'cpu')\n\n    # ------------------------------------------------------------------\n    # 3. Data\n    # ------------------------------------------------------------------\n    loaders = build_dataloaders(cfg['dataset'], quick_run=cfg.get('quick_run', False))\n    train_loader, val_loader, test_loader = loaders\n    num_classes = get_num_classes(cfg['dataset'])\n\n    # ------------------------------------------------------------------\n    # 4. Model & Optimiser\n    # ------------------------------------------------------------------\n    model = build_model(cfg['model'], num_classes=num_classes).to(device)\n\n    # --- Hyper-parameters as differentiable tensors --------------------------------\n    hyperparams = {}\n    hp_cfg = cfg.get('hyperparameters', {})\n    # Learning-rate (log space is common but here we keep real value for simplicity)\n    lr_tensor = torch.tensor(float(hp_cfg.get('lr', 0.1)), dtype=torch.float32, device=device, requires_grad=True)\n    hyperparams['lr'] = lr_tensor\n    wd_tensor = torch.tensor(float(hp_cfg.get('weight_decay', 5e-4)), dtype=torch.float32, device=device, requires_grad=True)\n    hyperparams['weight_decay'] = wd_tensor\n\n    # Build optimiser using the CURRENT lr / wd values (will be mutated later)\n    optimiser = optim.SGD(model.parameters(), lr=float(lr_tensor.detach().cpu()), momentum=hp_cfg.get('momentum', 0.9))\n\n    # ------------------------------------------------------------------\n    # 5. One-Shot Hyper-Gradient Warm-Start (OHGW) — if enabled\n    # ------------------------------------------------------------------\n    if cfg.get('use_ohgw', False):\n        eta_h = cfg.get('eta_h', 1e-3)\n        _updated_vals = apply_hypergradient_warmstart(model, train_loader, hyperparams, device, eta_h)\n        # Reflect updated hyper-params inside optimiser param groups\n        optimiser.param_groups[0]['lr'] = _updated_vals['lr']\n        print(json.dumps({\n            'run_id': run_id,\n            'event': 'hypergradient_warmstart_completed',\n            'updated_hyperparams': _updated_vals\n        }))\n        sys.stdout.flush()\n\n    # ------------------------------------------------------------------\n    # 6. Training loop\n    # ------------------------------------------------------------------\n    criterion = nn.CrossEntropyLoss()\n\n    epochs = cfg['training']['epochs']\n    metrics_history = {\n        'epoch': [],\n        'train_loss': [],\n        'val_acc': []\n    }\n\n    start_time = time.time()\n    for epoch in range(1, epochs + 1):\n        model.train()\n        running_loss = 0.0\n        for inputs, targets in tqdm(train_loader, desc=f\"Epoch {epoch}/{epochs}\", leave=False):\n            inputs, targets = inputs.to(device), targets.to(device)\n\n            optimiser.zero_grad(set_to_none=True)\n            outputs = model(inputs)\n            loss = criterion(outputs, targets)\n            if 'weight_decay' in hyperparams:\n                wd = hyperparams['weight_decay']\n                l2_norm = sum((p ** 2).sum() for p in model.parameters())\n                loss = loss + 0.5 * wd * l2_norm\n\n            loss.backward()\n            optimiser.step()\n\n            running_loss += loss.item() * inputs.size(0)\n\n        train_loss_epoch = running_loss / len(train_loader.dataset)\n\n        # Validation\n        model.eval()\n        val_preds, val_targets = [], []\n        with torch.no_grad():\n            for inputs, targets in val_loader:\n                inputs = inputs.to(device)\n                outputs = model(inputs)\n                preds = torch.argmax(outputs, dim=1).cpu().numpy()\n                val_preds.append(preds)\n                val_targets.append(targets.numpy())\n        val_preds = np.concatenate(val_preds)\n        val_targets = np.concatenate(val_targets)\n        val_acc = accuracy_score(val_targets, val_preds)\n\n        metrics_history['epoch'].append(epoch)\n        metrics_history['train_loss'].append(train_loss_epoch)\n        metrics_history['val_acc'].append(val_acc)\n\n        # Live log epoch metrics\n        print(json.dumps({\n            'run_id': run_id,\n            'event': 'epoch_end',\n            'epoch': epoch,\n            'train_loss': train_loss_epoch,\n            'val_acc': val_acc\n        }))\n        sys.stdout.flush()\n\n    training_wallclock_s = time.time() - start_time\n\n    # ------------------------------------------------------------------\n    # 7. Test Evaluation\n    # ------------------------------------------------------------------\n    model.eval()\n    test_preds, test_targets = [], []\n    with torch.no_grad():\n        for inputs, targets in test_loader:\n            inputs = inputs.to(device)\n            outputs = model(inputs)\n            preds = torch.argmax(outputs, dim=1).cpu().numpy()\n            test_preds.append(preds)\n            test_targets.append(targets.numpy())\n    test_preds = np.concatenate(test_preds)\n    test_targets = np.concatenate(test_targets)\n    test_acc = accuracy_score(test_targets, test_preds)\n\n    # ------------------------------------------------------------------\n    # 8. Persist metrics & artefacts\n    # ------------------------------------------------------------------\n    run_dir = Path(results_dir) / run_id\n    run_dir.mkdir(parents=True, exist_ok=True)\n\n    results = {\n        'run_id': run_id,\n        'config': cfg,\n        'final_metrics': {\n            'val_acc': float(metrics_history['val_acc'][-1]),\n            'test_acc': float(test_acc),\n            'training_wallclock_s': training_wallclock_s\n        },\n        'epoch_metrics': metrics_history\n    }\n\n    with (run_dir / 'results.json').open('w') as f:\n        json.dump(results, f, indent=2)\n\n    # ------------------------------------------------------------------\n    # 9. Generate Figures\n    # ------------------------------------------------------------------\n    # 9.1 Training Loss Curve\n    plt.figure(figsize=(6, 4))\n    sns.lineplot(x=metrics_history['epoch'], y=metrics_history['train_loss'], marker='o', label='Train Loss')\n    final_loss = metrics_history['train_loss'][-1]\n    plt.annotate(f\"{final_loss:.4f}\", xy=(metrics_history['epoch'][-1], final_loss),\n                 xytext=(-20, 10), textcoords='offset points')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.title('Training Loss Curve')\n    plt.legend()\n    plt.tight_layout()\n    plt.savefig(run_dir / 'training_loss.pdf', bbox_inches='tight')\n    plt.close()\n\n    # 9.2 Validation Accuracy Curve\n    plt.figure(figsize=(6, 4))\n    sns.lineplot(x=metrics_history['epoch'], y=metrics_history['val_acc'], marker='o', label='Val Acc')\n    final_acc = metrics_history['val_acc'][-1]\n    plt.annotate(f\"{final_acc:.4f}\", xy=(metrics_history['epoch'][-1], final_acc),\n                 xytext=(-20, 10), textcoords='offset points')\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy')\n    plt.title('Validation Accuracy Curve')\n    plt.legend()\n    plt.tight_layout()\n    plt.savefig(run_dir / 'accuracy.pdf', bbox_inches='tight')\n    plt.close()\n\n    # 9.3 Confusion Matrix on Test Set (annotated)\n    cm = confusion_matrix(test_targets, test_preds)\n    plt.figure(figsize=(6, 5))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n    plt.title('Test Confusion Matrix')\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    plt.tight_layout()\n    plt.savefig(run_dir / 'confusion_matrix.pdf', bbox_inches='tight')\n    plt.close()\n\n    # ------------------------------------------------------------------\n    # 10. Print final results to stdout\n    # ------------------------------------------------------------------\n    experiment_description = (\n        f\"Run ID: {run_id}\\n\"\n        f\"Dataset: {cfg['dataset']['name']}\\n\"\n        f\"Model:   {cfg['model']['name']}\\n\"\n        f\"Use OHGW: {cfg.get('use_ohgw', False)}\\n\"\n        f\"Epochs:  {epochs}\\n\"\n        f\"Final Validation Accuracy: {metrics_history['val_acc'][-1]:.4f}\\n\"\n        f\"Final Test Accuracy:       {test_acc:.4f}\\n\"\n        f\"Training Wall-clock (s):  {training_wallclock_s:.1f}\"\n    )\n    print(experiment_description)\n\n    print(json.dumps({\n        'run_id': run_id,\n        'event': 'training_completed',\n        'final_val_acc': metrics_history['val_acc'][-1],\n        'final_test_acc': test_acc,\n        'training_wallclock_s': training_wallclock_s,\n        'figures': ['training_loss.pdf', 'accuracy.pdf', 'confusion_matrix.pdf']\n    }))\n    sys.stdout.flush()\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Run a single training experiment variation.')\n    parser.add_argument('--config', required=True, type=str, help='Path to YAML file describing this run.')\n    parser.add_argument('--results-dir', required=True, type=str, help='Directory to save results and artefacts.')\n    parser.add_argument('--gpu-id', required=True, type=int, help='GPU index to use for this run.')\n    args = parser.parse_args()\n\n    train(args.config, args.results_dir, args.gpu_id)\n",
    "evaluate_py": "import argparse\nimport json\nimport os\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n\nFIG_TOPIC_FINAL_ACC = 'final_accuracy'\nFIG_TOPIC_WALLCLOCK = 'time_to_target'\n\n\ndef load_all_results(results_dir: Path):\n    records = []\n    for run_dir in results_dir.iterdir():\n        res_file = run_dir / 'results.json'\n        if res_file.exists():\n            with res_file.open() as f:\n                res = json.load(f)\n            record = {\n                'run_id': res['run_id'],\n                'dataset': res['config']['dataset']['name'],\n                'model': res['config']['model']['name'],\n                'use_ohgw': res['config'].get('use_ohgw', False),\n                'final_test_acc': res['final_metrics']['test_acc'],\n                'wallclock_s': res['final_metrics']['training_wallclock_s']\n            }\n            # Optional threshold time if provided\n            target = res['config']['evaluation'].get('target_acc') if 'evaluation' in res['config'] else None\n            if target is not None:\n                # Define helper to find epoch meeting threshold\n                epochs = np.array(res['epoch_metrics']['epoch'])\n                val_acc = np.array(res['epoch_metrics']['val_acc'])\n                meets = np.where(val_acc >= target)[0]\n                record['time_to_target'] = res['final_metrics']['training_wallclock_s'] if len(meets) == 0 else (\n                    res['final_metrics']['training_wallclock_s'] * (meets[0] + 1) / len(epochs))\n            records.append(record)\n    return pd.DataFrame(records)\n\n\ndef barplot(df: pd.DataFrame, x: str, y: str, hue: str, ylabel: str, title: str, fig_name: str, output_dir: Path):\n    plt.figure(figsize=(8, 5))\n    ax = sns.barplot(data=df, x=x, y=y, hue=hue)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.annotate(f\"{height:.3f}\", (p.get_x() + p.get_width() / 2., height), ha='center', va='bottom', fontsize=8)\n    plt.title(title)\n    plt.ylabel(ylabel)\n    plt.tight_layout()\n    file_path = output_dir / f\"{fig_name}.pdf\"\n    plt.savefig(file_path, bbox_inches='tight')\n    plt.close()\n    return str(file_path.name)\n\n\ndef evaluate(results_dir: str):\n    results_dir = Path(results_dir)\n    df = load_all_results(results_dir)\n    if df.empty:\n        print(json.dumps({'event': 'evaluate_completed', 'message': 'No results found.'}))\n        return\n\n    # ------------------------------------------------------------------\n    # Figure 1: Final Test Accuracy grouped by OHGW vs baseline\n    # ------------------------------------------------------------------\n    acc_fig = barplot(df, x='run_id', y='final_test_acc', hue='use_ohgw',\n                      ylabel='Final Test Accuracy',\n                      title='Final Test Accuracy per Run (OHGW vs Baseline)',\n                      fig_name=f'{FIG_TOPIC_FINAL_ACC}', output_dir=results_dir)\n\n    # ------------------------------------------------------------------\n    # Figure 2: Wall-clock time to target accuracy (if available)\n    # ------------------------------------------------------------------\n    time_fig = None\n    if 'time_to_target' in df.columns and not df['time_to_target'].isnull().all():\n        time_fig = barplot(df, x='run_id', y='time_to_target', hue='use_ohgw',\n                           ylabel='Wall-clock seconds to target',\n                           title='Time to Target Accuracy (OHGW vs Baseline)',\n                           fig_name=FIG_TOPIC_WALLCLOCK, output_dir=results_dir)\n\n    comparison_summary = {\n        'event': 'evaluate_completed',\n        'num_runs': len(df),\n        'best_accuracy': df['final_test_acc'].max(),\n        'accuracy_improvement_mean': df.groupby('use_ohgw')['final_test_acc'].mean().to_dict(),\n        'figures': [f for f in [acc_fig, time_fig] if f is not None]\n    }\n\n    print(json.dumps(comparison_summary))\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Aggregate and compare experimental results.')\n    parser.add_argument('--results-dir', required=True, type=str, help='Path that contains run sub-directories with results.json files.')\n    args = parser.parse_args()\n\n    evaluate(args.results_dir)\n",
    "preprocess_py": "\"\"\"Common data preprocessing utilities with dataset placeholders.\n\nDataset-specific logic should be inserted in the designated PLACEHOLDER blocks\nin a later derivation step. Until then, a small synthetic dataset is provided\nso that the entire pipeline is fully executable (useful for smoke tests and\nCI).\n\"\"\"\n\nfrom typing import Tuple\n\nimport torch\nfrom torch.utils.data import DataLoader, Dataset, random_split\n\n\nclass SyntheticClassificationDataset(Dataset):\n    \"\"\"A tiny synthetic dataset for quick smoke tests (10 classes).\"\"\"\n\n    def __init__(self, num_samples: int = 512, num_features: int = 32, num_classes: int = 10):\n        super().__init__()\n        self.x = torch.randn(num_samples, num_features)\n        self.y = torch.randint(0, num_classes, (num_samples,))\n        self.num_classes = num_classes\n\n    def __len__(self):\n        return self.x.size(0)\n\n    def __getitem__(self, idx):\n        return self.x[idx], self.y[idx]\n\n\n# ----------------------------------------------------------------------------\n# Public API\n# ----------------------------------------------------------------------------\n\ndef build_dataloaders(dataset_cfg: dict, quick_run: bool = False) -> Tuple[DataLoader, DataLoader, DataLoader]:\n    \"\"\"Return train/val/test dataloaders as per dataset configuration.\n\n    The routine is fully functional thanks to the synthetic fallback dataset.\n    When integrating real datasets, replace the PLACEHOLDER block with proper\n    loading, preprocessing and splitting logic.\n    \"\"\"\n    name = dataset_cfg['name']\n    batch_size = dataset_cfg.get('batch_size', 64)\n    num_workers = dataset_cfg.get('num_workers', 4)\n\n    # ------------------------------------------------------------------\n    # Synthetic fallback dataset (default)\n    # ------------------------------------------------------------------\n    if name == 'RANDOM_TINY':\n        base_ds = SyntheticClassificationDataset(num_samples=1024 if not quick_run else 128,\n                                                 num_features=dataset_cfg.get('num_features', 32),\n                                                 num_classes=dataset_cfg.get('num_classes', 10))\n        n_total = len(base_ds)\n        n_train = int(0.7 * n_total)\n        n_val = int(0.15 * n_total)\n        n_test = n_total - n_train - n_val\n        train_ds, val_ds, test_ds = random_split(base_ds, [n_train, n_val, n_test])\n\n    # ------------------------------------------------------------------\n    # PLACEHOLDER: Will be replaced with specific dataset loading logic\n    # ------------------------------------------------------------------\n    else:\n        raise NotImplementedError(f\"Dataset '{name}' not implemented yet. Replace placeholder with actual loader.\")\n\n    train_loader = DataLoader(train_ds, batch_size=batch_size, shuffle=True, num_workers=num_workers)\n    val_loader = DataLoader(val_ds, batch_size=batch_size, shuffle=False, num_workers=num_workers)\n    test_loader = DataLoader(test_ds, batch_size=batch_size, shuffle=False, num_workers=num_workers)\n\n    return train_loader, val_loader, test_loader\n\n\ndef get_num_classes(dataset_cfg: dict) -> int:\n    if dataset_cfg['name'] == 'RANDOM_TINY':\n        return dataset_cfg.get('num_classes', 10)\n    # PLACEHOLDER: Adjust when adding real datasets\n    return dataset_cfg.get('num_classes')\n",
    "model_py": "\"\"\"Base model definitions.\n\nThe framework supports multiple architectures (baseline, proposed, ablations).\nModel-specific details can be filled in later while maintaining a consistent\nAPI thanks to the factory `build_model` function.\n\"\"\"\n\nimport torch\nimport torch.nn as nn\n\n\nclass BaseModel(nn.Module):\n    def __init__(self, num_classes: int):\n        super().__init__()\n        self.num_classes = num_classes\n\n    def forward(self, x):\n        raise NotImplementedError\n\n\nclass BaselineMLP(BaseModel):\n    \"\"\"A simple multi-layer perceptron suitable for synthetic data.\"\"\"\n\n    def __init__(self, num_classes: int, input_dim: int = 32):\n        super().__init__(num_classes)\n        self.classifier = nn.Sequential(\n            nn.Linear(input_dim, 64),\n            nn.ReLU(),\n            nn.Linear(64, 64),\n            nn.ReLU(),\n            nn.Linear(64, num_classes)\n        )\n\n    def forward(self, x):\n        return self.classifier(x)\n\n\nclass ProposedModel(BaseModel):\n    \"\"\"Placeholder for the OHGW-enhanced model architecture.\n\n    The proposed method (OHGW) is algorithmic and *not* architectural, so we\n    currently reuse the BaselineMLP. Specific experiments may override with\n    domain-appropriate nets (e.g. ResNet, Transformer).\"\"\"\n\n    def __init__(self, num_classes: int, input_dim: int = 32):\n        super().__init__(num_classes)\n        self.model = BaselineMLP(num_classes, input_dim=input_dim)\n\n    def forward(self, x):\n        return self.model(x)\n\n\nclass AblationModel(BaseModel):\n    \"\"\"A variant where OHGW effects are neutralised (e.g. random warm-start).\"\"\"\n\n    def __init__(self, num_classes: int, input_dim: int = 32):\n        super().__init__(num_classes)\n        self.model = BaselineMLP(num_classes, input_dim=input_dim)\n\n    def forward(self, x):\n        return self.model(x)\n\n\n# ----------------------------------------------------------------------------\n# Factory\n# ----------------------------------------------------------------------------\n\ndef build_model(model_cfg: dict, num_classes: int):\n    name = model_cfg['name']\n    if name == 'baseline_mlp':\n        return BaselineMLP(num_classes=num_classes, input_dim=model_cfg.get('input_dim', 32))\n    elif name == 'proposed_mlp':\n        return ProposedModel(num_classes=num_classes, input_dim=model_cfg.get('input_dim', 32))\n    elif name == 'ablation_mlp':\n        return AblationModel(num_classes=num_classes, input_dim=model_cfg.get('input_dim', 32))\n    # ------------------------------------------------------------------\n    # PLACEHOLDER: Add new architectures here.\n    # ------------------------------------------------------------------\n    else:\n        raise ValueError(f\"Unknown model name '{name}'.\")\n",
    "main_py": "import argparse\nimport os\nimport subprocess\nimport sys\nimport threading\nimport time\nfrom pathlib import Path\nfrom queue import Queue\nfrom typing import Dict, List\n\nimport torch\nimport yaml\n\nPROJECT_ROOT = Path(__file__).resolve().parent.parent\nCONFIG_DIR = PROJECT_ROOT / 'config'\nSRC_DIR = PROJECT_ROOT / 'src'\n\n\n# ----------------------------------------------------------------------------\n# Helpers for GPU allocation\n# ----------------------------------------------------------------------------\n\ndef get_available_gpu_indices() -> List[int]:\n    \"\"\"Return list of visible GPU indices based on torch.cuda and env vars.\"\"\"\n    if not torch.cuda.is_available():\n        return []\n    visible = os.environ.get('CUDA_VISIBLE_DEVICES', None)\n    if visible is not None:\n        return list(range(len(visible.split(','))))\n    return list(range(torch.cuda.device_count()))\n\n\n# ----------------------------------------------------------------------------\n# Sub-process management with tee-style logging\n# ----------------------------------------------------------------------------\n\ndef tee_stream(stream, log_file_handle, prefix):\n    for line in iter(stream.readline, ''):\n        if not line:\n            break\n        log_file_handle.write(line)\n        log_file_handle.flush()\n        sys.stdout.write(f\"[{prefix}] {line}\")\n        sys.stdout.flush()\n    stream.close()\n\n\ndef launch_run(run_cfg: Dict, results_dir: Path, gpu_id: int):\n    run_id = run_cfg['run_id']\n    run_dir = results_dir / run_id\n    run_dir.mkdir(parents=True, exist_ok=True)\n\n    # Serialize individual run config to YAML for the child process\n    config_path = run_dir / 'config.yaml'\n    with config_path.open('w') as f:\n        yaml.safe_dump(run_cfg, f)\n\n    cmd = [sys.executable, '-m', 'src.train', '--config', str(config_path), '--results-dir', str(results_dir), '--gpu-id', str(gpu_id)]\n\n    stdout_file = run_dir / 'stdout.log'\n    stderr_file = run_dir / 'stderr.log'\n\n    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, bufsize=1)\n\n    # Spawn tee threads\n    tee_threads = []\n    tee_threads.append(threading.Thread(target=tee_stream, args=(proc.stdout, stdout_file.open('w'), run_id + ':STDOUT'), daemon=True))\n    tee_threads.append(threading.Thread(target=tee_stream, args=(proc.stderr, stderr_file.open('w'), run_id + ':STDERR'), daemon=True))\n    for t in tee_threads:\n        t.start()\n\n    return proc, tee_threads\n\n\n# ----------------------------------------------------------------------------\n# Main orchestration\n# ----------------------------------------------------------------------------\n\ndef main(is_smoke_test: bool, results_dir: str):\n    results_dir = Path(results_dir)\n    results_dir.mkdir(parents=True, exist_ok=True)\n\n    # Select config file\n    yaml_path = CONFIG_DIR / ('smoke_test.yaml' if is_smoke_test else 'full_experiment.yaml')\n    with yaml_path.open('r') as f:\n        cfg = yaml.safe_load(f)\n\n    experiments = cfg['experiments']\n\n    gpu_indices = get_available_gpu_indices() or [None]  # CPU fallback\n    gpu_queue = Queue()\n    for idx in gpu_indices:\n        gpu_queue.put(idx)\n\n    processes = []  # list of tuples (proc, threads, gpu_id)\n\n    def worker(experiment_cfg):\n        gpu_id = gpu_queue.get()  # blocks until a GPU is free\n        try:\n            proc, tee_threads = launch_run(experiment_cfg, results_dir, gpu_id if gpu_id is not None else -1)\n            proc.wait()\n            for t in tee_threads:\n                t.join()\n        finally:\n            gpu_queue.put(gpu_id)\n\n    # Sequential submission in background threads to honour GPU queue\n    threads = []\n    for exp_cfg in experiments:\n        t = threading.Thread(target=worker, args=(exp_cfg,), daemon=False)\n        t.start()\n        threads.append(t)\n\n    # Wait until all experiments have finished\n    for t in threads:\n        t.join()\n\n    # Evaluation aggregation\n    eval_cmd = [sys.executable, '-m', 'src.evaluate', '--results-dir', str(results_dir)]\n    subprocess.run(eval_cmd, check=True)\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Main orchestration script for OHGW experiments')\n    mode_group = parser.add_mutually_exclusive_group(required=True)\n    mode_group.add_argument('--smoke-test', action='store_true')\n    mode_group.add_argument('--full-experiment', action='store_true')\n    parser.add_argument('--results-dir', required=True, type=str, help='Where to store all experiment outputs')\n    args = parser.parse_args()\n\n    main(is_smoke_test=args.smoke_test, results_dir=args.results_dir)\n",
    "pyproject_toml": "[build-system]\nrequires = [\"setuptools>=61.0\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"ohgw_experiments\"\nversion = \"0.1.0\"\ndescription = \"Common core foundation for OHGW experimental framework.\"\nrequires-python = \">=3.9\"\nauthors = [\n  { name = \"AI Researcher\", email = \"noreply@example.com\" }\n]\nlicense = { text = \"MIT\" }\n\n[project.dependencies]\n# Deep learning\ntorch = \"*\"\n# Data & utils\nnumpy = \"*\"\nscikit-learn = \"*\"\n# Plotting\nmatplotlib = \"*\"\nseaborn = \"*\"\n# Progress bars\ntqdm = \"*\"\n# YAML\nPyYAML = \"*\"\n# DataFrames\npandas = \"*\"\n",
    "smoke_test_yaml": "experiments:\n  - run_id: baseline_random\n    dataset:\n      name: RANDOM_TINY\n      batch_size: 64\n      num_classes: 10\n      num_features: 32\n    model:\n      name: baseline_mlp\n      input_dim: 32\n    hyperparameters:\n      lr: 0.1\n      weight_decay: 0.0005\n      momentum: 0.9\n    training:\n      epochs: 3\n    use_ohgw: false\n    quick_run: true\n\n  - run_id: ohgw_random\n    dataset:\n      name: RANDOM_TINY\n      batch_size: 64\n      num_classes: 10\n      num_features: 32\n    model:\n      name: proposed_mlp\n      input_dim: 32\n    hyperparameters:\n      lr: 0.1\n      weight_decay: 0.0005\n      momentum: 0.9\n    training:\n      epochs: 3\n    use_ohgw: true\n    eta_h: 0.001\n    quick_run: true\n",
    "full_experiment_yaml": "experiments:\n  # PLACEHOLDER: Insert all real experiment variations here.\n  # Each list item defines one experimental variation. Copy the same keys as in smoke_test.yaml and override\n  # dataset/model/hyperparameters/training specifics. Ensure every variation has a unique run_id.\n  - run_id: DATASET_PLACEHOLDER_BASELINE\n    dataset:\n      name: DATASET_PLACEHOLDER\n      SPECIFIC_CONFIG_PLACEHOLDER: value\n    model:\n      name: MODEL_PLACEHOLDER\n    hyperparameters:\n      lr: 0.1\n      weight_decay: 0.0005\n    training:\n      epochs: 200\n    use_ohgw: false\n\n  - run_id: DATASET_PLACEHOLDER_OHGW\n    dataset:\n      name: DATASET_PLACEHOLDER\n      SPECIFIC_CONFIG_PLACEHOLDER: value\n    model:\n      name: MODEL_PLACEHOLDER\n    hyperparameters:\n      lr: 0.1\n      weight_decay: 0.0005\n    training:\n      epochs: 200\n    use_ohgw: true\n    eta_h: 0.001\n  # Add further ablations or scheduler variants as needed.\n"
}
