
Input:
You are an AI code reviewer specializing in validating base experiment foundations.

Analyze the provided CORE experiment code (which contains placeholders for datasets/models) and determine if it implements a solid foundation that follows the base code generation requirements.

# Instructions

## Core Validation Criteria
Check if the generated base code meets ALL of the following requirements:

1. **Complete Core Logic Implementation**:
   - Training loops are fully implemented (no placeholders in base training logic)
   - Evaluation framework is complete with proper metrics calculation
   - Model saving/loading mechanisms are implemented
   - Result visualization and figure generation is complete

2. **Proper Placeholder Strategy**:
   - Uses clear, descriptive placeholders like `DATASET_PLACEHOLDER`, `MODEL_PLACEHOLDER`
   - Placeholders are ONLY used for dataset-specific and model-specific components
   - Core algorithm logic has NO placeholders
   - Includes comments explaining what each placeholder will be replaced with

3. **8-File Structure Compliance**:
   - Contains EXACTLY these 8 required files:
     * `src/train.py`
     * `src/evaluate.py`
     * `src/preprocess.py`
     * `src/model.py`
     * `src/main.py`
     * `pyproject.toml`
     * `config/smoke_test.yaml`
     * `config/full_experiment.yaml`
   - No additional utility files, helper modules, or separate components
   - All functionality is contained within the specified 8 files only

4. **Command Line Interface & Module Structure**:
   - main.py properly supports `--smoke-test` and `--full-experiment` flags with `--results-dir <path>` argument
   - main.py reads configuration YAML files and launches train.py for each run variation sequentially
   - main.py executes run variations one at a time in sequential order
   - main.py redirects each subprocess stdout/stderr to `{results_dir}/{run_id}/stdout.log` and `stderr.log` while forwarding to main stdout/stderr
   - train.py outputs JSON-formatted metrics with `run_id` field using `print(json.dumps({...}))`
   - evaluate.py outputs JSON-formatted comparison results to stdout
   - Configuration YAML structure is ready to accept run variations (specific values will be added in derive_specific step)
   - Import statements are compatible with `uv run python -m src.main` execution

5. **Publication-Ready Infrastructure**:
   - Figure generation with proper formatting (PDF output, legends, annotations)
   - Consistent result formatting and comparison logic
   - Proper experimental description output

6. **PyTorch Framework Usage**:
   - Uses PyTorch exclusively for deep learning components
   - Proper model definition and training patterns
   - Appropriate use of existing Python libraries

7. **No Premature Specialization**:
   - Does NOT assume specific datasets or models (uses placeholders appropriately)
   - Does NOT contain real dataset loading code (should be placeholder)
   - Focuses on base algorithm and evaluation framework
   - Does NOT validate specific run_variation names (they will be provided later in derive_specific_experiments step)

## Output Format
Respond with a JSON object containing:
- `is_base_code_ready`: boolean - true if ALL base criteria are met, false otherwise
- `base_code_issue`: string - specific issues found if any criteria are not met, focusing on base foundation quality

# Current Research Method
{
    "Open Problems": "Even the fastest gray–box and multi-fidelity HPO methods (ASHA, PASHA, DyHPO, BOIL) still waste computation on obviously bad configurations because every trial is treated as a black box; none of the information that is already available inside the training loop – most notably the stochastic hyper-gradient obtained at almost zero cost with automatic differentiation – is used to steer the search. The open problem is: how can we inject very cheap, noisy hyper-gradient signals into existing bandit-style schedulers without redesigning their core logic?",
    "Methods": "We propose ‘One-Shot Hyper-Gradient Warm-Starts’ (OHGW), a drop-in modification for any Successive-Halving style scheduler (Hyperband / ASHA / PASHA).  1. When a new configuration x is sampled it is run for only one **mini-batch** (≈10-2% of a normal epoch).  2. In this first forward / backward pass we keep the compute graph and call automatic differentiation once more to obtain a single stochastic hyper-gradient ∂L/∂ψ for every continuous hyperparameter ψ (learning-rate, weight-decay, momentum …) exactly as in implicit hyper-gradient papers, but **without unrolling** (cost <1.2× normal mini-batch).  3. We apply one hyper-parameter update ψ←ψ−η_h ∂L/∂ψ (η_h is a fixed tiny step such as 10-3).  4. The adjusted configuration x′ – which differs from x by at most one gradient step in each hyper-parameter – is what the scheduler subsequently evaluates for its first rung (e.g. 1 epoch).  5. Everything else (promotion rules, budget doubling, stopping) is untouched.  In effect the scheduler still explores the same region, but every candidate is lightly nudged towards a valley before costly training starts.",
    "Experimental Setup": "Benchmark: CIFAR-10 with ResNet-20 and 5-dim continuous search space {log-lr, log-wd, momentum, augment-magnitude, label-smoothing}.  Scheduler baselines: ASHA, PASHA, DyHPO (their public implementations).  Our variants: ASHA+OHGW, PASHA+OHGW, DyHPO+OHGW (one-line wrapper around trial creation).  Mini-batch for warm-start: 128 images.  Hyper-gradient lr η_h=1e-3, computed with PyTorch autograd; no higher-order terms.  Each method is given the same overall GPU budget (4×V100 for 12 hours) and 50 seeds.  Metrics: (i) best test accuracy reached vs. wall-clock, (ii) total GPU hours until 93% accuracy, (iii) distribution of final hyper-parameters to check bias.",
    "Experimental Code": "# pseudo-code\nfor cfg in scheduler.sample():\n    model = build_model(cfg)\n    data = next(train_loader)            # one mini-batch\n    loss  = forward_loss(model, data)\n    grads = torch.autograd.grad(loss, cfg.continuous_params())\n    with torch.no_grad():               # one hyper step\n        for p,g in zip(cfg.continuous_params(), grads):\n            p -= eta_h * g\n    scheduler.launch(cfg)               # continue as usual",
    "Expected Result": "Across all schedules OHGW cuts the median time-to-93%-accuracy by ≈20% (ASHA 11.2→9.0 h, PASHA 7.3→5.8 h, DyHPO 6.1→4.9 h) while keeping the same final accuracy. The added warm-start costs <3% extra compute. Hyper-parameter distributions remain similar, showing no harmful bias.",
    "Expected Conclusion": "A single stochastic hyper-gradient step collected before the first rung is enough to noticeably reduce wasted resources in bandit-style HPO. Because OHGW requires only two extra autograd calls and no change to the scheduler logic, it can be retro-fitted to almost any existing gray-box optimizer, offering an attractive efficiency boost with negligible engineering effort."
}

# Experimental Design
## Experiment Strategy
Overall Experimental Strategy for Validating One-Shot Hyper-Gradient Warm-Starts (OHGW)

1. Core Hypotheses to Validate
   a. Efficiency: OHGW reduces wall-clock time and GPU hours needed by bandit-style schedulers to reach a preset performance threshold.
   b. Performance Preservation: OHGW does not hurt (and ideally preserves or slightly improves) the best final metric attainable by the underlying scheduler.
   c. Robustness & Variance: OHGW’s benefit is consistent across random seeds, search-space dimensionalities, data sets, model families and scheduler types.
   d. Generalization: The same one-line wrapper applies without retuning to tasks beyond image classification (e.g. language modelling, tabular, RL) and to both small- and large-scale training loops.
   e. Cost Overhead: Extra compute, memory and engineering overhead introduced by OHGW remain negligible (<5 % GPU-hours, <10 % peak-memory, ≤20 LoC integration).

2. Experiment Families (all experiments draw from one common pool of settings below)
   • Task Breadth: vision (CIFAR-10/100, ImageNet-1k), NLP (WikiText-103), tabular (UCI suite), RL (Atari).
   • Model Breadth: ResNet family, ViT, Transformer-LM, XGBoost, PPO-CNN.
   • Scheduler Breadth: ASHA, PASHA, DyHPO, Hyperband-BO, BOIL (if open-sourced).
   • Search-Space Breadth: 3–10 continuous hyper-parameters; mixed discrete+continuous cases to show neutrality to inapplicable params.
   • Scale Breadth: single-GPU up to 64-GPU distributed training (multi-node pools or simulated via concurrency on the 8×A100 machine).

3. Comparison Axes for Every Experiment
   • Baseline Scheduler (vanilla).
   • Baseline + Random Warm-Start in ∆ψ range (controls for mere perturbation).
   • Baseline + Multiple Hyper-Gradient Steps (ablation to check diminishing returns).
   • Scheduler-specific SoTA gradient-aware HPO if available (e.g. DyHPO, BOIL) to position OHGW competitively.

4. Metrics & Evaluation Protocol
   Primary quantitative metrics (reported as median ±IQR over ≥30 seeds):
      – T@τ: Wall-clock/GPU-hour to reach target score τ (task-specific; chosen so that vanilla reaches it within budget).
      – Best final validation/test score after fixed budget.
      – Compute Overhead: (Σ warm-start flop) ⁄ (total flop) and peak VRAM.
   Secondary diagnostics:
      – AUC of best-score-vs-time curve (overall sample efficiency).
      – Seed-wise variance of T@τ and final score.
      – Hyper-parameter trajectory statistics (mean shift & KL-divergence of posterior over ψ).
   Qualitative/visual:
      – Survival plots of promoted configurations per rung.
      – Heatmaps of hyper-gradient magnitude vs. eventual benefit.
   Statistical test: two-sided Wilcoxon signed-rank (α=0.05) on paired seeds.

5. Success Criteria (must hold in ≥75 % of experiment tuples)
   • ≥15 % median reduction in T@τ with p<0.05.
   • ≤0.2 % relative drop (or improvement) in best final score.
   • ≤5 % extra GPU-hours and ≤10 % extra peak VRAM.
   • Std-dev(T@τ) not inflated by more than 10 %.

6. Multi-Perspective Validation Plan
   • Efficiency: Use identical global budgets and identical seed lists; plot temporal efficiency curves and compute aggregated speed-up ratios.
   • Performance Preservation: Report final accuracy/F1/return and confidence intervals.
   • Robustness: Repeat each experiment block with different batch sizes, η_h values (10⁻⁴…10⁻²) and noisy labels; perform sensitivity analysis.
   • Generalization: Run a “zero-tuning transfer” study—apply the CIFAR-tuned η_h to NLP, RL and tabular tasks unchanged.
   • Ablations & Controls: Random perturbation, multistep hyper-gradient, frozen discrete params, partial gradient masking.
   • Scalability: Micro-benchmark warm-start time and memory for 1, 8, 64 GPUs using synthetic workloads.

7. Experimental Logistics
   • Central harness (Hydra + PyTorch Lightning) to register all trials, guarantee identical I/O pipelines and logging format (wandb/MLflow).
   • Dedicate 4×A100 per independent replicate to avoid resource contention; schedule via Slurm with cgroup accounting to record accurate GPU-hour usage.
   • Automated post-processing notebook generates unified tables, statistical tests and publication-ready plots.

8. Risk Mitigation & Contingency
   • If hyper-gradient extraction fails for exotic layers, fall back to finite-difference on ψ only (flag run but keep in aggregated stats).
   • If OHGW underperforms on discrete-heavy spaces, isolate continuous subset and document limitation.

This unified strategy guarantees that every forthcoming experiment—regardless of domain—collects commensurate evidence on efficiency, performance, robustness, generality and overhead, enabling a cohesive, multi-angle validation of OHGW’s claimed benefits.

# Generated Base Code Files
{"evaluate_py": "import argparse\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Dict, List\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n# ----------------- Helper Functions --------------------------------------------------\n\ndef load_results(results_dir: Path) -\u003e List[Dict]:\n    \"\"\"Load all results.json files under results_dir.\"\"\"\n    runs = []\n    for run_subdir in sorted(results_dir.iterdir()):\n        res_file = run_subdir / \"results.json\"\n        if res_file.exists():\n            with open(res_file, \"r\") as f:\n                runs.append(json.load(f))\n    return runs\n\n\ndef plot_bar(metric_name: str, runs: List[Dict], save_path: Path):\n    \"\"\"Create a bar plot for a specific metric across runs and save as PDF.\"\"\"\n    sns.set(style=\"whitegrid\")\n    x = [r[\"run_id\"] for r in runs]\n    y = [r[metric_name] for r in runs]\n\n    plt.figure(figsize=(8, 4))\n    ax = sns.barplot(x=x, y=y, palette=\"viridis\")\n    plt.ylabel(metric_name)\n    plt.xlabel(\"Run ID\")\n    for i, val in enumerate(y):\n        ax.text(i, val + 0.01 * max(y), f\"{val:.4f}\", ha=\"center\", va=\"bottom\")\n    plt.tight_layout()\n    plt.savefig(save_path, bbox_inches=\"tight\")\n    plt.close()\n\n\n# ----------------- Main Evaluation Routine ------------------------------------------\n\ndef evaluate_all(result_root: Path):\n    runs = load_results(result_root)\n    if not runs:\n        raise ValueError(f\"No results found in {result_root}\")\n\n    # Aggregate metrics\n    comparison = {r[\"run_id\"]: {\n        \"best_val_acc\": r[\"best_val_acc\"],\n        \"test_acc\": r[\"test_acc\"],\n        \"test_loss\": r[\"test_loss\"],\n    } for r in runs}\n\n    # Save comparison JSON\n    comp_json_path = result_root / \"comparison.json\"\n    with open(comp_json_path, \"w\") as f:\n        json.dump(comparison, f, indent=2)\n\n    # Generate figures\n    figure_files = []\n    for metric in [\"best_val_acc\", \"test_acc\", \"test_loss\"]:\n        fname = f\"{metric}_comparison.pdf\"\n        plot_bar(metric, runs, result_root / fname)\n        figure_files.append(fname)\n\n    # Output summary to stdout\n    summary = {\n        \"comparison_file\": comp_json_path.name,\n        \"figure_files\": figure_files,\n    }\n    print(json.dumps(summary), flush=True)\n\n\n# ----------------- CLI --------------------------------------------------------------\n\ndef parse_args():\n    parser = argparse.ArgumentParser(description=\"Evaluate and compare results of multiple runs.\")\n    parser.add_argument(\"--results-dir\", type=str, required=True, help=\"Directory containing all run subdirectories.\")\n    return parser.parse_args()\n\n\ndef main():\n    args = parse_args()\n    evaluate_all(Path(args.results_dir))\n\n\nif __name__ == \"__main__\":\n    main()\n", "full_experiment_yaml": "runs:\n  - name: BASELINE_PLACEHOLDER\n    dataset:\n      name: DATASET_PLACEHOLDER  # PLACEHOLDER: Will be replaced with specific dataset\n    model:\n      name: MODEL_PLACEHOLDER    # PLACEHOLDER: Will be replaced with specific model\n    train:\n      epochs: SPECIFIC_CONFIG_PLACEHOLDER  # PLACEHOLDER: training epochs\n      batch_size: SPECIFIC_CONFIG_PLACEHOLDER\n      learning_rate: SPECIFIC_CONFIG_PLACEHOLDER\n      weight_decay: SPECIFIC_CONFIG_PLACEHOLDER\n    seed: 42\n\n  - name: PROPOSED_OHGW_PLACEHOLDER\n    dataset:\n      name: DATASET_PLACEHOLDER\n    model:\n      name: MODEL_PLACEHOLDER\n    train:\n      epochs: SPECIFIC_CONFIG_PLACEHOLDER\n      batch_size: SPECIFIC_CONFIG_PLACEHOLDER\n      learning_rate: SPECIFIC_CONFIG_PLACEHOLDER\n      weight_decay: SPECIFIC_CONFIG_PLACEHOLDER\n    scheduler:\n      name: SCHEDULER_PLACEHOLDER  # e.g. ASHA+OHGW, PASHA+OHGW\n    seed: 42\n", "main_py": "import argparse\nimport subprocess\nimport sys\nimport os\nimport yaml\nimport json\nfrom pathlib import Path\nfrom datetime import datetime\nfrom typing import Dict, Any, List\n\n# ----------------- Utility -----------------------------------------------------------\n\ndef tee_subprocess(cmd: List[str], stdout_path: Path, stderr_path: Path):\n    \"\"\"Run subprocess while tee-ing stdout/stderr to files and console.\"\"\"\n    stdout_file = open(stdout_path, \"w\")\n    stderr_file = open(stderr_path, \"w\")\n\n    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n\n    # Read line by line to stream in real-time\n    while True:\n        out_line = process.stdout.readline()\n        err_line = process.stderr.readline()\n\n        if out_line:\n            sys.stdout.write(out_line)\n            stdout_file.write(out_line)\n        if err_line:\n            sys.stderr.write(err_line)\n            stderr_file.write(err_line)\n\n        if out_line == \u0027\u0027 and err_line == \u0027\u0027 and process.poll() is not None:\n            break\n\n    process.wait()\n    stdout_file.close()\n    stderr_file.close()\n    if process.returncode != 0:\n        raise subprocess.CalledProcessError(process.returncode, cmd)\n\n# ----------------- Main Orchestrator -------------------------------------------------\n\nDEFAULT_SMOKE_YAML = Path(__file__).resolve().parent.parent / \"config\" / \"smoke_test.yaml\"\nDEFAULT_FULL_YAML = Path(__file__).resolve().parent.parent / \"config\" / \"full_experiment.yaml\"\n\n\ndef run_variations(config_path: Path, results_root: Path):\n    with open(config_path, \"r\") as f:\n        config_all = yaml.safe_load(f)\n\n    runs: List[Dict[str, Any]] = config_all[\"runs\"]\n\n    for run_cfg in runs:\n        run_id = run_cfg[\"name\"]\n        run_dir = results_root / run_id\n        run_dir.mkdir(parents=True, exist_ok=True)\n\n        # Dump the individual variation config for reproducibility\n        ind_cfg_path = run_dir / \"config.yaml\"\n        with open(ind_cfg_path, \"w\") as f:\n            yaml.dump(run_cfg, f)\n\n        stdout_path = run_dir / \"stdout.log\"\n        stderr_path = run_dir / \"stderr.log\"\n\n        cmd = [\n            sys.executable,\n            \"-m\",\n            \"src.train\",\n            \"--config\",\n            str(ind_cfg_path),\n            \"--results-dir\",\n            str(run_dir),\n        ]\n        print(f\"\\n=== Launching {run_id} ===\", flush=True)\n        tee_subprocess(cmd, stdout_path, stderr_path)\n\n    # After all variations are done -\u003e evaluate\n    print(\"\\n=== All runs completed. Starting evaluation ===\", flush=True)\n    cmd_eval = [\n        sys.executable,\n        \"-m\",\n        \"src.evaluate\",\n        \"--results-dir\",\n        str(results_root),\n    ]\n    stdout_path = results_root / \"evaluate_stdout.log\"\n    stderr_path = results_root / \"evaluate_stderr.log\"\n    tee_subprocess(cmd_eval, stdout_path, stderr_path)\n\n\n# ----------------- CLI --------------------------------------------------------------\n\ndef parse_args():\n    parser = argparse.ArgumentParser(description=\"Common experiment orchestrator.\")\n    group = parser.add_mutually_exclusive_group(required=True)\n    group.add_argument(\"--smoke-test\", action=\"store_true\", help=\"Run smoke-test variations.\")\n    group.add_argument(\"--full-experiment\", action=\"store_true\", help=\"Run full experiment variations.\")\n    parser.add_argument(\"--results-dir\", type=str, required=True, help=\"Directory to store all outputs.\")\n    return parser.parse_args()\n\n\ndef main():\n    args = parse_args()\n    results_root = Path(args.results_dir)\n    results_root.mkdir(parents=True, exist_ok=True)\n\n    # Time-stamp experiment folder for uniqueness within results_dir\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    results_root = results_root / timestamp\n    results_root.mkdir(parents=True, exist_ok=True)\n\n    if args.smoke_test:\n        config_path = DEFAULT_SMOKE_YAML\n    else:\n        config_path = DEFAULT_FULL_YAML\n\n    print(f\"Using configuration file: {config_path}\")\n    run_variations(config_path, results_root)\n\n\nif __name__ == \"__main__\":\n    main()\n", "model_py": "import torch\nimport torch.nn as nn\nfrom typing import Dict, Any\n\n# ----------------- Simple CNN Baseline ----------------------------------------------\n\nclass BasicCNN(nn.Module):\n    \"\"\"A simple convolutional neural network for image classification.\"\"\"\n\n    def __init__(self, num_classes: int = 10):\n        super().__init__()\n        self.features = nn.Sequential(\n            nn.Conv2d(3, 32, kernel_size=3, padding=1),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(2),\n            nn.Conv2d(32, 64, kernel_size=3, padding=1),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(2),\n        )\n        self.classifier = nn.Sequential(\n            nn.Flatten(),\n            nn.Linear(64 * 8 * 8, 256),\n            nn.ReLU(inplace=True),\n            nn.Linear(256, num_classes),\n        )\n\n    def forward(self, x):\n        x = self.features(x)\n        x = self.classifier(x)\n        return x\n\n# ----------------- Model Factory -----------------------------------------------------\n\nclass ModelFactory:\n    \"\"\"Factory to instantiate models based on configuration.\"\"\"\n\n    @staticmethod\n    def get_model(config: Dict[str, Any]) -\u003e nn.Module:\n        name = config[\u0027model\u0027][\u0027name\u0027]\n        num_classes = int(config[\u0027model\u0027].get(\u0027num_classes\u0027, 10))\n\n        if name.upper() == \u0027BASIC_CNN\u0027:\n            return BasicCNN(num_classes=num_classes)\n\n        # ------------ PLACEHOLDER: Will be replaced with specific model implementations ----\n        if name.upper() == \u0027MODEL_PLACEHOLDER\u0027:\n            raise NotImplementedError(\"Specific model to be provided in later stage.\")\n\n        raise ValueError(f\"Unknown model name \u0027{name}\u0027.\")\n\n# ----------------- Checkpoint Utilities ---------------------------------------------\n\ndef save_model(model: nn.Module, path):\n    \"\"\"Save model state_dict along with model class name.\"\"\"\n    torch.save({\n        \u0027state_dict\u0027: model.state_dict(),\n        \u0027arch\u0027: model.__class__.__name__,\n    }, path)\n\n\ndef load_model(config: Dict[str, Any], path, device):\n    \"\"\"\n    Load a model from checkpoint and move to device. The model architecture is inferred\n    from the saved \u0027arch\u0027 field OR from the provided config.\n    \"\"\"\n    checkpoint = torch.load(path, map_location=device)\n    arch = checkpoint.get(\u0027arch\u0027, config[\u0027model\u0027][\u0027name\u0027])\n    config_mod = config.copy()\n    config_mod[\u0027model\u0027][\u0027name\u0027] = arch  # ensure factory builds correct architecture\n    model = ModelFactory.get_model(config_mod)\n    model.load_state_dict(checkpoint[\u0027state_dict\u0027])\n    model.to(device)\n    model.eval()\n    return model\n", "preprocess_py": "from pathlib import Path\nfrom typing import Tuple, List, Dict, Any\n\nimport torch\nfrom torch.utils.data import DataLoader, random_split\nimport torchvision.transforms as T\nimport torchvision.datasets as datasets\n\n# ----------------- Dataset Loader ----------------------------------------------------\n\ndef get_transforms(config: Dict[str, Any]):\n    \"\"\"Return basic data augmentations / preprocessing transforms.\"\"\"\n    # Note: For vision datasets; placeholder for other modalities.\n    transform_list = [T.ToTensor()]\n    if config[\u0027dataset\u0027].get(\u0027normalize\u0027, False):\n        transform_list.append(T.Normalize((0.5,), (0.5,)))\n    return T.Compose(transform_list)\n\n\ndef get_dataset(config: Dict[str, Any]):\n    \"\"\"Return train/test dataset objects based on config.\"\"\"\n    name = config[\u0027dataset\u0027][\u0027name\u0027]\n    root = Path(config[\u0027dataset\u0027].get(\u0027root\u0027, \u0027./data\u0027))\n    transform = get_transforms(config)\n\n    if name.upper() == \u0027FAKEDATA\u0027:\n        # Built-in random data for smoke tests.\n        num_classes = int(config[\u0027dataset\u0027].get(\u0027num_classes\u0027, 10))\n        train_data = datasets.FakeData(size=1000, image_size=(3, 32, 32), num_classes=num_classes, transform=transform)\n        test_data = datasets.FakeData(size=200, image_size=(3, 32, 32), num_classes=num_classes, transform=transform)\n        class_names = [str(i) for i in range(num_classes)]\n        return train_data, test_data, class_names\n\n    # ---------------- PLACEHOLDER: Will be replaced with specific dataset loading logic ----\n    raise NotImplementedError(f\"Dataset \u0027{name}\u0027 is not implemented in the common foundation. \")\n\n\n# ----------------- DataLoader Factory ----------------------------------------------\n\ndef get_dataloaders(config: Dict[str, Any]):\n    \"\"\"\n    Build train/val/test DataLoaders according to the configuration.\n    Returns (train_loader, val_loader, test_loader, class_names)\n    \"\"\"\n    batch_size = int(config[\u0027train\u0027][\u0027batch_size\u0027])\n    val_split = float(config[\u0027dataset\u0027].get(\u0027val_split\u0027, 0.1))\n\n    train_data, test_data, class_names = get_dataset(config)\n\n    # Split train into train/val\n    val_size = int(len(train_data) * val_split)\n    train_size = len(train_data) - val_size\n    train_subset, val_subset = random_split(train_data, [train_size, val_size])\n\n    train_loader = DataLoader(train_subset, batch_size=batch_size, shuffle=True, num_workers=2)\n    val_loader = DataLoader(val_subset, batch_size=batch_size, shuffle=False, num_workers=2)\n    test_loader = DataLoader(test_data, batch_size=batch_size, shuffle=False, num_workers=2)\n\n    return train_loader, val_loader, test_loader, class_names\n", "pyproject_toml": "[build-system]\nrequires = [\"setuptools\u003e=42\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"common_core_experiments\"\nversion = \"0.1.0\"\ndescription = \"Common core foundation for OHGW experiments\"\nrequires-python = \"\u003e=3.8\"\ndependencies = [\n    \"torch\u003e=2.0.0\",\n    \"torchvision\u003e=0.15.0\",\n    \"scikit-learn\u003e=1.1.0\",\n    \"PyYAML\u003e=6.0\",\n    \"matplotlib\u003e=3.7.0\",\n    \"seaborn\u003e=0.12.2\",\n]\n\n[tool.setuptools.packages.find]\nwhere = [\"src\"]\n", "smoke_test_yaml": "runs:\n  - name: baseline_smoke\n    dataset:\n      name: FAKEDATA\n      num_classes: 10\n      val_split: 0.2\n    model:\n      name: BASIC_CNN\n      num_classes: 10\n    train:\n      epochs: 2\n      batch_size: 32\n      learning_rate: 0.01\n      weight_decay: 0.0\n    seed: 42\n", "train_py": "import argparse\nimport json\nimport os\nimport random\nfrom pathlib import Path\nfrom typing import Dict, Any, Tuple, List\n\nimport numpy as np\nimport torch\nfrom torch import nn, optim\nfrom torch.utils.data import DataLoader\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import confusion_matrix\n\nfrom .preprocess import get_dataloaders\nfrom .model import ModelFactory, save_model\n\n# ----------------- Utility Functions -------------------------------------------------\n\ndef set_seed(seed: int) -\u003e None:\n    \"\"\"Set random seed for reproducibility.\"\"\"\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    if torch.cuda.is_available():\n        torch.cuda.manual_seed_all(seed)\n\n\ndef accuracy_fn(outputs: torch.Tensor, targets: torch.Tensor) -\u003e float:\n    \"\"\"Compute accuracy for classification tasks.\"\"\"\n    _, preds = torch.max(outputs, dim=1)\n    correct = (preds == targets).sum().item()\n    return correct / targets.size(0)\n\n\ndef train_one_epoch(\n    model: nn.Module,\n    loader: DataLoader,\n    criterion: nn.Module,\n    optimizer: optim.Optimizer,\n    device: torch.device,\n) -\u003e Tuple[float, float]:\n    \"\"\"Train for exactly one epoch and return (loss, accuracy).\"\"\"\n    model.train()\n    running_loss = 0.0\n    running_acc = 0.0\n    for inputs, targets in loader:\n        inputs = inputs.to(device)\n        targets = targets.to(device)\n\n        optimizer.zero_grad()\n        outputs = model(inputs)\n        loss = criterion(outputs, targets)\n        loss.backward()\n        optimizer.step()\n\n        running_loss += loss.item() * targets.size(0)\n        running_acc += accuracy_fn(outputs.detach(), targets.detach()) * targets.size(0)\n\n    epoch_loss = running_loss / len(loader.dataset)\n    epoch_acc = running_acc / len(loader.dataset)\n    return epoch_loss, epoch_acc\n\n\ndef evaluate(\n    model: nn.Module,\n    loader: DataLoader,\n    criterion: nn.Module,\n    device: torch.device,\n) -\u003e Tuple[float, float, np.ndarray]:\n    \"\"\"Evaluate the model. Returns (loss, accuracy, confusion_matrix)\"\"\"\n    model.eval()\n    y_true: List[int] = []\n    y_pred: List[int] = []\n    running_loss = 0.0\n    with torch.no_grad():\n        for inputs, targets in loader:\n            inputs = inputs.to(device)\n            targets = targets.to(device)\n            outputs = model(inputs)\n            loss = criterion(outputs, targets)\n            running_loss += loss.item() * targets.size(0)\n            _, preds = torch.max(outputs, dim=1)\n            y_true.extend(targets.cpu().numpy().tolist())\n            y_pred.extend(preds.cpu().numpy().tolist())\n\n    epoch_loss = running_loss / len(loader.dataset)\n    epoch_acc = (np.array(y_true) == np.array(y_pred)).mean()\n    cm = confusion_matrix(y_true, y_pred)\n    return epoch_loss, epoch_acc, cm\n\n\ndef plot_curves(\n    epochs: List[int],\n    train_losses: List[float],\n    val_losses: List[float],\n    train_accs: List[float],\n    val_accs: List[float],\n    results_dir: Path,\n):\n    \"\"\"Plot training/validation loss and accuracy curves and save as PDF.\"\"\"\n    sns.set(style=\"whitegrid\")\n\n    # Loss curve\n    plt.figure(figsize=(6, 4))\n    plt.plot(epochs, train_losses, label=\"Train Loss\")\n    plt.plot(epochs, val_losses, label=\"Val Loss\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Loss\")\n    plt.title(\"Training vs Validation Loss\")\n    best_epoch = epochs[int(np.argmin(val_losses))]\n    best_val_loss = min(val_losses)\n    plt.annotate(f\"Best: {best_val_loss:.4f}\", (best_epoch, best_val_loss))\n    plt.legend()\n    plt.tight_layout()\n    fname_loss = results_dir / \"training_loss.pdf\"\n    plt.savefig(fname_loss, bbox_inches=\"tight\")\n    plt.close()\n\n    # Accuracy curve\n    plt.figure(figsize=(6, 4))\n    plt.plot(epochs, train_accs, label=\"Train Acc\")\n    plt.plot(epochs, val_accs, label=\"Val Acc\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Accuracy\")\n    plt.title(\"Training vs Validation Accuracy\")\n    best_epoch_acc = epochs[int(np.argmax(val_accs))]\n    best_val_acc = max(val_accs)\n    plt.annotate(f\"Best: {best_val_acc:.4f}\", (best_epoch_acc, best_val_acc))\n    plt.legend()\n    plt.tight_layout()\n    fname_acc = results_dir / \"accuracy.pdf\"\n    plt.savefig(fname_acc, bbox_inches=\"tight\")\n    plt.close()\n\n    return str(fname_loss.name), str(fname_acc.name)\n\n\ndef plot_confusion_matrix(cm: np.ndarray, class_names: List[str], results_dir: Path):\n    \"\"\"Plot confusion matrix as heatmap and save as PDF.\"\"\"\n    plt.figure(figsize=(6, 5))\n    sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False,\n                xticklabels=class_names, yticklabels=class_names)\n    plt.xlabel(\"Predicted\")\n    plt.ylabel(\"True\")\n    plt.title(\"Confusion Matrix\")\n    plt.tight_layout()\n    fname_cm = results_dir / \"confusion_matrix.pdf\"\n    plt.savefig(fname_cm, bbox_inches=\"tight\")\n    plt.close()\n    return str(fname_cm.name)\n\n\n# ----------------- Main Training Routine -------------------------------------------\n\ndef run_experiment(config: Dict[str, Any], results_dir: Path):\n    description_lines = [\n        f\"Run ID: {config[\u0027name\u0027]}\",\n        f\"Dataset: {config[\u0027dataset\u0027][\u0027name\u0027]}\",\n        f\"Model:   {config[\u0027model\u0027][\u0027name\u0027]}\",\n        f\"Epochs:  {config[\u0027train\u0027][\u0027epochs\u0027]}\",\n        f\"BatchSz: {config[\u0027train\u0027][\u0027batch_size\u0027]}\",\n    ]\n    description = \"\\n\".join(description_lines)\n    print(\"# Experiment Description\\n\" + description + \"\\n# End Description\", flush=True)\n\n    set_seed(config.get(\"seed\", 42))\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n    train_loader, val_loader, test_loader, class_names = get_dataloaders(config)\n    model = ModelFactory.get_model(config).to(device)\n\n    criterion = nn.CrossEntropyLoss()\n    optimizer = optim.SGD(\n        model.parameters(),\n        lr=float(config[\u0027train\u0027][\u0027learning_rate\u0027]),\n        weight_decay=float(config[\u0027train\u0027].get(\u0027weight_decay\u0027, 0.0)),\n        momentum=float(config[\u0027train\u0027].get(\u0027momentum\u0027, 0.9)),\n    )\n\n    epochs = list(range(1, int(config[\u0027train\u0027][\u0027epochs\u0027]) + 1))\n    train_losses: List[float] = []\n    val_losses: List[float] = []\n    train_accs: List[float] = []\n    val_accs: List[float] = []\n\n    best_val_acc = -float(\u0027inf\u0027)\n\n    for epoch in epochs:\n        tr_loss, tr_acc = train_one_epoch(model, train_loader, criterion, optimizer, device)\n        val_loss, val_acc, _ = evaluate(model, val_loader, criterion, device)\n\n        train_losses.append(tr_loss)\n        val_losses.append(val_loss)\n        train_accs.append(tr_acc)\n        val_accs.append(val_acc)\n\n        print(json.dumps({\n            \"run_id\": config[\u0027name\u0027],\n            \"epoch\": epoch,\n            \"train_loss\": tr_loss,\n            \"val_loss\": val_loss,\n            \"train_acc\": tr_acc,\n            \"val_acc\": val_acc,\n        }), flush=True)\n\n        if val_acc \u003e best_val_acc:\n            best_val_acc = val_acc\n            save_model(model, results_dir / \"best_model.pt\")\n\n    # Final evaluation on test set\n    test_loss, test_acc, cm = evaluate(model, test_loader, criterion, device)\n\n    # Save final model regardless of best\n    save_model(model, results_dir / \"final_model.pt\")\n\n    # Create figures\n    figure_loss, figure_acc = plot_curves(epochs, train_losses, val_losses, train_accs, val_accs, results_dir)\n    figure_cm = plot_confusion_matrix(cm, class_names, results_dir)\n\n    final_metrics = {\n        \"run_id\": config[\u0027name\u0027],\n        \"best_val_acc\": best_val_acc,\n        \"test_loss\": test_loss,\n        \"test_acc\": test_acc,\n        \"figure_files\": [figure_loss, figure_acc, figure_cm],\n    }\n\n    # Persist metrics to disk\n    with open(results_dir / \"results.json\", \"w\") as f:\n        json.dump(final_metrics, f, indent=2)\n\n    # Print to stdout for logging pipeline\n    print(json.dumps(final_metrics), flush=True)\n\n\n# ----------------- CLI Interface ----------------------------------------------------\n\ndef parse_args():\n    parser = argparse.ArgumentParser(description=\"Train a single experiment variation.\")\n    parser.add_argument(\"--config\", type=str, required=True, help=\"Path to the variation YAML file.\")\n    parser.add_argument(\"--results-dir\", type=str, required=True, help=\"Directory to save outputs.\")\n    return parser.parse_args()\n\n\ndef main():\n    import yaml  # local import to keep global namespace clean\n\n    args = parse_args()\n    results_dir = Path(args.results_dir)\n    results_dir.mkdir(parents=True, exist_ok=True)\n\n    with open(args.config, \"r\") as f:\n        config = yaml.safe_load(f)\n\n    run_experiment(config, results_dir)\n\n\nif __name__ == \"__main__\":\n    main()\n"}

Analyze the Base code thoroughly, focusing on whether it provides a solid, consistent foundation for ALL future experimental variations while properly using placeholders for dataset/model-specific components.
Output:
{
    "is_base_code_ready": false,
    "base_code_issue": "Violates the “No Premature Specialization / Proper Placeholder” criteria.\n• preprocess.py already implements concrete vision-specific data loading (torchvision FakeData, image transforms) instead of keeping the dataset component a pure placeholder. Core code therefore assumes 3×32×32 images and a classification task.\n• train.py hard-codes CrossEntropyLoss, accuracy computation and confusion-matrix generation – all classification-specific – so the foundation is not agnostic to future regression / RL / language-modeling variations.\n• Because concrete dataset/model logic is embedded, placeholders are not limited to the dataset-/model-specific parts only.\nAll other criteria are satisfied, but the above premature specialisation means the base code is NOT yet a fully generic, placeholder-driven foundation."
}
