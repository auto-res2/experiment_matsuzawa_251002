
Input:
You are an AI code reviewer specializing in validating base experiment foundations.

Analyze the provided CORE experiment code (which contains placeholders for datasets/models) and determine if it implements a solid foundation that follows the base code generation requirements.

# Instructions

## Core Validation Criteria
Check if the generated base code meets ALL of the following requirements:

1. **Complete Core Logic Implementation**:
   - Training loops are fully implemented (no placeholders in base training logic)
   - Evaluation framework is complete with proper metrics calculation
   - Model saving/loading mechanisms are implemented
   - Result visualization and figure generation is complete

2. **Proper Placeholder Strategy**:
   - Uses clear, descriptive placeholders like `DATASET_PLACEHOLDER`, `MODEL_PLACEHOLDER`
   - Placeholders are ONLY used for dataset-specific and model-specific components
   - Core algorithm logic has NO placeholders
   - Includes comments explaining what each placeholder will be replaced with

3. **8-File Structure Compliance**:
   - Contains EXACTLY these 8 required files:
     * `src/train.py`
     * `src/evaluate.py`
     * `src/preprocess.py`
     * `src/model.py`
     * `src/main.py`
     * `pyproject.toml`
     * `config/smoke_test.yaml`
     * `config/full_experiment.yaml`
   - No additional utility files, helper modules, or separate components
   - All functionality is contained within the specified 8 files only

4. **Command Line Interface & Module Structure**:
   - main.py properly supports `--smoke-test` and `--full-experiment` flags with `--results-dir <path>` argument
   - main.py reads configuration YAML files and launches train.py for each run variation sequentially
   - main.py executes run variations one at a time in sequential order
   - main.py redirects each subprocess stdout/stderr to `{results_dir}/{run_id}/stdout.log` and `stderr.log` while forwarding to main stdout/stderr
   - train.py outputs JSON-formatted metrics with `run_id` field using `print(json.dumps({...}))`
   - evaluate.py outputs JSON-formatted comparison results to stdout
   - Configuration YAML structure is ready to accept run variations (specific values will be added in derive_specific step)
   - Import statements are compatible with `uv run python -m src.main` execution

5. **Publication-Ready Infrastructure**:
   - Figure generation with proper formatting (PDF output, legends, annotations)
   - Consistent result formatting and comparison logic
   - Proper experimental description output

6. **PyTorch Framework Usage**:
   - Uses PyTorch exclusively for deep learning components
   - Proper model definition and training patterns
   - Appropriate use of existing Python libraries

7. **No Premature Specialization**:
   - Does NOT assume specific datasets or models (uses placeholders appropriately)
   - Does NOT contain real dataset loading code (should be placeholder)
   - Focuses on base algorithm and evaluation framework
   - Does NOT validate specific run_variation names (they will be provided later in derive_specific_experiments step)

## Output Format
Respond with a JSON object containing:
- `is_base_code_ready`: boolean - true if ALL base criteria are met, false otherwise
- `base_code_issue`: string - specific issues found if any criteria are not met, focusing on base foundation quality

# Current Research Method
{
    "Open Problems": "Even the fastest gray–box and multi-fidelity HPO methods (ASHA, PASHA, DyHPO, BOIL) still waste computation on obviously bad configurations because every trial is treated as a black box; none of the information that is already available inside the training loop – most notably the stochastic hyper-gradient obtained at almost zero cost with automatic differentiation – is used to steer the search. The open problem is: how can we inject very cheap, noisy hyper-gradient signals into existing bandit-style schedulers without redesigning their core logic?",
    "Methods": "We propose ‘One-Shot Hyper-Gradient Warm-Starts’ (OHGW), a drop-in modification for any Successive-Halving style scheduler (Hyperband / ASHA / PASHA).  1. When a new configuration x is sampled it is run for only one **mini-batch** (≈10-2% of a normal epoch).  2. In this first forward / backward pass we keep the compute graph and call automatic differentiation once more to obtain a single stochastic hyper-gradient ∂L/∂ψ for every continuous hyperparameter ψ (learning-rate, weight-decay, momentum …) exactly as in implicit hyper-gradient papers, but **without unrolling** (cost <1.2× normal mini-batch).  3. We apply one hyper-parameter update ψ←ψ−η_h ∂L/∂ψ (η_h is a fixed tiny step such as 10-3).  4. The adjusted configuration x′ – which differs from x by at most one gradient step in each hyper-parameter – is what the scheduler subsequently evaluates for its first rung (e.g. 1 epoch).  5. Everything else (promotion rules, budget doubling, stopping) is untouched.  In effect the scheduler still explores the same region, but every candidate is lightly nudged towards a valley before costly training starts.",
    "Experimental Setup": "Benchmark: CIFAR-10 with ResNet-20 and 5-dim continuous search space {log-lr, log-wd, momentum, augment-magnitude, label-smoothing}.  Scheduler baselines: ASHA, PASHA, DyHPO (their public implementations).  Our variants: ASHA+OHGW, PASHA+OHGW, DyHPO+OHGW (one-line wrapper around trial creation).  Mini-batch for warm-start: 128 images.  Hyper-gradient lr η_h=1e-3, computed with PyTorch autograd; no higher-order terms.  Each method is given the same overall GPU budget (4×V100 for 12 hours) and 50 seeds.  Metrics: (i) best test accuracy reached vs. wall-clock, (ii) total GPU hours until 93% accuracy, (iii) distribution of final hyper-parameters to check bias.",
    "Experimental Code": "# pseudo-code\nfor cfg in scheduler.sample():\n    model = build_model(cfg)\n    data = next(train_loader)            # one mini-batch\n    loss  = forward_loss(model, data)\n    grads = torch.autograd.grad(loss, cfg.continuous_params())\n    with torch.no_grad():               # one hyper step\n        for p,g in zip(cfg.continuous_params(), grads):\n            p -= eta_h * g\n    scheduler.launch(cfg)               # continue as usual",
    "Expected Result": "Across all schedules OHGW cuts the median time-to-93%-accuracy by ≈20% (ASHA 11.2→9.0 h, PASHA 7.3→5.8 h, DyHPO 6.1→4.9 h) while keeping the same final accuracy. The added warm-start costs <3% extra compute. Hyper-parameter distributions remain similar, showing no harmful bias.",
    "Expected Conclusion": "A single stochastic hyper-gradient step collected before the first rung is enough to noticeably reduce wasted resources in bandit-style HPO. Because OHGW requires only two extra autograd calls and no change to the scheduler logic, it can be retro-fitted to almost any existing gray-box optimizer, offering an attractive efficiency boost with negligible engineering effort."
}

# Experimental Design
## Experiment Strategy
Overall Experimental Strategy for Validating One-Shot Hyper-Gradient Warm-Starts (OHGW)

1. Core Hypotheses to Validate
   a. Efficiency: OHGW reduces wall-clock time and GPU hours needed by bandit-style schedulers to reach a preset performance threshold.
   b. Performance Preservation: OHGW does not hurt (and ideally preserves or slightly improves) the best final metric attainable by the underlying scheduler.
   c. Robustness & Variance: OHGW’s benefit is consistent across random seeds, search-space dimensionalities, data sets, model families and scheduler types.
   d. Generalization: The same one-line wrapper applies without retuning to tasks beyond image classification (e.g. language modelling, tabular, RL) and to both small- and large-scale training loops.
   e. Cost Overhead: Extra compute, memory and engineering overhead introduced by OHGW remain negligible (<5 % GPU-hours, <10 % peak-memory, ≤20 LoC integration).

2. Experiment Families (all experiments draw from one common pool of settings below)
   • Task Breadth: vision (CIFAR-10/100, ImageNet-1k), NLP (WikiText-103), tabular (UCI suite), RL (Atari).
   • Model Breadth: ResNet family, ViT, Transformer-LM, XGBoost, PPO-CNN.
   • Scheduler Breadth: ASHA, PASHA, DyHPO, Hyperband-BO, BOIL (if open-sourced).
   • Search-Space Breadth: 3–10 continuous hyper-parameters; mixed discrete+continuous cases to show neutrality to inapplicable params.
   • Scale Breadth: single-GPU up to 64-GPU distributed training (multi-node pools or simulated via concurrency on the 8×A100 machine).

3. Comparison Axes for Every Experiment
   • Baseline Scheduler (vanilla).
   • Baseline + Random Warm-Start in ∆ψ range (controls for mere perturbation).
   • Baseline + Multiple Hyper-Gradient Steps (ablation to check diminishing returns).
   • Scheduler-specific SoTA gradient-aware HPO if available (e.g. DyHPO, BOIL) to position OHGW competitively.

4. Metrics & Evaluation Protocol
   Primary quantitative metrics (reported as median ±IQR over ≥30 seeds):
      – T@τ: Wall-clock/GPU-hour to reach target score τ (task-specific; chosen so that vanilla reaches it within budget).
      – Best final validation/test score after fixed budget.
      – Compute Overhead: (Σ warm-start flop) ⁄ (total flop) and peak VRAM.
   Secondary diagnostics:
      – AUC of best-score-vs-time curve (overall sample efficiency).
      – Seed-wise variance of T@τ and final score.
      – Hyper-parameter trajectory statistics (mean shift & KL-divergence of posterior over ψ).
   Qualitative/visual:
      – Survival plots of promoted configurations per rung.
      – Heatmaps of hyper-gradient magnitude vs. eventual benefit.
   Statistical test: two-sided Wilcoxon signed-rank (α=0.05) on paired seeds.

5. Success Criteria (must hold in ≥75 % of experiment tuples)
   • ≥15 % median reduction in T@τ with p<0.05.
   • ≤0.2 % relative drop (or improvement) in best final score.
   • ≤5 % extra GPU-hours and ≤10 % extra peak VRAM.
   • Std-dev(T@τ) not inflated by more than 10 %.

6. Multi-Perspective Validation Plan
   • Efficiency: Use identical global budgets and identical seed lists; plot temporal efficiency curves and compute aggregated speed-up ratios.
   • Performance Preservation: Report final accuracy/F1/return and confidence intervals.
   • Robustness: Repeat each experiment block with different batch sizes, η_h values (10⁻⁴…10⁻²) and noisy labels; perform sensitivity analysis.
   • Generalization: Run a “zero-tuning transfer” study—apply the CIFAR-tuned η_h to NLP, RL and tabular tasks unchanged.
   • Ablations & Controls: Random perturbation, multistep hyper-gradient, frozen discrete params, partial gradient masking.
   • Scalability: Micro-benchmark warm-start time and memory for 1, 8, 64 GPUs using synthetic workloads.

7. Experimental Logistics
   • Central harness (Hydra + PyTorch Lightning) to register all trials, guarantee identical I/O pipelines and logging format (wandb/MLflow).
   • Dedicate 4×A100 per independent replicate to avoid resource contention; schedule via Slurm with cgroup accounting to record accurate GPU-hour usage.
   • Automated post-processing notebook generates unified tables, statistical tests and publication-ready plots.

8. Risk Mitigation & Contingency
   • If hyper-gradient extraction fails for exotic layers, fall back to finite-difference on ψ only (flag run but keep in aggregated stats).
   • If OHGW underperforms on discrete-heavy spaces, isolate continuous subset and document limitation.

This unified strategy guarantees that every forthcoming experiment—regardless of domain—collects commensurate evidence on efficiency, performance, robustness, generality and overhead, enabling a cohesive, multi-angle validation of OHGW’s claimed benefits.

# Generated Base Code Files
{"evaluate_py": "import argparse\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import List, Dict\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\ndef collect_results(results_dir: str) -\u003e List[Dict]:\n    res = []\n    for run_name in os.listdir(results_dir):\n        run_dir = Path(results_dir) / run_name\n        if not run_dir.is_dir():\n            continue\n        metrics_file = run_dir / \"results.json\"\n        if metrics_file.exists():\n            with open(metrics_file, \"r\") as f:\n                res.append(json.load(f))\n    return res\n\n\ndef visualise(results: List[Dict], analysis_dir: Path):\n    sns.set_theme(style=\"whitegrid\")\n    analysis_dir.mkdir(parents=True, exist_ok=True)\n\n    # ------------------ Accuracy Comparison ---------------------------\n    plt.figure(figsize=(6, 4))\n    run_ids = [r[\"run_id\"] for r in results]\n    final_accs = [r[\"best_val_acc\"] for r in results]\n    bars = plt.bar(run_ids, final_accs)\n    for bar, acc in zip(bars, final_accs):\n        plt.text(bar.get_x() + bar.get_width() / 2, acc + 0.001, f\"{acc:.3f}\", ha=\"center\", va=\"bottom\")\n    plt.ylabel(\"Best Validation Accuracy\")\n    plt.title(\"Final Accuracy Comparison\")\n    plt.ylim(0, max(final_accs) * 1.1)\n    plt.tight_layout()\n    acc_fig = analysis_dir / \"accuracy_comparison.pdf\"\n    plt.savefig(acc_fig, bbox_inches=\"tight\")\n    plt.close()\n\n    # ------------------ Training Time Comparison ----------------------\n    plt.figure(figsize=(6, 4))\n    times = [r[\"training_time_sec\"] / 60 for r in results]  # minutes\n    bars = plt.bar(run_ids, times)\n    for bar, t in zip(bars, times):\n        plt.text(bar.get_x() + bar.get_width() / 2, t + 0.1, f\"{t:.1f}m\", ha=\"center\", va=\"bottom\")\n    plt.ylabel(\"Training Time (minutes)\")\n    plt.title(\"Training Time Comparison\")\n    plt.ylim(0, max(times) * 1.1)\n    plt.tight_layout()\n    time_fig = analysis_dir / \"training_time_comparison.pdf\"\n    plt.savefig(time_fig, bbox_inches=\"tight\")\n    plt.close()\n\n    return [str(acc_fig), str(time_fig)]\n\n\ndef main(results_dir: str):\n    analysis_dir = Path(results_dir) / \"analysis\"\n    results = collect_results(results_dir)\n    figure_paths = visualise(results, analysis_dir)\n\n    # Consolidated JSON summary ------------------------------------------------\n    summary = {\n        \"num_runs\": len(results),\n        \"runs\": [{\n            \"run_id\": r[\"run_id\"],\n            \"best_val_acc\": r[\"best_val_acc\"],\n            \"training_time_sec\": r[\"training_time_sec\"]\n        } for r in results],\n        \"figures\": figure_paths\n    }\n\n    print(json.dumps(summary))\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Aggregate and visualise experimental results.\")\n    parser.add_argument(\"--results-dir\", type=str, required=True, help=\"Path to the root results directory containing all run sub-folders.\")\n    args = parser.parse_args()\n\n    main(args.results_dir)", "full_experiment_yaml": "experiments:\n  - name: EXPERIMENT_PLACEHOLDER\n    # PLACEHOLDER: Override with actual dataset configuration (e.g. CIFAR10, ImageNet-1k)\n    dataset:\n      name: DATASET_PLACEHOLDER\n      # Additional dataset-specific fields go here\n    # PLACEHOLDER: Specify the model architecture (e.g. RESNET20, VIT_TINY)\n    model:\n      name: MODEL_PLACEHOLDER\n    training:\n      epochs: FULL_EPOCHS_PLACEHOLDER\n      batch_size: BATCH_SIZE_PLACEHOLDER\n      lr: LR_PLACEHOLDER\n      weight_decay: WEIGHT_DECAY_PLACEHOLDER\n      momentum: MOMENTUM_PLACEHOLDER\n      use_ohgw: BOOLEAN_PLACEHOLDER\n      eta_h: ETA_H_PLACEHOLDER\n    description: \"Detailed description of the experiment variation goes here.\"", "main_py": "import argparse\nimport json\nimport os\nimport subprocess\nimport sys\nimport threading\nfrom pathlib import Path\nfrom typing import Dict, Any\n\nimport yaml\n\n\n###############################################################################\n# Utility helpers                                                             #\n###############################################################################\n\ndef _stream_tee(stream, target_file):\n    \"\"\"Forward a subprocess stream to both stdout/stderr and a log file.\"\"\"\n    for line in iter(stream.readline, \u0027\u0027):\n        sys.stdout.write(line)\n        target_file.write(line)\n    stream.close()\n\n\ndef run_subprocess(cmd, run_dir: Path):\n    stdout_log = run_dir / \"stdout.log\"\n    stderr_log = run_dir / \"stderr.log\"\n\n    with open(stdout_log, \"w\") as out_f, open(stderr_log, \"w\") as err_f:\n        process = subprocess.Popen(\n            cmd,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True,\n            bufsize=1,\n            universal_newlines=True,\n        )\n\n        threads = [\n            threading.Thread(target=_stream_tee, args=(process.stdout, out_f)),\n            threading.Thread(target=_stream_tee, args=(process.stderr, err_f)),\n        ]\n        for t in threads:\n            t.start()\n        for t in threads:\n            t.join()\n\n        return_code = process.wait()\n        if return_code != 0:\n            raise subprocess.CalledProcessError(return_code, cmd)\n\n\n###############################################################################\n# Main orchestration                                                          #\n###############################################################################\n\ndef load_experiment_config(smoke_test: bool) -\u003e Dict[str, Any]:\n    cfg_path = Path(\"config/smoke_test.yaml\" if smoke_test else \"config/full_experiment.yaml\")\n    with open(cfg_path, \"r\") as f:\n        cfg = yaml.safe_load(f)\n    return cfg\n\n\ndef main(smoke_test: bool, results_dir: str):\n    cfg = load_experiment_config(smoke_test)\n    results_root = Path(results_dir)\n    results_root.mkdir(parents=True, exist_ok=True)\n\n    experiments = cfg.get(\"experiments\", [])\n    for run_cfg in experiments:\n        run_id = run_cfg[\"name\"]\n        run_dir = results_root / run_id\n        run_dir.mkdir(parents=True, exist_ok=True)\n\n        # Persist run-specific config for reproducibility ---------------------\n        with open(run_dir / \"config.yaml\", \"w\") as f:\n            yaml.safe_dump(run_cfg, f)\n\n        # Spawn training subprocess -----------------------------------------\n        cmd = [sys.executable, \"-m\", \"src.train\",\n               \"--config\", str(run_dir / \"config.yaml\"),\n               \"--results-dir\", str(run_dir)]\n        run_subprocess(cmd, run_dir)\n\n    # After all runs, trigger evaluation ------------------------------------\n    analysis_dir = results_root / \"analysis\"\n    analysis_dir.mkdir(exist_ok=True)\n    eval_cmd = [sys.executable, \"-m\", \"src.evaluate\", \"--results-dir\", str(results_root)]\n\n    # Capture evaluator JSON summary\n    eval_process = subprocess.run(eval_cmd, capture_output=True, text=True, check=True)\n    summary_json = eval_process.stdout.strip()\n    summary_path = analysis_dir / \"summary.json\"\n    with open(summary_path, \"w\") as f:\n        f.write(summary_json)\n\n    # Echo summary to outer stdout for CI visibility\n    print(summary_json)\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Run the full suite of experiments defined in the YAML config.\")\n    parser.add_argument(\"--smoke-test\", action=\"store_true\", help=\"Use the lightweight smoke_test.yaml\")\n    parser.add_argument(\"--full-experiment\", action=\"store_true\", help=\"Use the full_experiment.yaml\")\n    parser.add_argument(\"--results-dir\", type=str, required=True, help=\"Directory where all outputs will be stored.\")\n    args = parser.parse_args()\n\n    if args.smoke_test and args.full_experiment:\n        parser.error(\"--smoke-test and --full-experiment are mutually exclusive.\")\n    if not args.smoke_test and not args.full_experiment:\n        parser.error(\"Either --smoke-test or --full-experiment must be specified.\")\n\n    main(smoke_test=args.smoke_test, results_dir=args.results_dir)", "model_py": "from typing import Dict, Any\n\nimport torch.nn as nn\n\n\nclass SimpleCNN(nn.Module):\n    \"\"\"A lightweight convolutional network suitable for synthetic CIFAR-like data.\n\n    This acts as the default model to keep the common code executable in a smoke\n    test even before domain-specific models are plugged in. Replace it with\n    task-specific architectures in derived experiment configurations.\n    \"\"\"\n\n    def __init__(self, num_classes: int = 10):\n        super().__init__()\n        self.features = nn.Sequential(\n            nn.Conv2d(3, 32, kernel_size=3, padding=1),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(2),\n            nn.Conv2d(32, 64, kernel_size=3, padding=1),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(2),\n        )\n        self.classifier = nn.Sequential(\n            nn.Flatten(),\n            nn.Linear(64 * 8 * 8, 128),\n            nn.ReLU(inplace=True),\n            nn.Linear(128, num_classes),\n        )\n\n    def forward(self, x):\n        x = self.features(x)\n        x = self.classifier(x)\n        return x\n\n\n# -----------------------------------------------------------------------------\n# PLACEHOLDER: Insert additional model classes for domain-specific experiments\n# -----------------------------------------------------------------------------\n\n\ndef get_model(cfg: Dict[str, Any]):\n    model_cfg = cfg.get(\"model\", {})\n    name = (model_cfg.get(\"name\") or \"SIMPLE_CNN\").upper()\n\n    if name == \"SIMPLE_CNN\":\n        num_classes = int(cfg[\"dataset\"].get(\"num_classes\", 10))\n        return SimpleCNN(num_classes=num_classes)\n    else:\n        raise NotImplementedError(\n            f\"Model \u0027{name}\u0027 not implemented in common foundation. Replace the placeholder with real model implementation.\")", "preprocess_py": "from typing import Tuple, Dict, Any\n\nimport torch\nfrom torch.utils.data import DataLoader, Dataset, random_split\n\n\nclass SyntheticClassificationDataset(Dataset):\n    \"\"\"A synthetic dataset that generates random images and labels. Useful as a\n    fallback when no real dataset is provided during smoke tests or template\n    execution. The class intentionally keeps the interface identical to\n    torchvision style datasets so that replacement with real data is trivial.\n    \"\"\"\n\n    def __init__(self, num_samples: int, input_shape: Tuple[int, int, int], num_classes: int):\n        self.num_samples = num_samples\n        self.input_shape = input_shape\n        self.num_classes = num_classes\n        self._data = torch.randn(num_samples, *input_shape)\n        self._labels = torch.randint(0, num_classes, (num_samples,))\n\n    def __len__(self):\n        return self.num_samples\n\n    def __getitem__(self, idx):\n        return self._data[idx], self._labels[idx]\n\n\ndef get_data_loaders(cfg: Dict[str, Any]):\n    \"\"\"Return train and validation data loaders according to the provided config.\n\n    This common function hides the dataset-specific logic behind a well-defined\n    interface. Real datasets can be injected later by replacing the placeholders\n    marked below.\n    \"\"\"\n    dataset_cfg = cfg.get(\"dataset\", {})\n    batch_size = int(cfg[\"training\"].get(\"batch_size\", 32))\n    num_workers = int(cfg[\"dataset\"].get(\"num_workers\", 2))\n\n    name = (dataset_cfg.get(\"name\") or \"SYNTHETIC_CLASSIFICATION\").upper()\n\n    # -------------------------------------------------------------------------\n    # PLACEHOLDER: Replace with actual dataset loading logic for specific tasks\n    # -------------------------------------------------------------------------\n    if name == \"SYNTHETIC_CLASSIFICATION\":\n        num_samples = int(dataset_cfg.get(\"num_samples\", 1024))\n        input_shape = tuple(dataset_cfg.get(\"input_shape\", (3, 32, 32)))\n        num_classes = int(dataset_cfg.get(\"num_classes\", 10))\n        full_dataset = SyntheticClassificationDataset(num_samples, input_shape, num_classes)\n    else:\n        raise NotImplementedError(\n            f\"Dataset \u0027{name}\u0027 not implemented in common foundation. Replace the placeholder with real dataset loading code.\")\n\n    # Simple train/val split ---------------------------------------------------\n    val_fraction = float(dataset_cfg.get(\"val_fraction\", 0.2))\n    val_size = int(len(full_dataset) * val_fraction)\n    train_size = len(full_dataset) - val_size\n    train_dataset, val_dataset = random_split(full_dataset, [train_size, val_size])\n\n    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=num_workers, pin_memory=True)\n    val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False, num_workers=num_workers, pin_memory=True)\n\n    return train_loader, val_loader", "pyproject_toml": "[build-system]\nrequires = [\"setuptools\u003e=42\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"ohgw_experiments\"\nversion = \"0.1.0\"\ndescription = \"Common Core Foundation for One-Shot Hyper-Gradient Warm-Start experiments\"\nreadme = \"README.md\"\nrequires-python = \"\u003e=3.9\"\nlicense = { text = \"MIT\" }\nauthors = [ { name = \"Research Automation\", email = \"research@auto.ai\" } ]\n\n# Core dependencies \u2013 all experiment variations build on this exact set\ndependencies = [\n    \"torch\u003e=2.0.0\",\n    \"pyyaml\u003e=6.0\",\n    \"matplotlib\u003e=3.7.0\",\n    \"seaborn\u003e=0.12.2\",\n    \"tqdm\u003e=4.66.0\",\n    \"scikit-learn\u003e=1.3.0\"\n]", "smoke_test_yaml": "experiments:\n  - name: smoke_baseline\n    description: \"Baseline training run without OHGW (synthetic data).\"\n    dataset:\n      name: SYNTHETIC_CLASSIFICATION\n      num_samples: 256\n      input_shape: [3, 32, 32]\n      num_classes: 10\n      val_fraction: 0.2\n    model:\n      name: SIMPLE_CNN\n    training:\n      epochs: 3\n      batch_size: 32\n      lr: 0.01\n      weight_decay: 0.0\n      use_ohgw: false\n\n  - name: smoke_ohgw\n    description: \"OHGW warm-start training run (synthetic data).\"\n    dataset:\n      name: SYNTHETIC_CLASSIFICATION\n      num_samples: 256\n      input_shape: [3, 32, 32]\n      num_classes: 10\n      val_fraction: 0.2\n    model:\n      name: SIMPLE_CNN\n    training:\n      epochs: 3\n      batch_size: 32\n      lr: 0.01\n      weight_decay: 0.0\n      use_ohgw: true\n      eta_h: 0.001", "train_py": "import argparse\nimport json\nimport os\nimport time\nfrom pathlib import Path\nfrom typing import Dict, Any\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader\nfrom tqdm import tqdm\n\nfrom .preprocess import get_data_loaders\nfrom .model import get_model\n\n\ndef apply_ohgw(model: nn.Module, train_loader: DataLoader, device: torch.device, cfg: Dict[str, Any]) -\u003e Dict[str, Any]:\n    \"\"\"Apply One-Shot Hyper-Gradient Warm-Start (OHGW) to continuous hyper-parameters.\n\n    The current implementation supports the weight-decay hyper-parameter, which\n    is differentiable without requiring an unrolled optimisation. The returned\n    dictionary contains the potentially updated hyper-parameters that must be\n    forwarded to the subsequent optimiser construction.\n    \"\"\"\n    hp_cfg = {\n        \"weight_decay\": float(cfg[\"training\"].get(\"weight_decay\", 0.0))\n    }\n\n    wd_tensor = torch.tensor(hp_cfg[\"weight_decay\"], device=device, requires_grad=True)\n\n    model.train()\n    data_iter = iter(train_loader)\n    inputs, targets = next(data_iter)\n    inputs, targets = inputs.to(device, non_blocking=True), targets.to(device, non_blocking=True)\n\n    criterion = nn.CrossEntropyLoss()\n\n    # Forward pass with manual weight-decay term so that autograd tracks it\n    outputs = model(inputs)\n    l2_norm = sum((p ** 2).sum() for p in model.parameters())\n    loss = criterion(outputs, targets) + wd_tensor * l2_norm\n\n    # Compute gradient w.r.t. weight-decay\n    grad_wd, = torch.autograd.grad(loss, wd_tensor, retain_graph=False)\n\n    # Single hyper-parameter update\n    eta_h = float(cfg[\"training\"].get(\"eta_h\", 1e-3))\n    with torch.no_grad():\n        wd_tensor -= eta_h * grad_wd\n\n    # Clamp to valid range (\u22650)\n    wd_tensor.clamp_(min=0)\n\n    hp_cfg[\"weight_decay\"] = wd_tensor.item()\n    return hp_cfg\n\n\ndef train(cfg_path: str, results_dir: str):\n    run_dir = Path(results_dir)\n    run_dir.mkdir(parents=True, exist_ok=True)\n\n    with open(cfg_path, \"r\") as f:\n        cfg = json.load(f) if cfg_path.endswith(\".json\") else __import__(\"yaml\").safe_load(f)\n\n    run_id = cfg[\"name\"]\n\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n    # Data ------------------------------------------------------------------\n    train_loader, val_loader = get_data_loaders(cfg)\n\n    # Model -----------------------------------------------------------------\n    model = get_model(cfg).to(device)\n\n    # Optional OHGW ---------------------------------------------------------\n    if cfg[\"training\"].get(\"use_ohgw\", False):\n        ohgw_hparams = apply_ohgw(model, train_loader, device, cfg)\n    else:\n        ohgw_hparams = {\"weight_decay\": cfg[\"training\"].get(\"weight_decay\", 0.0)}\n\n    # Optimiser -------------------------------------------------------------\n    optimiser = optim.SGD(\n        model.parameters(),\n        lr=float(cfg[\"training\"].get(\"lr\", 0.01)),\n        momentum=float(cfg[\"training\"].get(\"momentum\", 0.0)),\n        weight_decay=ohgw_hparams[\"weight_decay\"],\n    )\n\n    criterion = nn.CrossEntropyLoss()\n\n    num_epochs = int(cfg[\"training\"].get(\"epochs\", 1))\n    best_val_acc = 0.0\n    best_epoch = 0\n    epoch_metrics = []\n\n    start_time = time.time()\n\n    for epoch in range(1, num_epochs + 1):\n        # ----------------------- Training ------------------------------\n        model.train()\n        epoch_loss = 0.0\n        correct = 0\n        total = 0\n        for x_batch, y_batch in tqdm(train_loader, desc=f\"{run_id} | Epoch {epoch}/{num_epochs}\"):\n            x_batch, y_batch = x_batch.to(device, non_blocking=True), y_batch.to(device, non_blocking=True)\n            optimiser.zero_grad()\n            logits = model(x_batch)\n            loss = criterion(logits, y_batch)\n            loss.backward()\n            optimiser.step()\n\n            epoch_loss += loss.item() * y_batch.size(0)\n            preds = logits.argmax(dim=1)\n            correct += (preds == y_batch).sum().item()\n            total += y_batch.size(0)\n\n        train_loss = epoch_loss / total\n        train_acc = correct / total\n\n        # ----------------------- Validation ----------------------------\n        model.eval()\n        val_correct = 0\n        val_total = 0\n        val_loss_sum = 0.0\n        with torch.no_grad():\n            for x_val, y_val in val_loader:\n                x_val, y_val = x_val.to(device, non_blocking=True), y_val.to(device, non_blocking=True)\n                logits = model(x_val)\n                loss = criterion(logits, y_val)\n                val_loss_sum += loss.item() * y_val.size(0)\n                preds = logits.argmax(dim=1)\n                val_correct += (preds == y_val).sum().item()\n                val_total += y_val.size(0)\n\n        val_loss = val_loss_sum / val_total\n        val_acc = val_correct / val_total\n\n        if val_acc \u003e best_val_acc:\n            best_val_acc = val_acc\n            best_epoch = epoch\n            # Save best model checkpoint\n            torch.save(model.state_dict(), run_dir / \"best_model.pt\")\n\n        epoch_metrics.append(\n            {\n                \"epoch\": epoch,\n                \"train_loss\": train_loss,\n                \"train_acc\": train_acc,\n                \"val_loss\": val_loss,\n                \"val_acc\": val_acc,\n            }\n        )\n\n    training_time = time.time() - start_time\n\n    # ----------------------- Persistence ------------------------------\n    metrics_path = run_dir / \"results.json\"\n    with open(metrics_path, \"w\") as f:\n        json.dump({\n            \"run_id\": run_id,\n            \"description\": cfg.get(\"description\", \"One-Shot Hyper-Gradient Warm-Start Experiment\"),\n            \"config\": cfg,\n            \"best_val_acc\": best_val_acc,\n            \"best_epoch\": best_epoch,\n            \"training_time_sec\": training_time,\n            \"epochs\": epoch_metrics,\n        }, f, indent=2)\n\n    # ----------------------- Visualisation ---------------------------\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n\n    sns.set_theme(style=\"whitegrid\")\n\n    # Loss curve -------------------------------------------------------\n    plt.figure(figsize=(6, 4))\n    epochs = [m[\"epoch\"] for m in epoch_metrics]\n    train_losses = [m[\"train_loss\"] for m in epoch_metrics]\n    val_losses = [m[\"val_loss\"] for m in epoch_metrics]\n    plt.plot(epochs, train_losses, label=\"Train Loss\")\n    plt.plot(epochs, val_losses, label=\"Val Loss\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Loss\")\n    plt.title(f\"Training \u0026 Validation Loss \u2013 {run_id}\")\n    plt.scatter(best_epoch, epoch_metrics[best_epoch - 1][\"val_loss\"], color=\"red\", zorder=5)\n    plt.annotate(f\"{epoch_metrics[best_epoch - 1][\u0027val_loss\u0027]:.3f}\", (best_epoch, epoch_metrics[best_epoch - 1][\"val_loss\"]))\n    plt.legend()\n    plt.tight_layout()\n    fig_name = run_dir / f\"training_loss_{run_id}.pdf\"\n    plt.savefig(fig_name, bbox_inches=\"tight\")\n    plt.close()\n\n    # Accuracy curve ---------------------------------------------------\n    plt.figure(figsize=(6, 4))\n    train_accs = [m[\"train_acc\"] for m in epoch_metrics]\n    val_accs = [m[\"val_acc\"] for m in epoch_metrics]\n    plt.plot(epochs, train_accs, label=\"Train Acc\")\n    plt.plot(epochs, val_accs, label=\"Val Acc\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Accuracy\")\n    plt.title(f\"Training \u0026 Validation Accuracy \u2013 {run_id}\")\n    plt.scatter(best_epoch, best_val_acc, color=\"red\", zorder=5)\n    plt.annotate(f\"{best_val_acc:.3f}\", (best_epoch, best_val_acc))\n    plt.legend()\n    plt.tight_layout()\n    fig_name = run_dir / f\"accuracy_{run_id}.pdf\"\n    plt.savefig(fig_name, bbox_inches=\"tight\")\n    plt.close()\n\n    # ----------------------- STDOUT JSON -----------------------------\n    print(json.dumps({\n        \"run_id\": run_id,\n        \"best_val_acc\": best_val_acc,\n        \"best_epoch\": best_epoch,\n        \"training_time_sec\": training_time,\n        \"figures\": [str(run_dir / f\"training_loss_{run_id}.pdf\"), str(run_dir / f\"accuracy_{run_id}.pdf\")]\n    }))\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Run a single experiment variation.\")\n    parser.add_argument(\"--config\", type=str, required=True, help=\"Path to the YAML/JSON config for this run variation.\")\n    parser.add_argument(\"--results-dir\", type=str, required=True, help=\"Directory where outputs are stored for this run variation.\")\n    args = parser.parse_args()\n\n    train(args.config, args.results_dir)"}

Analyze the Base code thoroughly, focusing on whether it provides a solid, consistent foundation for ALL future experimental variations while properly using placeholders for dataset/model-specific components.
Output:
{
    "is_base_code_ready": false,
    "base_code_issue": "Core requirement 1 is only partially satisfied – the code saves the best checkpoint but nowhere in the 8-file base scaffold is a complementary model-loading utility demonstrated or used (e.g. for a later evaluation pass). Because the ‘loading’ half of the “model saving/loading mechanisms” criterion is missing, the base foundation is incomplete."
}
