
Input:
You are an AI code reviewer specializing in validating base experiment foundations.

Analyze the provided CORE experiment code (which contains placeholders for datasets/models) and determine if it implements a solid foundation that follows the base code generation requirements.

# Instructions

## Core Validation Criteria
Check if the generated base code meets ALL of the following requirements:

1. **Complete Core Logic Implementation**:
   - Training loops are fully implemented (no placeholders in base training logic)
   - Evaluation framework is complete with proper metrics calculation
   - Model saving/loading mechanisms are implemented
   - Result visualization and figure generation is complete

2. **Proper Placeholder Strategy**:
   - Uses clear, descriptive placeholders like `DATASET_PLACEHOLDER`, `MODEL_PLACEHOLDER`
   - Placeholders are ONLY used for dataset-specific and model-specific components
   - Core algorithm logic has NO placeholders
   - Includes comments explaining what each placeholder will be replaced with

3. **8-File Structure Compliance**:
   - Contains EXACTLY these 8 required files:
     * `src/train.py`
     * `src/evaluate.py`
     * `src/preprocess.py`
     * `src/model.py`
     * `src/main.py`
     * `pyproject.toml`
     * `config/smoke_test.yaml`
     * `config/full_experiment.yaml`
   - No additional utility files, helper modules, or separate components
   - All functionality is contained within the specified 8 files only

4. **Command Line Interface & Module Structure**:
   - main.py properly supports `--smoke-test` and `--full-experiment` flags with `--results-dir <path>` argument
   - main.py reads configuration YAML files and launches train.py for each run variation sequentially
   - main.py executes run variations one at a time in sequential order
   - main.py redirects each subprocess stdout/stderr to `{results_dir}/{run_id}/stdout.log` and `stderr.log` while forwarding to main stdout/stderr
   - train.py outputs JSON-formatted metrics with `run_id` field using `print(json.dumps({...}))`
   - evaluate.py outputs JSON-formatted comparison results to stdout
   - Configuration YAML structure is ready to accept run variations (specific values will be added in derive_specific step)
   - Import statements are compatible with `uv run python -m src.main` execution

5. **Publication-Ready Infrastructure**:
   - Figure generation with proper formatting (PDF output, legends, annotations)
   - Consistent result formatting and comparison logic
   - Proper experimental description output

6. **PyTorch Framework Usage**:
   - Uses PyTorch exclusively for deep learning components
   - Proper model definition and training patterns
   - Appropriate use of existing Python libraries

7. **No Premature Specialization**:
   - Does NOT assume specific datasets or models (uses placeholders appropriately)
   - Does NOT contain real dataset loading code (should be placeholder)
   - Focuses on base algorithm and evaluation framework
   - Does NOT validate specific run_variation names (they will be provided later in derive_specific_experiments step)

## Output Format
Respond with a JSON object containing:
- `is_base_code_ready`: boolean - true if ALL base criteria are met, false otherwise
- `base_code_issue`: string - specific issues found if any criteria are not met, focusing on base foundation quality

# Current Research Method
{
    "Open Problems": "Even the fastest gray–box and multi-fidelity HPO methods (ASHA, PASHA, DyHPO, BOIL) still waste computation on obviously bad configurations because every trial is treated as a black box; none of the information that is already available inside the training loop – most notably the stochastic hyper-gradient obtained at almost zero cost with automatic differentiation – is used to steer the search. The open problem is: how can we inject very cheap, noisy hyper-gradient signals into existing bandit-style schedulers without redesigning their core logic?",
    "Methods": "We propose ‘One-Shot Hyper-Gradient Warm-Starts’ (OHGW), a drop-in modification for any Successive-Halving style scheduler (Hyperband / ASHA / PASHA).  1. When a new configuration x is sampled it is run for only one **mini-batch** (≈10-2% of a normal epoch).  2. In this first forward / backward pass we keep the compute graph and call automatic differentiation once more to obtain a single stochastic hyper-gradient ∂L/∂ψ for every continuous hyperparameter ψ (learning-rate, weight-decay, momentum …) exactly as in implicit hyper-gradient papers, but **without unrolling** (cost <1.2× normal mini-batch).  3. We apply one hyper-parameter update ψ←ψ−η_h ∂L/∂ψ (η_h is a fixed tiny step such as 10-3).  4. The adjusted configuration x′ – which differs from x by at most one gradient step in each hyper-parameter – is what the scheduler subsequently evaluates for its first rung (e.g. 1 epoch).  5. Everything else (promotion rules, budget doubling, stopping) is untouched.  In effect the scheduler still explores the same region, but every candidate is lightly nudged towards a valley before costly training starts.",
    "Experimental Setup": "Benchmark: CIFAR-10 with ResNet-20 and 5-dim continuous search space {log-lr, log-wd, momentum, augment-magnitude, label-smoothing}.  Scheduler baselines: ASHA, PASHA, DyHPO (their public implementations).  Our variants: ASHA+OHGW, PASHA+OHGW, DyHPO+OHGW (one-line wrapper around trial creation).  Mini-batch for warm-start: 128 images.  Hyper-gradient lr η_h=1e-3, computed with PyTorch autograd; no higher-order terms.  Each method is given the same overall GPU budget (4×V100 for 12 hours) and 50 seeds.  Metrics: (i) best test accuracy reached vs. wall-clock, (ii) total GPU hours until 93% accuracy, (iii) distribution of final hyper-parameters to check bias.",
    "Experimental Code": "# pseudo-code\nfor cfg in scheduler.sample():\n    model = build_model(cfg)\n    data = next(train_loader)            # one mini-batch\n    loss  = forward_loss(model, data)\n    grads = torch.autograd.grad(loss, cfg.continuous_params())\n    with torch.no_grad():               # one hyper step\n        for p,g in zip(cfg.continuous_params(), grads):\n            p -= eta_h * g\n    scheduler.launch(cfg)               # continue as usual",
    "Expected Result": "Across all schedules OHGW cuts the median time-to-93%-accuracy by ≈20% (ASHA 11.2→9.0 h, PASHA 7.3→5.8 h, DyHPO 6.1→4.9 h) while keeping the same final accuracy. The added warm-start costs <3% extra compute. Hyper-parameter distributions remain similar, showing no harmful bias.",
    "Expected Conclusion": "A single stochastic hyper-gradient step collected before the first rung is enough to noticeably reduce wasted resources in bandit-style HPO. Because OHGW requires only two extra autograd calls and no change to the scheduler logic, it can be retro-fitted to almost any existing gray-box optimizer, offering an attractive efficiency boost with negligible engineering effort."
}

# Experimental Design
## Experiment Strategy
Overall Experimental Strategy for Validating One-Shot Hyper-Gradient Warm-Starts (OHGW)

1. Core Hypotheses to Validate
   a. Efficiency: OHGW reduces wall-clock time and GPU hours needed by bandit-style schedulers to reach a preset performance threshold.
   b. Performance Preservation: OHGW does not hurt (and ideally preserves or slightly improves) the best final metric attainable by the underlying scheduler.
   c. Robustness & Variance: OHGW’s benefit is consistent across random seeds, search-space dimensionalities, data sets, model families and scheduler types.
   d. Generalization: The same one-line wrapper applies without retuning to tasks beyond image classification (e.g. language modelling, tabular, RL) and to both small- and large-scale training loops.
   e. Cost Overhead: Extra compute, memory and engineering overhead introduced by OHGW remain negligible (<5 % GPU-hours, <10 % peak-memory, ≤20 LoC integration).

2. Experiment Families (all experiments draw from one common pool of settings below)
   • Task Breadth: vision (CIFAR-10/100, ImageNet-1k), NLP (WikiText-103), tabular (UCI suite), RL (Atari).
   • Model Breadth: ResNet family, ViT, Transformer-LM, XGBoost, PPO-CNN.
   • Scheduler Breadth: ASHA, PASHA, DyHPO, Hyperband-BO, BOIL (if open-sourced).
   • Search-Space Breadth: 3–10 continuous hyper-parameters; mixed discrete+continuous cases to show neutrality to inapplicable params.
   • Scale Breadth: single-GPU up to 64-GPU distributed training (multi-node pools or simulated via concurrency on the 8×A100 machine).

3. Comparison Axes for Every Experiment
   • Baseline Scheduler (vanilla).
   • Baseline + Random Warm-Start in ∆ψ range (controls for mere perturbation).
   • Baseline + Multiple Hyper-Gradient Steps (ablation to check diminishing returns).
   • Scheduler-specific SoTA gradient-aware HPO if available (e.g. DyHPO, BOIL) to position OHGW competitively.

4. Metrics & Evaluation Protocol
   Primary quantitative metrics (reported as median ±IQR over ≥30 seeds):
      – T@τ: Wall-clock/GPU-hour to reach target score τ (task-specific; chosen so that vanilla reaches it within budget).
      – Best final validation/test score after fixed budget.
      – Compute Overhead: (Σ warm-start flop) ⁄ (total flop) and peak VRAM.
   Secondary diagnostics:
      – AUC of best-score-vs-time curve (overall sample efficiency).
      – Seed-wise variance of T@τ and final score.
      – Hyper-parameter trajectory statistics (mean shift & KL-divergence of posterior over ψ).
   Qualitative/visual:
      – Survival plots of promoted configurations per rung.
      – Heatmaps of hyper-gradient magnitude vs. eventual benefit.
   Statistical test: two-sided Wilcoxon signed-rank (α=0.05) on paired seeds.

5. Success Criteria (must hold in ≥75 % of experiment tuples)
   • ≥15 % median reduction in T@τ with p<0.05.
   • ≤0.2 % relative drop (or improvement) in best final score.
   • ≤5 % extra GPU-hours and ≤10 % extra peak VRAM.
   • Std-dev(T@τ) not inflated by more than 10 %.

6. Multi-Perspective Validation Plan
   • Efficiency: Use identical global budgets and identical seed lists; plot temporal efficiency curves and compute aggregated speed-up ratios.
   • Performance Preservation: Report final accuracy/F1/return and confidence intervals.
   • Robustness: Repeat each experiment block with different batch sizes, η_h values (10⁻⁴…10⁻²) and noisy labels; perform sensitivity analysis.
   • Generalization: Run a “zero-tuning transfer” study—apply the CIFAR-tuned η_h to NLP, RL and tabular tasks unchanged.
   • Ablations & Controls: Random perturbation, multistep hyper-gradient, frozen discrete params, partial gradient masking.
   • Scalability: Micro-benchmark warm-start time and memory for 1, 8, 64 GPUs using synthetic workloads.

7. Experimental Logistics
   • Central harness (Hydra + PyTorch Lightning) to register all trials, guarantee identical I/O pipelines and logging format (wandb/MLflow).
   • Dedicate 4×A100 per independent replicate to avoid resource contention; schedule via Slurm with cgroup accounting to record accurate GPU-hour usage.
   • Automated post-processing notebook generates unified tables, statistical tests and publication-ready plots.

8. Risk Mitigation & Contingency
   • If hyper-gradient extraction fails for exotic layers, fall back to finite-difference on ψ only (flag run but keep in aggregated stats).
   • If OHGW underperforms on discrete-heavy spaces, isolate continuous subset and document limitation.

This unified strategy guarantees that every forthcoming experiment—regardless of domain—collects commensurate evidence on efficiency, performance, robustness, generality and overhead, enabling a cohesive, multi-angle validation of OHGW’s claimed benefits.

# Generated Base Code Files
{"evaluate_py": "#!/usr/bin/env python\n\"\"\"Evaluation \u0026 visualisation script\nReads metrics.json from all run directories beneath a given results_dir,\ncompares them and generates publication-quality figures (.pdf).\n\"\"\"\nimport argparse\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import List, Dict\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Matplotlib style for publication quality\nsns.set(context=\u0027paper\u0027, style=\u0027whitegrid\u0027, font_scale=1.2)\n\n\n# -----------------------  Helpers ------------------------------------------\n\ndef load_all_metrics(results_dir: Path) -\u003e List[Dict]:\n    metrics_files = list(results_dir.glob(\u0027*/metrics.json\u0027))\n    all_metrics = []\n    for mf in metrics_files:\n        with open(mf, \u0027r\u0027) as f:\n            all_metrics.append(json.load(f))\n    return all_metrics\n\n\ndef plot_history(all_metrics: List[Dict], key: str, ylabel: str, out_path: Path):\n    plt.figure(figsize=(6, 4))\n    for m in all_metrics:\n        hist = m[\u0027history\u0027][key]\n        epochs = list(range(1, len(hist) + 1))\n        plt.plot(epochs, hist, marker=\u0027o\u0027, label=m[\u0027run_id\u0027])\n        # annotate final value\n        plt.annotate(f\"{hist[-1]:.3f}\", (epochs[-1], hist[-1]))\n    plt.xlabel(\u0027Epoch\u0027)\n    plt.ylabel(ylabel)\n    plt.legend()\n    plt.tight_layout()\n    plt.savefig(out_path, bbox_inches=\u0027tight\u0027, format=\u0027pdf\u0027)\n    plt.close()\n\n\n# -----------------------  Main ---------------------------------------------\n\ndef parse_args():\n    p = argparse.ArgumentParser(description=\u0027Evaluate and visualise experiments\u0027)\n    p.add_argument(\u0027--results-dir\u0027, type=str, required=True,\n                   help=\u0027Directory that contains run sub-directories\u0027)\n    return p.parse_args()\n\n\ndef main():\n    args = parse_args()\n    results_dir = Path(args.results_dir).absolute()\n    figure_dir = results_dir / \u0027figures\u0027\n    figure_dir.mkdir(parents=True, exist_ok=True)\n\n    all_metrics = load_all_metrics(results_dir)\n\n    # ----- Generate figures -----\n    plot_history(all_metrics, \u0027train_loss\u0027, \u0027Training Loss\u0027,\n                 figure_dir / \u0027training_loss.pdf\u0027)\n    plot_history(all_metrics, \u0027val_accuracy\u0027, \u0027Validation Accuracy\u0027,\n                 figure_dir / \u0027accuracy.pdf\u0027)\n\n    # ----- Aggregate summary -----\n    df_summary = pd.DataFrame([\n        {\n            \u0027run_id\u0027: m[\u0027run_id\u0027],\n            \u0027final_val_accuracy\u0027: m[\u0027final_val_accuracy\u0027],\n            \u0027final_val_loss\u0027: m[\u0027final_val_loss\u0027]\n        } for m in all_metrics\n    ])\n\n    best_acc_row = df_summary.loc[df_summary[\u0027final_val_accuracy\u0027].idxmax()]\n    comparison = {\n        \u0027runs\u0027: df_summary.set_index(\u0027run_id\u0027).to_dict(orient=\u0027index\u0027),\n        \u0027best_run_accuracy\u0027: best_acc_row[\u0027run_id\u0027],\n        \u0027best_val_accuracy\u0027: best_acc_row[\u0027final_val_accuracy\u0027]\n    }\n\n    # Print JSON comparison to stdout for logging\n    print(json.dumps(comparison))\n\n\nif __name__ == \u0027__main__\u0027:\n    main()\n", "full_experiment_yaml": "# Template for full experimental suite.\n# Replace PLACEHOLDER sections in derived step.\n\nexperiments:\n  - run_id: DATASET_PLACEHOLDER_baseline\n    description: \"Baseline scheduler run on DATASET_PLACEHOLDER\"\n    dataset: DATASET_PLACEHOLDER  # PLACEHOLDER: Will be replaced with dataset config\n    model: MODEL_PLACEHOLDER      # PLACEHOLDER: Will be replaced with model config\n    train:\n      epochs: SPECIFIC_CONFIG_PLACEHOLDER  # PLACEHOLDER: epochs\n      batch_size: SPECIFIC_CONFIG_PLACEHOLDER\n      lr: SPECIFIC_CONFIG_PLACEHOLDER\n      weight_decay: SPECIFIC_CONFIG_PLACEHOLDER\n    apply_ohgw: false\n\n  - run_id: DATASET_PLACEHOLDER_ohgw\n    description: \"Baseline + OHGW on DATASET_PLACEHOLDER\"\n    dataset: DATASET_PLACEHOLDER  # PLACEHOLDER\n    model: MODEL_PLACEHOLDER      # PLACEHOLDER\n    train:\n      epochs: SPECIFIC_CONFIG_PLACEHOLDER\n      batch_size: SPECIFIC_CONFIG_PLACEHOLDER\n      lr: SPECIFIC_CONFIG_PLACEHOLDER\n      weight_decay: SPECIFIC_CONFIG_PLACEHOLDER\n    apply_ohgw: true\n    ohgw:\n      eta_h: SPECIFIC_CONFIG_PLACEHOLDER\n", "main_py": "#!/usr/bin/env python\n\"\"\"Main orchestrator script.\nRuns all experiment variations sequentially as defined by a YAML config file and\nthen triggers the evaluation routine.\n\"\"\"\nimport argparse\nimport json\nimport os\nimport shutil\nimport subprocess\nimport sys\nimport tempfile\nimport threading\nfrom pathlib import Path\nfrom typing import Dict, Any\n\nimport yaml\n\n\n# -----------------------  Utilities ----------------------------------------\n\ndef tee_stream(src, *targets):\n    \"\"\"Read bytes from src stream and write to all target streams (files/stdout).\n    Runs in its own thread so that stdout \u0026 stderr are consumed concurrently.\n    \"\"\"\n    for line in iter(src.readline, b\u0027\u0027):\n        for t in targets:\n            t.write(line.decode())\n            t.flush()\n    src.close()\n\n\ndef run_subprocess(cmd, env, stdout_path: Path, stderr_path: Path):\n    stdout_f = stdout_path.open(\u0027w\u0027)\n    stderr_f = stderr_path.open(\u0027w\u0027)\n\n    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)\n\n    # Start tee threads\n    t_out = threading.Thread(target=tee_stream, args=(proc.stdout, sys.stdout, stdout_f), daemon=True)\n    t_err = threading.Thread(target=tee_stream, args=(proc.stderr, sys.stderr, stderr_f), daemon=True)\n    t_out.start()\n    t_err.start()\n\n    proc.wait()\n    t_out.join()\n    t_err.join()\n\n    stdout_f.close()\n    stderr_f.close()\n\n    if proc.returncode != 0:\n        raise RuntimeError(f\"Sub-process failed with exit code {proc.returncode}: {\u0027 \u0027.join(cmd)}\")\n\n\n# -----------------------  Main Logic ---------------------------------------\n\ndef parse_args():\n    p = argparse.ArgumentParser(description=\u0027Run experiment suite\u0027)\n    gx = p.add_mutually_exclusive_group(required=True)\n    gx.add_argument(\u0027--smoke-test\u0027, action=\u0027store_true\u0027)\n    gx.add_argument(\u0027--full-experiment\u0027, action=\u0027store_true\u0027)\n    p.add_argument(\u0027--results-dir\u0027, required=True, help=\u0027Directory to store all artefacts\u0027)\n    return p.parse_args()\n\n\ndef main():\n    args = parse_args()\n    root_dir = Path(args.results_dir).absolute()\n    root_dir.mkdir(parents=True, exist_ok=True)\n\n    cfg_file = Path(\u0027config/smoke_test.yaml\u0027 if args.smoke_test else \u0027config/full_experiment.yaml\u0027)\n    with open(cfg_file, \u0027r\u0027) as f:\n        full_cfg = yaml.safe_load(f)\n\n    experiments = full_cfg.get(\u0027experiments\u0027, [])\n    if len(experiments) == 0:\n        print(\u0027No experiments defined in config.\u0027, file=sys.stderr)\n        sys.exit(1)\n\n    for exp_cfg in experiments:\n        run_id = exp_cfg[\u0027run_id\u0027]\n        run_dir = root_dir / run_id\n        run_dir.mkdir(parents=True, exist_ok=True)\n\n        # Write per-run config to temp file\n        with tempfile.NamedTemporaryFile(\u0027w\u0027, delete=False, suffix=\u0027.json\u0027) as tmp:\n            json.dump(exp_cfg, tmp)\n            tmp_path = tmp.name\n\n        stdout_log = run_dir / \u0027stdout.log\u0027\n        stderr_log = run_dir / \u0027stderr.log\u0027\n\n        cmd = [sys.executable, \u0027-m\u0027, \u0027src.train\u0027, \u0027--config\u0027, tmp_path, \u0027--results-dir\u0027, str(root_dir)]\n        env = os.environ.copy()\n        run_subprocess(cmd, env, stdout_log, stderr_log)\n\n        # Clean up temp config file\n        os.remove(tmp_path)\n\n    # After all runs, trigger evaluation\n    eval_cmd = [sys.executable, \u0027-m\u0027, \u0027src.evaluate\u0027, \u0027--results-dir\u0027, str(root_dir)]\n    run_subprocess(eval_cmd, os.environ.copy(), root_dir / \u0027evaluate_stdout.log\u0027, root_dir / \u0027evaluate_stderr.log\u0027)\n\n\nif __name__ == \u0027__main__\u0027:\n    main()\n", "model_py": "#!/usr/bin/env python\n\"\"\"Model architectures used across experiments.\nBaseline implementation is provided; additional variants can be added by simply\nediting this module without touching other parts of the framework.\n\"\"\"\nfrom typing import Tuple, Dict, Any\n\nimport torch\nimport torch.nn as nn\n\n__all__ = [\u0027create_model\u0027]\n\n\nclass BaselineMLP(nn.Module):\n    \"\"\"A small MLP suitable for synthetic tabular data.\"\"\"\n    def __init__(self, input_dim: int, num_classes: int):\n        super().__init__()\n        self.net = nn.Sequential(\n            nn.Linear(input_dim, 64), nn.ReLU(),\n            nn.Linear(64, 32), nn.ReLU(),\n            nn.Linear(32, num_classes)\n        )\n\n    def forward(self, x):\n        return self.net(x)\n\n\nclass ProposedModel(nn.Module):\n    \"\"\"PLACEHOLDER: Proposed sophisticated architecture for future tasks.\n    Currently identical to BaselineMLP so that pipeline runs end-to-end.\n    \"\"\"\n    def __init__(self, input_dim: int, num_classes: int):\n        super().__init__()\n        self.core = BaselineMLP(input_dim, num_classes)\n\n    def forward(self, x):\n        return self.core(x)\n\n\nclass AblationModel(nn.Module):\n    \"\"\"PLACEHOLDER: Ablation variant. Mirrors Baseline by default.\"\"\"\n    def __init__(self, input_dim: int, num_classes: int):\n        super().__init__()\n        self.core = BaselineMLP(input_dim, num_classes)\n\n    def forward(self, x):\n        return self.core(x)\n\n\n# ---------------------------------------------------------------------------\n\ndef create_model(model_cfg: Dict[str, Any], input_shape: Tuple[int, ...], num_classes: int) -\u003e nn.Module:\n    name = model_cfg.get(\u0027name\u0027, \u0027baseline\u0027).lower()\n    input_dim = int(input_shape[0])\n\n    if name == \u0027baseline\u0027:\n        return BaselineMLP(input_dim, num_classes)\n    elif name == \u0027proposed\u0027:\n        return ProposedModel(input_dim, num_classes)\n    elif name == \u0027ablation\u0027:\n        return AblationModel(input_dim, num_classes)\n    else:\n        raise ValueError(f\"Unknown model name \u0027{name}\u0027.\")\n", "preprocess_py": "#!/usr/bin/env python\n\"\"\"Common data loading \u0026 preprocessing utilities.\nProvides a synthetic dataset for smoke tests and a clear placeholder for\nreplacing with real datasets in later phases.\n\"\"\"\nimport random\nfrom typing import Tuple, Dict, Any\n\nimport torch\nfrom torch.utils.data import Dataset, DataLoader, random_split\n\n__all__ = [\u0027get_dataloaders\u0027]\n\n\nclass SyntheticClassificationDataset(Dataset):\n    \"\"\"Very small synthetic dataset for smoke tests.\"\"\"\n    def __init__(self, num_samples: int = 256, input_dim: int = 2, num_classes: int = 2):\n        super().__init__()\n        self.x = torch.randn(num_samples, input_dim)\n        # Linear separable rule for non-trivial accuracy \u003e chance\n        self.y = (self.x.sum(dim=1) \u003e 0).long() % num_classes\n\n    def __len__(self):\n        return len(self.x)\n\n    def __getitem__(self, idx):\n        return self.x[idx], self.y[idx]\n\n\n# ---------------------------------------------------------------------------\n\ndef _load_placeholder_dataset(dataset_cfg: Dict[str, Any]):\n    \"\"\"Default loader that returns the synthetic dataset.\n\n    # PLACEHOLDER: Replace with specific dataset loading logic in derived\n    experiments.  Keep this as *fallback* so the framework remains runnable.\n    \"\"\"\n    name = dataset_cfg.get(\u0027name\u0027, \u0027dummy_classification\u0027)\n    if name != \u0027dummy_classification\u0027:\n        raise ValueError(\n            f\"Dataset \u0027{name}\u0027 is not yet implemented in the COMMON CORE FOUNDATION. \"\n            \"Replace this placeholder loader with your task-specific implementation.\"\n        )\n    input_shape = (dataset_cfg.get(\u0027input_shape\u0027, [2]))\n    num_classes = dataset_cfg.get(\u0027num_classes\u0027, 2)\n    full_ds = SyntheticClassificationDataset(num_samples=256, input_dim=input_shape[0],\n                                             num_classes=num_classes)\n    val_size = int(0.2 * len(full_ds))\n    test_size = int(0.2 * len(full_ds))\n    train_size = len(full_ds) - val_size - test_size\n    return random_split(full_ds, [train_size, val_size, test_size]), input_shape, num_classes\n\n\ndef get_dataloaders(dataset_cfg: Dict[str, Any], batch_size: int, num_workers: int = 2) -\u003e Tuple[DataLoader, DataLoader, DataLoader, Tuple[int, ...], int]:\n    \"\"\"Public entry point used by training scripts.\n\n    Returns\n    -------\n    dl_train, dl_val, dl_test, input_shape (tuple), num_classes (int)\n    \"\"\"\n    (train_ds, val_ds, test_ds), input_shape, num_classes = _load_placeholder_dataset(dataset_cfg)\n\n    dl_train = DataLoader(train_ds, batch_size=batch_size, shuffle=True, num_workers=num_workers)\n    dl_val = DataLoader(val_ds, batch_size=batch_size, shuffle=False, num_workers=num_workers)\n    dl_test = DataLoader(test_ds, batch_size=batch_size, shuffle=False, num_workers=num_workers)\n    return dl_train, dl_val, dl_test, tuple(input_shape), num_classes\n", "pyproject_toml": "[build-system]\nrequires = [\"setuptools\u003e=61.0\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"ohgw-common-core\"\nversion = \"0.1.0\"\ndescription = \"COMMON CORE FOUNDATION for OHGW experiments\"\nauthors = [\n    { name = \"Researcher\", email = \"research@example.com\" }\n]\nrequires-python = \"\u003e=3.9\"\ndependencies = [\n    \"torch\u003e=2.0.0\",\n    \"torchvision\u003e=0.15.0\",\n    \"pyyaml\u003e=6.0\",\n    \"matplotlib\u003e=3.5.0\",\n    \"seaborn\u003e=0.12.0\",\n    \"pandas\u003e=1.3.5\",\n    \"tqdm\u003e=4.64.0\",\n    \"numpy\u003e=1.21.0\"\n]\n", "smoke_test_yaml": "# Configuration for quick CI smoke tests.\n# Uses the built-in synthetic dataset so that it runs in seconds on CPU.\n\nexperiments:\n  - run_id: dummy_baseline\n    description: \"Baseline training on synthetic data\"\n    dataset:\n      name: dummy_classification\n      input_shape: [2]\n      num_classes: 2\n    model:\n      name: baseline\n    train:\n      epochs: 2\n      batch_size: 32\n      lr: 0.1\n      weight_decay: 0.01\n      momentum: 0.9\n    apply_ohgw: false\n\n  - run_id: dummy_ohgw\n    description: \"Baseline + One-Shot Hyper-Gradient Warm-Start\"\n    dataset:\n      name: dummy_classification\n      input_shape: [2]\n      num_classes: 2\n    model:\n      name: baseline\n    train:\n      epochs: 2\n      batch_size: 32\n      lr: 0.1\n      weight_decay: 0.01\n      momentum: 0.9\n    apply_ohgw: true\n    ohgw:\n      eta_h: 0.001\n", "train_py": "#!/usr/bin/env python\n\"\"\"\nTraining script for one experiment variation.\nThis module is **fully functional** and contains NO placeholders for core logic.\nDataset/model-specific details are injected through the config that is passed at\nruntime.  A tiny synthetic dataset is provided for smoke tests so the whole\nstack runs out-of-the-box.\n\nCLI\n---\nuv run python -m src.train --config /tmp/run_config.json --results-dir /tmp/out\n\"\"\"\nimport argparse\nimport json\nimport os\nimport random\nfrom pathlib import Path\nfrom typing import Dict, Any\n\nimport numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader\nfrom tqdm import tqdm\n\nfrom src.preprocess import get_dataloaders\nfrom src.model import create_model\n\n# -----------------------  Utility functions ---------------------------------\n\ndef set_seed(seed: int) -\u003e None:\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False\n\n\ndef l2_regularizer(model: nn.Module) -\u003e torch.Tensor:\n    return sum((p ** 2).sum() for p in model.parameters())\n\n\n# -----------------------  OHGW core logic -----------------------------------\n\ndef ohgw_warm_start(model: nn.Module,\n                    hyperparams: Dict[str, torch.Tensor],\n                    optimizer: optim.Optimizer,\n                    data_iter: DataLoader,\n                    criterion: nn.Module,\n                    eta_h: float,\n                    device: torch.device) -\u003e None:\n    \"\"\"Performs ONE stochastic hyper-gradient step as described in the paper.\n\n    hyperparams must be torch.Tensors with ``requires_grad=True``.\n    The function mutates these tensors *in-place* so that subsequent training\n    uses the updated values automatically.\n    \"\"\"\n    model.train()\n    try:\n        xb, yb = next(iter(data_iter))\n    except StopIteration:\n        # If dataset smaller than batch_size\n        data_iter = iter(data_iter)\n        xb, yb = next(data_iter)\n\n    xb, yb = xb.to(device), yb.to(device)\n\n    # Forward\n    outputs = model(xb)\n    loss = criterion(outputs, yb)\n    # Example: weight decay hyper-parameter explicit in loss\n    if \u0027weight_decay\u0027 in hyperparams:\n        loss = loss + hyperparams[\u0027weight_decay\u0027] * l2_regularizer(model)\n\n    # Backward *once more* to obtain dL/d\u03c8\n    grads = torch.autograd.grad(loss, list(hyperparams.values()), retain_graph=False)\n\n    # Hyper-parameter update\n    with torch.no_grad():\n        for name, g in zip(hyperparams.keys(), grads):\n            hyperparams[name].sub_(eta_h * g)\n\n    # Make sure no lingering graph holds references\n    for p in hyperparams.values():\n        p.detach_()\n        p.requires_grad = True  # keep for potential further use\n\n\n# -----------------------  Training loop -------------------------------------\n\ndef train_one_run(cfg: Dict[str, Any], results_dir: Path) -\u003e Dict[str, Any]:\n    run_id = cfg[\u0027run_id\u0027]\n    desc = cfg.get(\u0027description\u0027, \u0027\u0027)\n    print(f\"===== RUN: {run_id} =====\\n{desc}\\n===========================\")\n\n    device = torch.device(\u0027cuda\u0027 if torch.cuda.is_available() else \u0027cpu\u0027)\n    set_seed(cfg.get(\u0027seed\u0027, 0))\n\n    # ---------- Data ----------\n    dl_train, dl_val, dl_test, input_shape, num_classes = get_dataloaders(\n        dataset_cfg=cfg[\u0027dataset\u0027],\n        batch_size=cfg[\u0027train\u0027][\u0027batch_size\u0027],\n        num_workers=cfg[\u0027train\u0027].get(\u0027num_workers\u0027, 2)\n    )\n\n    # ---------- Model ----------\n    model = create_model(model_cfg=cfg[\u0027model\u0027],\n                         input_shape=input_shape,\n                         num_classes=num_classes).to(device)\n\n    # ---------- Hyper-parameters as tensors ----------\n    # We treat weight_decay as an explicit differentiable tensor to demonstrate OHGW.\n    wd_val = torch.tensor(cfg[\u0027train\u0027].get(\u0027weight_decay\u0027, 0.0),\n                          dtype=torch.float32, requires_grad=True, device=device)\n    hyperparams = {\u0027weight_decay\u0027: wd_val}\n\n    # ---------- Optimizer ----------\n    optimizer = optim.SGD(model.parameters(),\n                          lr=cfg[\u0027train\u0027][\u0027lr\u0027],\n                          momentum=cfg[\u0027train\u0027].get(\u0027momentum\u0027, 0.0))\n    criterion = nn.CrossEntropyLoss()\n\n    # ---------- OHGW warm start ----------\n    if cfg.get(\u0027apply_ohgw\u0027, False):\n        eta_h = cfg.get(\u0027ohgw\u0027, {}).get(\u0027eta_h\u0027, 1e-3)\n        ohgw_warm_start(model, hyperparams, optimizer, dl_train,\n                        criterion, eta_h, device)\n\n    # ---------- Main training ----------\n    num_epochs = cfg[\u0027train\u0027][\u0027epochs\u0027]\n    history = {\n        \u0027train_loss\u0027: [],\n        \u0027val_loss\u0027: [],\n        \u0027val_accuracy\u0027: []\n    }\n\n    for epoch in range(1, num_epochs + 1):\n        model.train()\n        running_loss = 0.0\n        for xb, yb in dl_train:\n            xb, yb = xb.to(device), yb.to(device)\n            optimizer.zero_grad()\n            preds = model(xb)\n            loss = criterion(preds, yb) + hyperparams[\u0027weight_decay\u0027] * l2_regularizer(model)\n            loss.backward()\n            optimizer.step()\n            running_loss += loss.item() * xb.size(0)\n        train_loss = running_loss / len(dl_train.dataset)\n\n        # ----- Validation -----\n        model.eval()\n        correct, total, val_loss_total = 0, 0, 0.0\n        with torch.no_grad():\n            for xb, yb in dl_val:\n                xb, yb = xb.to(device), yb.to(device)\n                preds = model(xb)\n                loss = criterion(preds, yb) + hyperparams[\u0027weight_decay\u0027] * l2_regularizer(model)\n                val_loss_total += loss.item() * xb.size(0)\n                correct += (preds.argmax(dim=1) == yb).sum().item()\n                total += xb.size(0)\n        val_loss = val_loss_total / total\n        val_acc = correct / total\n\n        history[\u0027train_loss\u0027].append(train_loss)\n        history[\u0027val_loss\u0027].append(val_loss)\n        history[\u0027val_accuracy\u0027].append(val_acc)\n\n        print(f\"[Epoch {epoch}/{num_epochs}] train_loss={train_loss:.4f} \"\n              f\"val_loss={val_loss:.4f} val_acc={val_acc*100:.2f}%\")\n\n    # ---------- Save artefacts ----------\n    ckpt_path = results_dir / run_id / \u0027model.pt\u0027\n    ckpt_path.parent.mkdir(parents=True, exist_ok=True)\n    torch.save({\n        \u0027model_state_dict\u0027: model.state_dict(),\n        \u0027hyperparams\u0027: {k: v.detach().cpu().item() for k, v in hyperparams.items()},\n        \u0027cfg\u0027: cfg\n    }, ckpt_path)\n\n    metrics = {\n        \u0027run_id\u0027: run_id,\n        \u0027description\u0027: desc,\n        \u0027final_val_accuracy\u0027: history[\u0027val_accuracy\u0027][-1],\n        \u0027final_val_loss\u0027: history[\u0027val_loss\u0027][-1],\n        \u0027history\u0027: history,\n        \u0027epochs\u0027: num_epochs\n    }\n\n    metrics_path = results_dir / run_id / \u0027metrics.json\u0027\n    with open(metrics_path, \u0027w\u0027) as f:\n        json.dump(metrics, f, indent=2)\n\n    return metrics\n\n\n# -----------------------  Main ---------------------------------------------\n\ndef parse_args():\n    p = argparse.ArgumentParser(description=\u0027Train one experiment variation\u0027)\n    p.add_argument(\u0027--config\u0027, type=str, required=True,\n                   help=\u0027Path to JSON config file for this run\u0027)\n    p.add_argument(\u0027--results-dir\u0027, type=str, required=True,\n                   help=\u0027Directory where artefacts will be stored\u0027)\n    return p.parse_args()\n\n\ndef main():\n    args = parse_args()\n    with open(args.config, \u0027r\u0027) as f:\n        cfg = json.load(f)\n\n    results_dir = Path(args.results_dir).absolute()\n    metrics = train_one_run(cfg, results_dir)\n\n    # Print final metrics JSON to stdout so that the orchestrator can parse it\n    print(json.dumps(metrics))\n\n\nif __name__ == \u0027__main__\u0027:\n    main()\n"}

Analyze the Base code thoroughly, focusing on whether it provides a solid, consistent foundation for ALL future experimental variations while properly using placeholders for dataset/model-specific components.
Output:
{
    "is_base_code_ready": false,
    "base_code_issue": "Requirement 1 not fully satisfied – the code only implements model saving (torch.save) but nowhere provides a corresponding model-loading routine.  A complete foundation must expose a loading mechanism so later stages can (re-)use trained checkpoints for e.g. test-set evaluation or transfer learning.  No function/module performs torch.load or restores the model state_dict, therefore the mandatory “model saving / loading mechanisms are implemented” clause is violated."
}
