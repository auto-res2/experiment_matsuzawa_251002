
Input:
You are a cutting-edge AI researcher generating complete, executable code for research paper experiments.

**Previous Step (Completed)**: Common base logic and evaluation framework have been generated with placeholders
**Current Task**: Generate production-ready code by completing all placeholders with actual implementations.

Your task is to take the common base foundation code and derive specific experimental variations by replacing ALL placeholders with complete, working implementations of datasets, models, and configurations specified in the experimental design. The resulting code must be immediately executable without any further modifications.

# Instructions: Experiment Specialization

## Core Task
- CONFIGURE ALL EXPERIMENTS: The primary task is to populate YAML file with a complete list of configurations for all run variations (baseline, proposed, ablations).
- REPLACE ALL PLACEHOLDERS: Replace all placeholders in the common base code with actual, complete implementations. No TODO, PLACEHOLDER, pass, or ... are allowed.
- IMPLEMENT MODELS FROM SCRATCH: YOU must implement all model architectures corresponding to the variations defined in the YAML file within `src/model.py`. Do NOT leave comments like "inject actual model here" or "use pretrained model".
- COMPLETE DATA PIPELINE: Implement the specific data loading and preprocessing logic in `src/preprocess.py`.
- PRODUCTION READY: The generated code must be immediately executable for research paper experiments without any further modifications. No external model files or additional implementation steps should be required.

## Specialization Requirements
- Complete `config/full_experiment.yaml`: This file is the driver of the entire experiment. Define each run variation (['asha-baseline', 'asha-random-warm', 'asha-ohgw-1step', 'asha-ohgw-3step']) as a separate item in the `runs` list, specifying its unique id, model name, and parameters.
- Complete `config/smoke_test.yaml`: Define lightweight versions of ALL run variations from full_experiment.yaml with reduced epochs/data to quickly validate pipeline integrity.
- Implement all required model architectures in `src/model.py`. The model names in the YAML must correspond to the model registry.
- Replace dataset placeholders with actual Hugging Face dataset loading and preprocessing
- Replace model placeholders with specific model architectures for each variation
- Ensure all external resources specified in the experimental design are properly integrated

## Complete Output Policy
- If a script/file has ANY changes: Output the COMPLETE, FULL script/file content
- If a script/file has NO changes needed: Output `[UNCHANGED]` placeholder only
- NEVER truncate or abbreviate changed content


# Experimental Environment
NVIDIA A100×8
VRAM：80GB×8
RAM：2048 GB

# Current Research Method
{
    "Open Problems": "Even the fastest gray–box and multi-fidelity HPO methods (ASHA, PASHA, DyHPO, BOIL) still waste computation on obviously bad configurations because every trial is treated as a black box; none of the information that is already available inside the training loop – most notably the stochastic hyper-gradient obtained at almost zero cost with automatic differentiation – is used to steer the search. The open problem is: how can we inject very cheap, noisy hyper-gradient signals into existing bandit-style schedulers without redesigning their core logic?",
    "Methods": "We propose ‘One-Shot Hyper-Gradient Warm-Starts’ (OHGW), a drop-in modification for any Successive-Halving style scheduler (Hyperband / ASHA / PASHA).  1. When a new configuration x is sampled it is run for only one **mini-batch** (≈10-2% of a normal epoch).  2. In this first forward / backward pass we keep the compute graph and call automatic differentiation once more to obtain a single stochastic hyper-gradient ∂L/∂ψ for every continuous hyperparameter ψ (learning-rate, weight-decay, momentum …) exactly as in implicit hyper-gradient papers, but **without unrolling** (cost <1.2× normal mini-batch).  3. We apply one hyper-parameter update ψ←ψ−η_h ∂L/∂ψ (η_h is a fixed tiny step such as 10-3).  4. The adjusted configuration x′ – which differs from x by at most one gradient step in each hyper-parameter – is what the scheduler subsequently evaluates for its first rung (e.g. 1 epoch).  5. Everything else (promotion rules, budget doubling, stopping) is untouched.  In effect the scheduler still explores the same region, but every candidate is lightly nudged towards a valley before costly training starts.",
    "Experimental Setup": "Benchmark: CIFAR-10 with ResNet-20 and 5-dim continuous search space {log-lr, log-wd, momentum, augment-magnitude, label-smoothing}.  Scheduler baselines: ASHA, PASHA, DyHPO (their public implementations).  Our variants: ASHA+OHGW, PASHA+OHGW, DyHPO+OHGW (one-line wrapper around trial creation).  Mini-batch for warm-start: 128 images.  Hyper-gradient lr η_h=1e-3, computed with PyTorch autograd; no higher-order terms.  Each method is given the same overall GPU budget (4×V100 for 12 hours) and 50 seeds.  Metrics: (i) best test accuracy reached vs. wall-clock, (ii) total GPU hours until 93% accuracy, (iii) distribution of final hyper-parameters to check bias.",
    "Experimental Code": "# pseudo-code\nfor cfg in scheduler.sample():\n    model = build_model(cfg)\n    data = next(train_loader)            # one mini-batch\n    loss  = forward_loss(model, data)\n    grads = torch.autograd.grad(loss, cfg.continuous_params())\n    with torch.no_grad():               # one hyper step\n        for p,g in zip(cfg.continuous_params(), grads):\n            p -= eta_h * g\n    scheduler.launch(cfg)               # continue as usual",
    "Expected Result": "Across all schedules OHGW cuts the median time-to-93%-accuracy by ≈20% (ASHA 11.2→9.0 h, PASHA 7.3→5.8 h, DyHPO 6.1→4.9 h) while keeping the same final accuracy. The added warm-start costs <3% extra compute. Hyper-parameter distributions remain similar, showing no harmful bias.",
    "Expected Conclusion": "A single stochastic hyper-gradient step collected before the first rung is enough to noticeably reduce wasted resources in bandit-style HPO. Because OHGW requires only two extra autograd calls and no change to the scheduler logic, it can be retro-fitted to almost any existing gray-box optimizer, offering an attractive efficiency boost with negligible engineering effort."
}

# Experimental Design
- Strategy: Overall Experimental Strategy for Validating One-Shot Hyper-Gradient Warm-Starts (OHGW)

1. Core Hypotheses to Validate
   a. Efficiency: OHGW reduces wall-clock time and GPU hours needed by bandit-style schedulers to reach a preset performance threshold.
   b. Performance Preservation: OHGW does not hurt (and ideally preserves or slightly improves) the best final metric attainable by the underlying scheduler.
   c. Robustness & Variance: OHGW’s benefit is consistent across random seeds, search-space dimensionalities, data sets, model families and scheduler types.
   d. Generalization: The same one-line wrapper applies without retuning to tasks beyond image classification (e.g. language modelling, tabular, RL) and to both small- and large-scale training loops.
   e. Cost Overhead: Extra compute, memory and engineering overhead introduced by OHGW remain negligible (<5 % GPU-hours, <10 % peak-memory, ≤20 LoC integration).

2. Experiment Families (all experiments draw from one common pool of settings below)
   • Task Breadth: vision (CIFAR-10/100, ImageNet-1k), NLP (WikiText-103), tabular (UCI suite), RL (Atari).
   • Model Breadth: ResNet family, ViT, Transformer-LM, XGBoost, PPO-CNN.
   • Scheduler Breadth: ASHA, PASHA, DyHPO, Hyperband-BO, BOIL (if open-sourced).
   • Search-Space Breadth: 3–10 continuous hyper-parameters; mixed discrete+continuous cases to show neutrality to inapplicable params.
   • Scale Breadth: single-GPU up to 64-GPU distributed training (multi-node pools or simulated via concurrency on the 8×A100 machine).

3. Comparison Axes for Every Experiment
   • Baseline Scheduler (vanilla).
   • Baseline + Random Warm-Start in ∆ψ range (controls for mere perturbation).
   • Baseline + Multiple Hyper-Gradient Steps (ablation to check diminishing returns).
   • Scheduler-specific SoTA gradient-aware HPO if available (e.g. DyHPO, BOIL) to position OHGW competitively.

4. Metrics & Evaluation Protocol
   Primary quantitative metrics (reported as median ±IQR over ≥30 seeds):
      – T@τ: Wall-clock/GPU-hour to reach target score τ (task-specific; chosen so that vanilla reaches it within budget).
      – Best final validation/test score after fixed budget.
      – Compute Overhead: (Σ warm-start flop) ⁄ (total flop) and peak VRAM.
   Secondary diagnostics:
      – AUC of best-score-vs-time curve (overall sample efficiency).
      – Seed-wise variance of T@τ and final score.
      – Hyper-parameter trajectory statistics (mean shift & KL-divergence of posterior over ψ).
   Qualitative/visual:
      – Survival plots of promoted configurations per rung.
      – Heatmaps of hyper-gradient magnitude vs. eventual benefit.
   Statistical test: two-sided Wilcoxon signed-rank (α=0.05) on paired seeds.

5. Success Criteria (must hold in ≥75 % of experiment tuples)
   • ≥15 % median reduction in T@τ with p<0.05.
   • ≤0.2 % relative drop (or improvement) in best final score.
   • ≤5 % extra GPU-hours and ≤10 % extra peak VRAM.
   • Std-dev(T@τ) not inflated by more than 10 %.

6. Multi-Perspective Validation Plan
   • Efficiency: Use identical global budgets and identical seed lists; plot temporal efficiency curves and compute aggregated speed-up ratios.
   • Performance Preservation: Report final accuracy/F1/return and confidence intervals.
   • Robustness: Repeat each experiment block with different batch sizes, η_h values (10⁻⁴…10⁻²) and noisy labels; perform sensitivity analysis.
   • Generalization: Run a “zero-tuning transfer” study—apply the CIFAR-tuned η_h to NLP, RL and tabular tasks unchanged.
   • Ablations & Controls: Random perturbation, multistep hyper-gradient, frozen discrete params, partial gradient masking.
   • Scalability: Micro-benchmark warm-start time and memory for 1, 8, 64 GPUs using synthetic workloads.

7. Experimental Logistics
   • Central harness (Hydra + PyTorch Lightning) to register all trials, guarantee identical I/O pipelines and logging format (wandb/MLflow).
   • Dedicate 4×A100 per independent replicate to avoid resource contention; schedule via Slurm with cgroup accounting to record accurate GPU-hour usage.
   • Automated post-processing notebook generates unified tables, statistical tests and publication-ready plots.

8. Risk Mitigation & Contingency
   • If hyper-gradient extraction fails for exotic layers, fall back to finite-difference on ψ only (flag run but keep in aggregated stats).
   • If OHGW underperforms on discrete-heavy spaces, isolate continuous subset and document limitation.

This unified strategy guarantees that every forthcoming experiment—regardless of domain—collects commensurate evidence on efficiency, performance, robustness, generality and overhead, enabling a cohesive, multi-angle validation of OHGW’s claimed benefits.

# Current Experiment (to generate code for)
- Experiment ID: exp-1
- Description: Objective / Hypothesis: Quantify the raw efficiency gains of One-Shot Hyper-Gradient Warm-Starts (OHGW) for classical image-classification hyper-parameter optimisation and disentangle the effect of merely perturbing the hyper-parameters from using the true hyper-gradient.

Domain & Task: Vision – CIFAR-10 image classification.

Models: ResNet-20 (main), ResNet-50 (sanity-check on a deeper network – evaluated only for the best scheduler variant after selection).

Schedulers under test: ASHA (official implementation in Ray-Tune v2.6).

Search space (5-dim continuous): log10-learning-rate, log10-weight-decay, momentum, RandAugment-magnitude, label-smoothing.

Run variations:
• asha-baseline – vanilla ASHA.
• asha-random-warm – perform one random Gaussian step (σ=0.01) in ψ instead of a hyper-gradient step (control).* 
• asha-ohgw-1step – proposed method (η_h=1e-3, one step).
• asha-ohgw-3step – same but apply three successive hyper-gradient steps (ablation for diminishing returns).

Datasets & Pre-processing: CIFAR-10, standard train/val/test split = 45k/5k/10k.  Per-image Z-score normalisation, RandAugment (m searchable), Cutout(16), label-smoothing (ε searchable).  Validation set is stratified.

Training loop: 200 epochs (budget for full training), Cosine LR, batch size 128, SGD-M.  Weight initialisation He-normal.  Mixed precision (AMP).  Early-stopping OFF (to reveal full curve).

Evaluation metrics:
Primary – T@93%: wall-clock hours & GPU hours needed to first reach 93% val accuracy.
Secondary – best test accuracy after 200 epochs; AUC(score-vs-time); overhead-FLOPs ratio; peak VRAM; seed-wise variance.

Protocol: 32 independent HPO replicates (seed-paired across variations).  Each replicate is allowed 12 A100-GPU hours (4 GPUs×3 h) exactly.  Statistics: median±IQR, Wilcoxon signed-rank (α=0.05) on paired T@93%.

Hyper-parameter sensitivity: inside asha-ohgw-1step, sweep η_h ∈ {1e-4, 3e-4, 1e-3, 3e-3} on an extra 8 seeds; fit LOESS to quantify curvature.

Robustness: inject 10% symmetric label noise on a duplicate run; compare % speed-up retained.

Compute efficiency: PyTorch-Profiler to record FLOPs; NVML + psutil for VRAM/RAM; timestamps logged by Lightning Callbacks.

Example code fragment (within Ray trial):
```python
# one-shot HG warm-start
loss = model(train_mb)                    # forward
hyper_grads = torch.autograd.grad(loss, cfg.continuous())
with torch.no_grad():
    for p, g in zip(cfg.continuous(), hyper_grads):
        p -= 1e-3 * g                     # η_h
# hand control back to ASHA
train_full(cfg)
```

Computational budget on cluster: 8 concurrent trials * 4 GPUs each = 32 GPUs (< half of node).  Wall-clock expected 18h incl. repeats.

Success criteria: ≥15% lower median T@93% for asha-ohgw-1step than asha-baseline with p<0.05 and ≤0.2% drop in final test accuracy.

Footnote *: random-warm uses identical σ distribution as the empirical magnitude of a hyper-gradient step, ensuring fair energy injection.
- Run Variations: ['asha-baseline', 'asha-random-warm', 'asha-ohgw-1step', 'asha-ohgw-3step']

# Base Code
{'train_py': 'import argparse\nimport json\nimport os\nimport random\nimport time\nfrom pathlib import Path\nfrom typing import Dict, Any\n\nimport numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader\nfrom tqdm import tqdm\n\nfrom .preprocess import load_dataset\nfrom .model import get_model, build_hyperparam_tensors, apply_ohgw_step\n\n\ndef set_seed(seed: int = 42):\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    if torch.cuda.is_available():\n        torch.cuda.manual_seed_all(seed)\n\n\ndef accuracy(output: torch.Tensor, target: torch.Tensor) -> float:\n    """Compute top-1 accuracy."""\n    with torch.no_grad():\n        preds = output.argmax(dim=1)\n        return (preds == target).float().mean().item()\n\n\ndef train_one_epoch(model: nn.Module, loader: DataLoader, criterion: nn.Module, optimizer: optim.Optimizer,\n                    device: torch.device, hyperparams: Dict[str, torch.Tensor]) -> Dict[str, float]:\n    model.train()\n    running_loss = 0.0\n    running_acc = 0.0\n    for data, target in loader:\n        data, target = data.to(device), target.to(device)\n        optimizer.zero_grad()\n        output = model(data)\n        ce_loss = criterion(output, target)\n        reg_loss = 0.0\n        if \'log_wd\' in hyperparams:\n            weight_decay = torch.exp(hyperparams[\'log_wd\'])\n            reg_loss = weight_decay * sum((p ** 2).sum() for p in model.parameters())\n        loss = ce_loss + reg_loss\n        loss.backward()\n        optimizer.step()\n        # Metrics\n        running_loss += loss.item() * data.size(0)\n        running_acc += accuracy(output, target) * data.size(0)\n    epoch_loss = running_loss / len(loader.dataset)\n    epoch_acc = running_acc / len(loader.dataset)\n    return {"train_loss": epoch_loss, "train_acc": epoch_acc}\n\n\ndef evaluate(model: nn.Module, loader: DataLoader, criterion: nn.Module, device: torch.device,\n             hyperparams: Dict[str, torch.Tensor]) -> Dict[str, float]:\n    model.eval()\n    running_loss = 0.0\n    running_acc = 0.0\n    with torch.no_grad():\n        for data, target in loader:\n            data, target = data.to(device), target.to(device)\n            output = model(data)\n            ce_loss = criterion(output, target)\n            reg_loss = 0.0\n            if \'log_wd\' in hyperparams:\n                weight_decay = torch.exp(hyperparams[\'log_wd\'])\n                reg_loss = weight_decay * sum((p ** 2).sum() for p in model.parameters())\n            loss = ce_loss + reg_loss\n            running_loss += loss.item() * data.size(0)\n            running_acc += accuracy(output, target) * data.size(0)\n    epoch_loss = running_loss / len(loader.dataset)\n    epoch_acc = running_acc / len(loader.dataset)\n    return {"val_loss": epoch_loss, "val_acc": epoch_acc}\n\n\ndef main():\n    parser = argparse.ArgumentParser(description="Run a single experiment variation (training + evaluation)")\n    parser.add_argument("--config", type=str, required=True, help="Path to the run-specific YAML config file")\n    parser.add_argument("--run-id", type=str, required=True, help="Unique identifier for this run (from YAML)")\n    parser.add_argument("--results-dir", type=str, required=True, help="Directory where outputs are stored")\n    parser.add_argument("--smoke-test", action="store_true", help="Run a lightweight smoke test")\n    args = parser.parse_args()\n\n    # Lazy import pyyaml to avoid unused dependency when train.py is imported elsewhere\n    import yaml\n\n    run_config: Dict[str, Any] = yaml.safe_load(Path(args.config).read_text())\n\n    results_dir = Path(args.results_dir)\n    results_dir.mkdir(parents=True, exist_ok=True)\n\n    set_seed(run_config.get("seed", 42))\n\n    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")\n\n    # ---------------- Data ----------------\n    batch_size = run_config.get("batch_size", 128 if not args.smoke_test else 16)\n    num_workers = run_config.get("num_workers", 4)\n    train_loader, val_loader, test_loader, input_shape, num_classes = load_dataset(\n        run_config.get("dataset", "DATASET_PLACEHOLDER"), batch_size=batch_size, num_workers=num_workers,\n        smoke_test=args.smoke_test)\n\n    # ---------------- Model --------------\n    model_name = run_config.get("model", "MODEL_PLACEHOLDER")\n    model = get_model(model_name, input_shape, num_classes)\n    model.to(device)\n\n    # ---------------- Hyper-Params -------\n    lr = float(run_config.get("learning_rate", 1e-3))\n    weight_decay = float(run_config.get("weight_decay", 1e-4))\n    momentum = float(run_config.get("momentum", 0.9))\n\n    hyperparams = build_hyperparam_tensors(lr=lr, weight_decay=weight_decay, momentum=momentum, device=device)\n\n    optimizer = optim.SGD(model.parameters(), lr=lr, weight_decay=weight_decay, momentum=momentum)\n    criterion = nn.CrossEntropyLoss()\n\n    # ---------------- OHGW Warm-Start ----\n    if run_config.get("use_ohgw", False):\n        eta_h = float(run_config.get("eta_h", 1e-3))\n        apply_ohgw_step(model, hyperparams, train_loader, criterion, eta_h, device)\n        # Update optimizer with new hyper-params\n        new_wd = float(torch.exp(hyperparams[\'log_wd\']).item()) if \'log_wd\' in hyperparams else weight_decay\n        for pg in optimizer.param_groups:\n            pg[\'weight_decay\'] = new_wd\n\n    # --------------- Training Loop -------\n    epochs = int(run_config.get("epochs", 20 if not args.smoke_test else 1))\n    history = []\n    best_val_acc = 0.0\n    start_time = time.time()\n    for epoch in range(1, epochs + 1):\n        train_metrics = train_one_epoch(model, train_loader, criterion, optimizer, device, hyperparams)\n        val_metrics = evaluate(model, val_loader, criterion, device, hyperparams)\n        best_val_acc = max(best_val_acc, val_metrics["val_acc"])\n        epoch_metrics = {\n            "epoch": epoch,\n            **train_metrics,\n            **val_metrics,\n        }\n        history.append(epoch_metrics)\n        print(json.dumps({"run_id": args.run_id, **epoch_metrics}))\n\n    total_time = time.time() - start_time\n\n    # Final Test Evaluation\n    test_metrics = evaluate(model, test_loader, criterion, device, hyperparams)\n\n    # -------- Save Artifacts ----------\n    final_results = {\n        "run_id": args.run_id,\n        "config": run_config,\n        "final_val_acc": history[-1]["val_acc"],\n        "best_val_acc": best_val_acc,\n        "test_acc": test_metrics["val_acc"],\n        "epochs": epochs,\n        "total_time_sec": total_time,\n        "history": history,\n    }\n\n    results_path = results_dir / "results.json"\n    with results_path.open("w") as f:\n        json.dump(final_results, f, indent=2)\n\n    # Also print final summary so GitHub Actions can capture\n    print(json.dumps({"run_id": args.run_id, "status": "completed", "best_val_acc": best_val_acc, "test_acc": test_metrics["val_acc"], "total_time_sec": total_time}))\n\n\nif __name__ == "__main__":\n    main()\n', 'evaluate_py': 'import argparse\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Dict, List\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set(style="whitegrid")\n\nFIGURE_NAMING_RULE = "{topic}{condition}.pdf"  # helper for consistent naming\n\n\ndef load_results(results_dir: Path) -> List[Dict]:\n    runs = []\n    for run_dir in results_dir.iterdir():\n        if not run_dir.is_dir():\n            continue\n        res_file = run_dir / "results.json"\n        if res_file.exists():\n            with res_file.open() as f:\n                runs.append(json.load(f))\n    return runs\n\n\ndef bar_plot_accuracy(runs: List[Dict], out_path: Path):\n    labels = [r["run_id"] for r in runs]\n    accs = [r["best_val_acc"] for r in runs]\n\n    plt.figure(figsize=(6, 4))\n    ax = sns.barplot(x=labels, y=accs)\n    for idx, val in enumerate(accs):\n        ax.text(idx, val + 0.002, f"{val:.3f}", ha="center", va="bottom")\n    plt.ylabel("Best Validation Accuracy")\n    plt.title("Comparison of Best Validation Accuracy Across Runs")\n    plt.savefig(out_path, bbox_inches="tight")\n    plt.close()\n\n\ndef line_plot_loss(runs: List[Dict], out_path: Path):\n    plt.figure(figsize=(6, 4))\n    for r in runs:\n        losses = [e["train_loss"] for e in r["history"]]\n        plt.plot(range(1, len(losses) + 1), losses, label=r["run_id"])\n        # Annotate final value\n        plt.text(len(losses), losses[-1], f"{losses[-1]:.3f}")\n    plt.xlabel("Epoch")\n    plt.ylabel("Training Loss")\n    plt.title("Training Loss Curves")\n    plt.legend()\n    plt.savefig(out_path, bbox_inches="tight")\n    plt.close()\n\n\ndef main():\n    parser = argparse.ArgumentParser(description="Aggregate and visualise experiment results")\n    parser.add_argument("--results-dir", type=str, required=True, help="Directory containing run sub-folders")\n    args = parser.parse_args()\n\n    results_dir = Path(args.results_dir)\n    runs = load_results(results_dir)\n    assert len(runs) > 0, "No results.json files found."\n\n    # ------------- Figures --------------\n    acc_out = results_dir / "accuracy.pdf"\n    loss_out = results_dir / "training_loss.pdf"\n    bar_plot_accuracy(runs, acc_out)\n    line_plot_loss(runs, loss_out)\n\n    # ----------- Numerical JSON ---------\n    summary = {\n        "num_runs": len(runs),\n        "runs": [{"run_id": r["run_id"], "best_val_acc": r["best_val_acc"], "test_acc": r["test_acc"]} for r in runs]\n    }\n    print(json.dumps(summary, indent=2))\n\n\nif __name__ == "__main__":\n    main()\n', 'preprocess_py': '"""Common preprocessing utilities with dataset placeholders."""\n\nfrom pathlib import Path\nfrom typing import Tuple\n\nimport torch\nfrom torch.utils.data import DataLoader, Dataset, random_split\nimport torchvision.transforms as T\nfrom torchvision.datasets import MNIST, CIFAR10\n\n# PLACEHOLDER: Will be replaced with specific dataset loading logic for each experiment\n\n\nclass DummyDataset(Dataset):\n    """Synthetic dataset used when DATASET_PLACEHOLDER is specified or dataset not available."""\n\n    def __init__(self, length: int = 512, num_classes: int = 10, input_shape=(1, 28, 28)):\n        self.length = length\n        self.num_classes = num_classes\n        self.input_shape = input_shape\n\n    def __len__(self):\n        return self.length\n\n    def __getitem__(self, idx):\n        x = torch.randn(self.input_shape)\n        y = torch.randint(0, self.num_classes, (1,)).item()\n        return x, y\n\n\ndef _split_dataset(dataset: Dataset, val_ratio: float = 0.1):\n    val_size = int(len(dataset) * val_ratio)\n    train_size = len(dataset) - val_size\n    return random_split(dataset, [train_size, val_size])\n\n\ndef load_dataset(name: str, batch_size: int = 128, num_workers: int = 4, smoke_test: bool = False):\n    """Return train/val/test loaders and metadata."""\n    transform = T.Compose([T.ToTensor()])\n\n    if name == "DATASET_PLACEHOLDER":\n        # Use synthetic dummy dataset\n        length = 128 if smoke_test else 2048\n        input_shape = (1, 28, 28)\n        num_classes = 10\n        full_ds = DummyDataset(length=length, num_classes=num_classes, input_shape=input_shape)\n        train_ds, val_ds = _split_dataset(full_ds, val_ratio=0.1)\n        test_ds = DummyDataset(length=int(length * 0.2), num_classes=num_classes, input_shape=input_shape)\n    elif name.lower() == "mnist":\n        root = Path.home() / ".cache/datasets"\n        train_full = MNIST(root=root, train=True, download=True, transform=transform)\n        test_ds = MNIST(root=root, train=False, download=True, transform=transform)\n        train_ds, val_ds = _split_dataset(train_full, val_ratio=0.1)\n        input_shape = (1, 28, 28)\n        num_classes = 10\n    elif name.lower() == "cifar10":\n        root = Path.home() / ".cache/datasets"\n        train_full = CIFAR10(root=root, train=True, download=True, transform=transform)\n        test_ds = CIFAR10(root=root, train=False, download=True, transform=transform)\n        train_ds, val_ds = _split_dataset(train_full, val_ratio=0.1)\n        input_shape = (3, 32, 32)\n        num_classes = 10\n    else:\n        raise ValueError(f"Unknown dataset name: {name}. Implement loading logic in preprocess.py")\n\n    train_loader = DataLoader(train_ds, batch_size=batch_size, shuffle=True, num_workers=num_workers)\n    val_loader = DataLoader(val_ds, batch_size=batch_size, shuffle=False, num_workers=num_workers)\n    test_loader = DataLoader(test_ds, batch_size=batch_size, shuffle=False, num_workers=num_workers)\n\n    return train_loader, val_loader, test_loader, input_shape, num_classes\n', 'model_py': '"""Model architectures and hyper-parameter utilities."""\n\nfrom typing import Dict\n\nimport torch\nimport torch.nn as nn\n\n__all__ = ["get_model", "build_hyperparam_tensors", "apply_ohgw_step"]\n\n\nclass SimpleCNN(nn.Module):\n    """Baseline CNN that works for both grayscale and RGB images up to 32×32."""\n\n    def __init__(self, in_channels: int, num_classes: int):\n        super().__init__()\n        self.net = nn.Sequential(\n            nn.Conv2d(in_channels, 32, kernel_size=3, padding=1),\n            nn.BatchNorm2d(32),\n            nn.ReLU(),\n            nn.MaxPool2d(2),\n            nn.Conv2d(32, 64, kernel_size=3, padding=1),\n            nn.BatchNorm2d(64),\n            nn.ReLU(),\n            nn.MaxPool2d(2),\n            nn.Flatten(),\n            nn.Linear(64 * 7 * 7 if in_channels == 1 else 64 * 8 * 8, 128),\n            nn.ReLU(),\n            nn.Linear(128, num_classes),\n        )\n\n    def forward(self, x):\n        return self.net(x)\n\n\n# PLACEHOLDER: Additional architectures can be added here (ResNet, Transformer, etc.)\n\n\nMODEL_REGISTRY = {\n    "MODEL_PLACEHOLDER": SimpleCNN,  # Default fallback\n    "baseline": SimpleCNN,\n}\n\n\ndef get_model(name: str, input_shape, num_classes: int) -> nn.Module:\n    """Factory to build models given a name. Falls back to SimpleCNN if not found."""\n    name = name.lower()\n    cls = MODEL_REGISTRY.get(name, SimpleCNN)\n    in_channels = input_shape[0]\n    return cls(in_channels, num_classes)\n\n\n# ---------------- Hyper-Param Tensors -----------------\n\ndef build_hyperparam_tensors(lr: float, weight_decay: float, momentum: float, device) -> Dict[str, torch.Tensor]:\n    """Represent continuous hyper-parameters as differentiable tensors for OHGW."""\n    hypers = {\n        "log_lr": torch.tensor(float(torch.log(torch.tensor(lr))), dtype=torch.float32, requires_grad=True, device=device),\n        "log_wd": torch.tensor(float(torch.log(torch.tensor(weight_decay + 1e-12))), dtype=torch.float32, requires_grad=True, device=device),\n        "momentum": torch.tensor(momentum, dtype=torch.float32, requires_grad=True, device=device),\n    }\n    return hypers\n\n\n# ---------------- OHGW Core Logic --------------------\n\ndef apply_ohgw_step(model: nn.Module, hyperparams: Dict[str, torch.Tensor], train_loader, criterion, eta_h: float,\n                    device):\n    """Perform One-Shot Hyper-Gradient Warm-Start as described in the research method."""\n    model.train()\n    data_iter = iter(train_loader)\n    data, target = next(data_iter)\n    data, target = data.to(device), target.to(device)\n\n    # Forward pass with current hyper-params\n    output = model(data)\n    ce_loss = criterion(output, target)\n    reg_loss = torch.exp(hyperparams[\'log_wd\']) * sum((p ** 2).sum() for p in model.parameters())\n    loss = ce_loss + reg_loss\n\n    # Compute gradients wrt hyper-parameters (stochastic hyper-grad)\n    hypers = list(hyperparams.values())\n    grads = torch.autograd.grad(loss, hypers, allow_unused=True)\n\n    # Gradient descent step in hyper-parameter space\n    with torch.no_grad():\n        for p, g in zip(hyperparams.values(), grads):\n            if g is not None:\n                p -= eta_h * g\n\n    # No need to modify model weights; they will be trained from scratch afterwards.\n    return hyperparams\n', 'main_py': 'import argparse\nimport json\nimport subprocess\nimport sys\nimport threading\nfrom pathlib import Path\nfrom typing import Dict, Any\n\nimport yaml\n\nCONFIG_DIR = Path(__file__).resolve().parent.parent / "config"\n\n\nclass Tee:\n    """Tee that duplicates writes to multiple file-like objects (stdout + file)."""\n\n    def __init__(self, *files):\n        self.files = files\n\n    def write(self, data):\n        for f in self.files:\n            f.write(data)\n            f.flush()\n\n    def flush(self):\n        for f in self.files:\n            f.flush()\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        for f in self.files:\n            try:\n                f.close()\n            except Exception:\n                pass\n\n\ndef stream_pipe(pipe, tee):\n    """Continuously read from subprocess pipe and write to Tee."""\n    for line in iter(pipe.readline, b""):\n        decoded = line.decode()\n        tee.write(decoded)\n    pipe.close()\n\n\ndef run_experiment(run_cfg: Dict[str, Any], results_root: Path, smoke_test: bool):\n    run_id = run_cfg["run_id"]\n    run_dir = results_root / run_id\n    run_dir.mkdir(parents=True, exist_ok=True)\n\n    # Write run-specific config to disk for train.py\n    cfg_path = run_dir / "config.yaml"\n    with cfg_path.open("w") as f:\n        yaml.safe_dump(run_cfg, f)\n\n    cmd = [sys.executable, "-m", "src.train", "--config", str(cfg_path), "--run-id", run_id, "--results-dir",\n           str(run_dir)]\n    if smoke_test:\n        cmd.append("--smoke-test")\n\n    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, bufsize=1)\n\n    # Prepare tee files\n    stdout_file = (run_dir / "stdout.log").open("w")\n    stderr_file = (run_dir / "stderr.log").open("w")\n\n    tee_out = Tee(sys.stdout, stdout_file)\n    tee_err = Tee(sys.stderr, stderr_file)\n\n    # Threaded streaming so both pipes are consumed concurrently\n    t_out = threading.Thread(target=stream_pipe, args=(process.stdout, tee_out))\n    t_err = threading.Thread(target=stream_pipe, args=(process.stderr, tee_err))\n    t_out.start()\n    t_err.start()\n\n    process.wait()\n    t_out.join()\n    t_err.join()\n\n    stdout_file.close()\n    stderr_file.close()\n\n    if process.returncode != 0:\n        raise RuntimeError(f"Run {run_id} failed with return code {process.returncode}")\n\n\ndef main():\n    parser = argparse.ArgumentParser(description="Experiment orchestrator: runs all variations and triggers evaluation")\n    parser.add_argument("--smoke-test", action="store_true", help="Run lightweight smoke tests defined in smoke_test.yaml")\n    parser.add_argument("--full-experiment", action="store_true", help="Run full experiment variations defined in full_experiment.yaml")\n    parser.add_argument("--results-dir", type=str, required=True, help="Root directory where all run sub-dirs and figures are saved")\n    args = parser.parse_args()\n\n    if not (args.smoke_test ^ args.full_experiment):\n        parser.error("Exactly one of --smoke-test or --full-experiment must be specified.")\n\n    cfg_file = CONFIG_DIR / ("smoke_test.yaml" if args.smoke_test else "full_experiment.yaml")\n    with cfg_file.open() as f:\n        cfg_data = yaml.safe_load(f)\n\n    experiments = cfg_data.get("experiments", [])\n    if len(experiments) == 0:\n        raise ValueError("No experiments found in configuration file.")\n\n    results_root = Path(args.results_dir)\n    results_root.mkdir(parents=True, exist_ok=True)\n\n    for run_cfg in experiments:\n        print(json.dumps({"event": "start_run", "run_id": run_cfg["run_id"]}))\n        run_experiment(run_cfg, results_root, smoke_test=args.smoke_test)\n        print(json.dumps({"event": "end_run", "run_id": run_cfg["run_id"]}))\n\n    # After all runs, trigger evaluation\n    eval_cmd = [sys.executable, "-m", "src.evaluate", "--results-dir", str(results_root)]\n    subprocess.run(eval_cmd, check=True)\n\n\nif __name__ == "__main__":\n    main()\n', 'pyproject_toml': '[project]\nname = "ohgw-experiments"\nversion = "0.1.0"\ndescription = "Common core foundation for OHGW experimental framework"\nauthors = [\n  { name = "Researcher", email = "researcher@example.com" }\n]\nrequires-python = ">=3.9"\nreadme = "README.md"\n\n[project.dependencies]\ntorch = "*"\ntorchvision = "*"\nPyYAML = "*"\nmatplotlib = "*"\nseaborn = "*"\nnumpy = "*"\ntqdm = "*"\n\n[build-system]\nrequires = ["setuptools>=61.0"]\nbuild-backend = "setuptools.build_meta"\n', 'smoke_test_yaml': '# Smoke test configuration with placeholder entries. Replace placeholders in derived experiments.\nexperiments:\n  - run_id: baseline_placeholder\n    model: MODEL_PLACEHOLDER  # PLACEHOLDER: specify concrete model name (e.g., resnet20) in derived experiments\n    dataset: DATASET_PLACEHOLDER  # PLACEHOLDER: specify dataset (e.g., cifar10)\n    epochs: 1\n    batch_size: 16\n    learning_rate: 1e-3\n    weight_decay: 1e-4\n    momentum: 0.9\n    use_ohgw: false\n  - run_id: proposed_placeholder\n    model: MODEL_PLACEHOLDER  # PLACEHOLDER: specify concrete model name\n    dataset: DATASET_PLACEHOLDER  # PLACEHOLDER: specify dataset name\n    epochs: 1\n    batch_size: 16\n    learning_rate: 1e-3\n    weight_decay: 1e-4\n    momentum: 0.9\n    use_ohgw: true\n    eta_h: 1e-3\n', 'full_experiment_yaml': '# Full experiment configuration template. Populate with actual variations in the specific-experiment step.\nexperiments:\n  # Example entry (to be replaced):\n  - run_id: baseline_schedulerA\n    model: MODEL_PLACEHOLDER  # PLACEHOLDER\n    dataset: DATASET_PLACEHOLDER  # PLACEHOLDER\n    scheduler: SCHEDULER_PLACEHOLDER  # PLACEHOLDER: ASHA / PASHA / etc.\n    epochs: 50\n    batch_size: 128\n    learning_rate: 0.1\n    weight_decay: 1e-4\n    momentum: 0.9\n    use_ohgw: false\n  - run_id: schedulerA_ohgw\n    model: MODEL_PLACEHOLDER\n    dataset: DATASET_PLACEHOLDER\n    scheduler: SCHEDULER_PLACEHOLDER\n    epochs: 50\n    batch_size: 128\n    learning_rate: 0.1\n    weight_decay: 1e-4\n    momentum: 0.9\n    use_ohgw: true\n    eta_h: 1e-3\n  # Add more variations as needed.\n\n# Global settings can be added here if required\n# e.g., default_num_workers: 8\n# These can be accessed in main.py if you extend logic accordingly.\n\n# End of full_experiment.yaml\n'}

# External Resources (Use these to replace placeholders)

**HuggingFace Models (Replace MODEL_PLACEHOLDER with these):**

- ID: timm/resnet200d.ra2_in1k

- Code: from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model('resnet200d.ra2_in1k', pretrained=True)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

top5_probabilities, top5_class_indices = torch.topk(output.softmax(dim=1) * 100, k=5)


from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnet200d.ra2_in1k',
    pretrained=True,
    features_only=True,
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

for o in output:
    # print shape of each feature map in output
    # e.g.:
    #  torch.Size([1, 64, 128, 128])
    #  torch.Size([1, 256, 64, 64])
    #  torch.Size([1, 512, 32, 32])
    #  torch.Size([1, 1024, 16, 16])
    #  torch.Size([1, 2048, 8, 8])

    print(o.shape)


from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnet200d.ra2_in1k',
    pretrained=True,
    num_classes=0,  # remove classifier nn.Linear
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor

# or equivalently (without needing to set num_classes=0)

output = model.forward_features(transforms(img).unsqueeze(0))
# output is unpooled, a (1, 2048, 8, 8) shaped tensor

output = model.forward_head(output, pre_logits=True)
# output is a (1, num_features) shaped tensor


- ID: timm/resnetrs200.tf_in1k

- Code: from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model('resnetrs200.tf_in1k', pretrained=True)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

top5_probabilities, top5_class_indices = torch.topk(output.softmax(dim=1) * 100, k=5)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnetrs200.tf_in1k',
    pretrained=True,
    features_only=True,
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

for o in output:
    # print shape of each feature map in output
    # e.g.:
    #  torch.Size([1, 64, 128, 128])
    #  torch.Size([1, 256, 64, 64])
    #  torch.Size([1, 512, 32, 32])
    #  torch.Size([1, 1024, 16, 16])
    #  torch.Size([1, 2048, 8, 8])

    print(o.shape)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnetrs200.tf_in1k',
    pretrained=True,
    num_classes=0,  # remove classifier nn.Linear
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor

# or equivalently (without needing to set num_classes=0)

output = model.forward_features(transforms(img).unsqueeze(0))
# output is unpooled, a (1, 2048, 8, 8) shaped tensor

output = model.forward_head(output, pre_logits=True)
# output is a (1, num_features) shaped tensor


- ID: BVRA/resnet18.in1k_ft_df20_299

- Code: import timm
import torch
import torchvision.transforms as T
from PIL import Image
from urllib.request import urlopen
model = timm.create_model("hf-hub:BVRA/resnet18.in1k_ft_df20_299", pretrained=True)
model = model.eval()
train_transforms = T.Compose([T.Resize((299, 299)), 
                              T.ToTensor(), 
                              T.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])]) 
img = Image.open(PATH_TO_YOUR_IMAGE)
output = model(train_transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor


- ID: BVRA/resnet50.in1k_ft_df20_299

- Code: import timm
import torch
import torchvision.transforms as T
from PIL import Image
from urllib.request import urlopen
model = timm.create_model("hf-hub:BVRA/resnet50.in1k_ft_df20_299", pretrained=True)
model = model.eval()
train_transforms = T.Compose([T.Resize((299, 299)), 
                              T.ToTensor(), 
                              T.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])]) 
img = Image.open(PATH_TO_YOUR_IMAGE)
output = model(train_transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor
# output is a (1, num_features) shaped tensor



- ID: timm/resnet50.a1_in1k

- Code: from urllib.request import urlopen
from PIL import Image
import timm
import torch

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model('resnet50.a1_in1k', pretrained=True)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

top5_probabilities, top5_class_indices = torch.topk(output.softmax(dim=1) * 100, k=5)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnet50.a1_in1k',
    pretrained=True,
    features_only=True,
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

for o in output:
    print(o.shape)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnet50.a1_in1k',
    pretrained=True,
    num_classes=0,  # remove classifier nn.Linear
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor

# or equivalently (without needing to set num_classes=0)

output = model.forward_features(transforms(img).unsqueeze(0))
# output is unpooled, a (1, 2048, 7, 7) shaped tensor

output = model.forward_head(output, pre_logits=True)
# output is a (1, num_features) shaped tensor


- ID: timm/wide_resnet50_2.racm_in1k

- Code: from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model('wide_resnet50_2.racm_in1k', pretrained=True)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

top5_probabilities, top5_class_indices = torch.topk(output.softmax(dim=1) * 100, k=5)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'wide_resnet50_2.racm_in1k',
    pretrained=True,
    features_only=True,
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

for o in output:
    # print shape of each feature map in output
    # e.g.:
    #  torch.Size([1, 64, 112, 112])
    #  torch.Size([1, 256, 56, 56])
    #  torch.Size([1, 512, 28, 28])
    #  torch.Size([1, 1024, 14, 14])
    #  torch.Size([1, 2048, 7, 7])

    print(o.shape)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'wide_resnet50_2.racm_in1k',
    pretrained=True,
    num_classes=0,  # remove classifier nn.Linear
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor

# or equivalently (without needing to set num_classes=0)

output = model.forward_features(transforms(img).unsqueeze(0))
# output is unpooled, a (1, 2048, 7, 7) shaped tensor

output = model.forward_head(output, pre_logits=True)
# output is a (1, num_features) shaped tensor


- ID: timm/resnet50.ram_in1k

- Code: from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model('resnet50.ram_in1k', pretrained=True)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

top5_probabilities, top5_class_indices = torch.topk(output.softmax(dim=1) * 100, k=5)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnet50.ram_in1k',
    pretrained=True,
    features_only=True,
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

for o in output:
    # print shape of each feature map in output
    # e.g.:
    #  torch.Size([1, 64, 112, 112])
    #  torch.Size([1, 256, 56, 56])
    #  torch.Size([1, 512, 28, 28])
    #  torch.Size([1, 1024, 14, 14])
    #  torch.Size([1, 2048, 7, 7])

    print(o.shape)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnet50.ram_in1k',
    pretrained=True,
    num_classes=0,  # remove classifier nn.Linear
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor

# or equivalently (without needing to set num_classes=0)

output = model.forward_features(transforms(img).unsqueeze(0))
# output is unpooled, a (1, 2048, 7, 7) shaped tensor

output = model.forward_head(output, pre_logits=True)
# output is a (1, num_features) shaped tensor


- ID: microsoft/resnet-50

- Code: from transformers import AutoImageProcessor, ResNetForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

processor = AutoImageProcessor.from_pretrained("microsoft/resnet-50")
model = ResNetForImageClassification.from_pretrained("microsoft/resnet-50")

inputs = processor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label])


- ID: timm/resnetv2_50x1_bit.goog_in21k

- Code: from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model('resnetv2_50x1_bit.goog_in21k', pretrained=True)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

top5_probabilities, top5_class_indices = torch.topk(output.softmax(dim=1) * 100, k=5)



from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnetv2_50x1_bit.goog_in21k',
    pretrained=True,
    features_only=True,
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

for o in output:
    # print shape of each feature map in output
    # e.g.:
    #  torch.Size([1, 64, 112, 112])
    #  torch.Size([1, 256, 56, 56])
    #  torch.Size([1, 512, 28, 28])
    #  torch.Size([1, 1024, 14, 14])
    #  torch.Size([1, 2048, 7, 7])

    print(o.shape)



from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnetv2_50x1_bit.goog_in21k',
    pretrained=True,
    num_classes=0,  # remove classifier nn.Linear
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor

# or equivalently (without needing to set num_classes=0)

output = model.forward_features(transforms(img).unsqueeze(0))
# output is unpooled, a (1, 2048, 7, 7) shaped tensor

output = model.forward_head(output, pre_logits=True)
# output is a (1, num_features) shaped tensor


- ID: stanford-crfm/alias-gpt2-small-x21

- Code: from transformers import AutoTokenizer, AutoModelForCausalLM

tokenizer = AutoTokenizer.from_pretrained("stanford-crfm/alias-gpt2-small-x21")

model = AutoModelForCausalLM.from_pretrained("stanford-crfm/alias-gpt2-small-x21")



**HuggingFace Datasets (Replace DATASET_PLACEHOLDER with these):**

- ID: uoft-cs/cifar10


- ID: uoft-cs/cifar100


- ID: tanganke/cifar100


- ID: tanganke/cifar10


- ID: uoft-cs/cifar100


- ID: tanganke/cifar100


- ID: yehzw/wikitext-103


- ID: vish26/wikitext-103-v1-cleaned





# Validation Feedback


**Previous Validation Failed**: Functionality from the base implementation was removed:
1. preprocess.load_dataset no longer supports the generic dummy dataset nor the MNIST option that existed in the base code; only CIFAR-10 is accepted, so earlier capabilities are lost.
2. model.get_model previously fell back to SimpleCNN for unknown names; the new version raises ValueError, removing a safety fallback.
These omissions violate the “complete implementation preservation” requirement.
Please address the validation issues and regenerate the affected files while keeping successful files unchanged using [UNCHANGED] markers.



Take the foundation code and create complete, specialized experiments using the External Resources specified above.
Output:
{
    "train_py": "import argparse\nimport json\nimport os\nimport random\nimport time\nfrom pathlib import Path\nfrom typing import Dict, Any\n\nimport numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader\nfrom tqdm import tqdm\n\nfrom .preprocess import load_dataset\nfrom .model import get_model, build_hyperparam_tensors, apply_ohgw_step\n\n\ndef set_seed(seed: int = 42):\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    if torch.cuda.is_available():\n        torch.cuda.manual_seed_all(seed)\n\n\ndef accuracy(output: torch.Tensor, target: torch.Tensor) -> float:\n    \"\"\"Compute top-1 accuracy.\"\"\"\n    with torch.no_grad():\n        preds = output.argmax(dim=1)\n        return (preds == target).float().mean().item()\n\n\ndef train_one_epoch(model: nn.Module, loader: DataLoader, criterion: nn.Module, optimizer: optim.Optimizer,\n                    device: torch.device, hyperparams: Dict[str, torch.Tensor]) -> Dict[str, float]:\n    model.train()\n    running_loss = 0.0\n    running_acc = 0.0\n    for data, target in loader:\n        data, target = data.to(device), target.to(device)\n        optimizer.zero_grad()\n        output = model(data)\n        ce_loss = criterion(output, target)\n        reg_loss = 0.0\n        if 'log_wd' in hyperparams:\n            weight_decay = torch.exp(hyperparams['log_wd'])\n            reg_loss = weight_decay * sum((p ** 2).sum() for p in model.parameters())\n        loss = ce_loss + reg_loss\n        loss.backward()\n        optimizer.step()\n        # Metrics\n        running_loss += loss.item() * data.size(0)\n        running_acc += accuracy(output, target) * data.size(0)\n    epoch_loss = running_loss / len(loader.dataset)\n    epoch_acc = running_acc / len(loader.dataset)\n    return {\"train_loss\": epoch_loss, \"train_acc\": epoch_acc}\n\n\ndef evaluate(model: nn.Module, loader: DataLoader, criterion: nn.Module, device: torch.device,\n             hyperparams: Dict[str, torch.Tensor]) -> Dict[str, float]:\n    model.eval()\n    running_loss = 0.0\n    running_acc = 0.0\n    with torch.no_grad():\n        for data, target in loader:\n            data, target = data.to(device), target.to(device)\n            output = model(data)\n            ce_loss = criterion(output, target)\n            reg_loss = 0.0\n            if 'log_wd' in hyperparams:\n                weight_decay = torch.exp(hyperparams['log_wd'])\n                reg_loss = weight_decay * sum((p ** 2).sum() for p in model.parameters())\n            loss = ce_loss + reg_loss\n            running_loss += loss.item() * data.size(0)\n            running_acc += accuracy(output, target) * data.size(0)\n    epoch_loss = running_loss / len(loader.dataset)\n    epoch_acc = running_acc / len(loader.dataset)\n    return {\"val_loss\": epoch_loss, \"val_acc\": epoch_acc}\n\n\ndef apply_random_warm(hyperparams: Dict[str, torch.Tensor], sigma: float):\n    \"\"\"Apply a Gaussian perturbation with std=sigma to each continuous hyper-parameter.\"\"\"\n    with torch.no_grad():\n        for p in hyperparams.values():\n            p.add_(torch.randn_like(p) * sigma)\n\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Run a single experiment variation (training + evaluation)\")\n    parser.add_argument(\"--config\", type=str, required=True, help=\"Path to the run-specific YAML config file\")\n    parser.add_argument(\"--run-id\", type=str, required=True, help=\"Unique identifier for this run (from YAML)\")\n    parser.add_argument(\"--results-dir\", type=str, required=True, help=\"Directory where outputs are stored\")\n    parser.add_argument(\"--smoke-test\", action=\"store_true\", help=\"Run a lightweight smoke test\")\n    args = parser.parse_args()\n\n    # Lazy import pyyaml to avoid unused dependency when train.py is imported elsewhere\n    import yaml\n\n    run_config: Dict[str, Any] = yaml.safe_load(Path(args.config).read_text())\n\n    results_dir = Path(args.results_dir)\n    results_dir.mkdir(parents=True, exist_ok=True)\n\n    set_seed(run_config.get(\"seed\", 42))\n\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n    # ---------------- Data ----------------\n    batch_size = run_config.get(\"batch_size\", 128 if not args.smoke_test else 16)\n    num_workers = run_config.get(\"num_workers\", 4)\n    augment_magnitude = run_config.get(\"augment_magnitude\", 9 if not args.smoke_test else 3)\n    train_loader, val_loader, test_loader, input_shape, num_classes = load_dataset(\n        run_config.get(\"dataset\", \"cifar10\"),\n        batch_size=batch_size,\n        num_workers=num_workers,\n        smoke_test=args.smoke_test,\n        augment_magnitude=augment_magnitude,\n    )\n\n    # ---------------- Model --------------\n    model_name = run_config.get(\"model\", \"resnet20\")\n    model = get_model(model_name, input_shape, num_classes)\n    model.to(device)\n\n    # ---------------- Hyper-Params -------\n    lr = float(run_config.get(\"learning_rate\", 0.1))\n    weight_decay = float(run_config.get(\"weight_decay\", 5e-4))\n    momentum = float(run_config.get(\"momentum\", 0.9))\n\n    hyperparams = build_hyperparam_tensors(lr=lr, weight_decay=weight_decay, momentum=momentum, device=device)\n\n    # Use explicit L2 regularisation term – set optimizer weight_decay=0 to avoid double count\n    optimizer = optim.SGD(model.parameters(), lr=lr, weight_decay=0.0, momentum=momentum)\n\n    label_smoothing = float(run_config.get(\"label_smoothing\", 0.0))\n    criterion = nn.CrossEntropyLoss(label_smoothing=label_smoothing)\n\n    # ------------- Warm-Start Logic -------------\n    if run_config.get(\"random_warm\", False):\n        sigma = float(run_config.get(\"sigma\", 0.01))\n        apply_random_warm(hyperparams, sigma)\n        # propagate to optimizer\n        new_lr = float(torch.exp(hyperparams['log_lr']).item())\n        new_momentum = float(hyperparams['momentum'].item())\n        for pg in optimizer.param_groups:\n            pg['lr'] = new_lr\n            pg['momentum'] = new_momentum\n\n    if run_config.get(\"use_ohgw\", False):\n        eta_h = float(run_config.get(\"eta_h\", 1e-3))\n        steps = int(run_config.get(\"ohgw_steps\", 1))\n        for _ in range(steps):\n            apply_ohgw_step(model, hyperparams, train_loader, criterion, eta_h, device)\n        # update optimizer with potentially new lr / momentum\n        new_lr = float(torch.exp(hyperparams['log_lr']).item())\n        new_momentum = float(hyperparams['momentum'].item())\n        for pg in optimizer.param_groups:\n            pg['lr'] = new_lr\n            pg['momentum'] = new_momentum\n\n    # --------------- Training Loop -------\n    epochs = int(run_config.get(\"epochs\", 20 if not args.smoke_test else 1))\n    history = []\n    best_val_acc = 0.0\n    start_time = time.time()\n    for epoch in range(1, epochs + 1):\n        train_metrics = train_one_epoch(model, train_loader, criterion, optimizer, device, hyperparams)\n        val_metrics = evaluate(model, val_loader, criterion, device, hyperparams)\n        best_val_acc = max(best_val_acc, val_metrics[\"val_acc\"])\n        epoch_metrics = {\n            \"epoch\": epoch,\n            **train_metrics,\n            **val_metrics,\n        }\n        history.append(epoch_metrics)\n        print(json.dumps({\"run_id\": args.run_id, **epoch_metrics}))\n\n    total_time = time.time() - start_time\n\n    # Final Test Evaluation\n    test_metrics = evaluate(model, test_loader, criterion, device, hyperparams)\n\n    # -------- Save Artifacts ----------\n    final_results = {\n        \"run_id\": args.run_id,\n        \"config\": run_config,\n        \"final_val_acc\": history[-1][\"val_acc\"],\n        \"best_val_acc\": best_val_acc,\n        \"test_acc\": test_metrics[\"val_acc\"],\n        \"epochs\": epochs,\n        \"total_time_sec\": total_time,\n        \"history\": history,\n    }\n\n    results_path = Path(args.results_dir) / \"results.json\"\n    with results_path.open(\"w\") as f:\n        json.dump(final_results, f, indent=2)\n\n    # Also print final summary so CI logs capture it\n    print(json.dumps({\"run_id\": args.run_id, \"status\": \"completed\", \"best_val_acc\": best_val_acc, \"test_acc\": test_metrics[\"val_acc\"], \"total_time_sec\": total_time}))\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "evaluate_py": "import argparse\nimport json\nimport os\nfrom pathlib import Path\nfrom typing import Dict, List\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set(style=\"whitegrid\")\n\nFIGURE_NAMING_RULE = \"{topic}{condition}.pdf\"  # helper for consistent naming\n\n\ndef load_results(results_dir: Path) -> List[Dict]:\n    runs = []\n    for run_dir in results_dir.iterdir():\n        if not run_dir.is_dir():\n            continue\n        res_file = run_dir / \"results.json\"\n        if res_file.exists():\n            with res_file.open() as f:\n                runs.append(json.load(f))\n    return runs\n\n\ndef bar_plot_accuracy(runs: List[Dict], out_path: Path):\n    labels = [r[\"run_id\"] for r in runs]\n    accs = [r[\"best_val_acc\"] for r in runs]\n\n    plt.figure(figsize=(6, 4))\n    ax = sns.barplot(x=labels, y=accs)\n    for idx, val in enumerate(accs):\n        ax.text(idx, val + 0.002, f\"{val:.3f}\", ha=\"center\", va=\"bottom\")\n    plt.ylabel(\"Best Validation Accuracy\")\n    plt.title(\"Comparison of Best Validation Accuracy Across Runs\")\n    plt.savefig(out_path, bbox_inches=\"tight\")\n    plt.close()\n\n\ndef line_plot_loss(runs: List[Dict], out_path: Path):\n    plt.figure(figsize=(6, 4))\n    for r in runs:\n        losses = [e[\"train_loss\"] for e in r[\"history\"]]\n        plt.plot(range(1, len(losses) + 1), losses, label=r[\"run_id\"])\n        # Annotate final value\n        plt.text(len(losses), losses[-1], f\"{losses[-1]:.3f}\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Training Loss\")\n    plt.title(\"Training Loss Curves\")\n    plt.legend()\n    plt.savefig(out_path, bbox_inches=\"tight\")\n    plt.close()\n\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Aggregate and visualise experiment results\")\n    parser.add_argument(\"--results-dir\", type=str, required=True, help=\"Directory containing run sub-folders\")\n    args = parser.parse_args()\n\n    results_dir = Path(args.results_dir)\n    runs = load_results(results_dir)\n    assert len(runs) > 0, \"No results.json files found.\"\n\n    # ------------- Figures --------------\n    acc_out = results_dir / \"accuracy.pdf\"\n    loss_out = results_dir / \"training_loss.pdf\"\n    bar_plot_accuracy(runs, acc_out)\n    line_plot_loss(runs, loss_out)\n\n    # ----------- Numerical JSON ---------\n    summary = {\n        \"num_runs\": len(runs),\n        \"runs\": [{\"run_id\": r[\"run_id\"], \"best_val_acc\": r[\"best_val_acc\"], \"test_acc\": r[\"test_acc\"]} for r in runs]\n    }\n    print(json.dumps(summary, indent=2))\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "preprocess_py": "\"\"\"Common preprocessing utilities with dataset specific logic for CIFAR-10, MNIST and a synthetic dummy set.\"\"\"\n\nfrom pathlib import Path\nfrom typing import Tuple\n\nimport torch\nfrom torch.utils.data import DataLoader, Dataset, random_split, Subset\nimport torchvision.transforms as T\nfrom torchvision.datasets import CIFAR10, MNIST\n\n__all__ = [\"load_dataset\"]\n\n\nclass DummyDataset(Dataset):\n    \"\"\"Synthetic dataset used when no real dataset is specified (unit tests / CI).\"\"\"\n\n    def __init__(self, length: int = 512, num_classes: int = 10, input_shape=(1, 28, 28)):\n        self.length = length\n        self.num_classes = num_classes\n        self.input_shape = input_shape\n\n    def __len__(self):\n        return self.length\n\n    def __getitem__(self, idx):\n        x = torch.randn(self.input_shape)\n        y = torch.randint(0, self.num_classes, (1,)).item()\n        return x, y\n\n\n# ------------------ Helpers ------------------\n\ndef _split_dataset(dataset: Dataset, val_ratio: float = 0.1, seed: int = 42):\n    \"\"\"Simple random split into train/val using given ratio.\"\"\"\n    val_size = int(len(dataset) * val_ratio)\n    train_size = len(dataset) - val_size\n    generator = torch.Generator().manual_seed(seed)\n    return random_split(dataset, [train_size, val_size], generator=generator)\n\n\n# ------------------ Main API -----------------\n\ndef load_dataset(name: str,\n                 batch_size: int = 128,\n                 num_workers: int = 4,\n                 smoke_test: bool = False,\n                 augment_magnitude: int = 9):\n    \"\"\"Return train/val/test DataLoaders together with input shape & #classes.\n\n    Additional args:\n        smoke_test: when True, use a drastically reduced subset for quick CI.\n        augment_magnitude: RandAugment magnitude hyper-parameter (0-30).\n    \"\"\"\n    name = name.lower()\n\n    if name == \"dummy\":\n        length = 128 if smoke_test else 2048\n        input_shape = (1, 28, 28)\n        num_classes = 10\n        full_ds = DummyDataset(length=length, num_classes=num_classes, input_shape=input_shape)\n        train_ds, val_ds = _split_dataset(full_ds, val_ratio=0.1)\n        test_ds = DummyDataset(length=int(length * 0.2), num_classes=num_classes, input_shape=input_shape)\n\n    elif name == \"mnist\":\n        root = Path.home() / \".cache/datasets\"\n        common_tf = T.ToTensor()\n        train_full = MNIST(root=root, train=True, download=True, transform=common_tf)\n        test_ds = MNIST(root=root, train=False, download=True, transform=common_tf)\n        train_ds, val_ds = _split_dataset(train_full, val_ratio=0.1)\n        input_shape = (1, 28, 28)\n        num_classes = 10\n\n    elif name == \"cifar10\":\n        # ---------------- Transforms ----------------\n        mean = (0.4914, 0.4822, 0.4465)\n        std = (0.2470, 0.2435, 0.2616)\n        # RandAugment might not be available on very old torchvisions – guard accordingly\n        try:\n            rand_aug = T.RandAugment(num_ops=2, magnitude=augment_magnitude)\n        except AttributeError:\n            rand_aug = T.Identity()\n\n        train_tf = T.Compose([\n            T.RandomCrop(32, padding=4),\n            T.RandomHorizontalFlip(),\n            rand_aug,\n            T.ToTensor(),\n            T.Normalize(mean, std),\n            T.RandomErasing(p=0.5, scale=(0.08, 0.2), ratio=(0.9, 1.1)),  # cutout-like\n        ])\n\n        test_tf = T.Compose([\n            T.ToTensor(),\n            T.Normalize(mean, std),\n        ])\n\n        root = Path.home() / \".cache/datasets\"\n        train_full = CIFAR10(root=root, train=True, download=True, transform=train_tf)\n        test_ds_full = CIFAR10(root=root, train=False, download=True, transform=test_tf)\n\n        # Validation split – keep transforms identical to train except no random augment for val to mimic test\n        val_tf = test_tf\n        # copy dataset but with new transform\n        val_full = CIFAR10(root=root, train=True, download=True, transform=val_tf)\n\n        # The underlying dataset objects share data so we can split indices consistently\n        train_ds, _val_ds = _split_dataset(list(range(len(train_full))), val_ratio=0.1)\n        train_ds = Subset(train_full, train_ds.indices)\n        val_ds = Subset(val_full, _val_ds.indices)\n\n        # Smoke test subsets\n        if smoke_test:\n            train_ds = Subset(train_ds, list(range(0, 512)))\n            val_ds = Subset(val_ds, list(range(0, 128)))\n            test_ds_full = Subset(test_ds_full, list(range(0, 128)))\n\n        test_ds = test_ds_full\n        input_shape = (3, 32, 32)\n        num_classes = 10\n\n    else:\n        raise ValueError(f\"Unsupported dataset: {name}. Supported: dummy, mnist, cifar10\")\n\n    train_loader = DataLoader(train_ds, batch_size=batch_size, shuffle=True, num_workers=num_workers, pin_memory=True)\n    val_loader = DataLoader(val_ds, batch_size=batch_size, shuffle=False, num_workers=num_workers, pin_memory=True)\n    test_loader = DataLoader(test_ds, batch_size=batch_size, shuffle=False, num_workers=num_workers, pin_memory=True)\n\n    return train_loader, val_loader, test_loader, input_shape, num_classes\n",
    "model_py": "\"\"\"Model architectures and hyper-parameter helpers.\"\"\"\n\nfrom typing import Dict, Type, List\n\nimport torch\nimport torch.nn as nn\n\n__all__ = [\"get_model\", \"build_hyperparam_tensors\", \"apply_ohgw_step\"]\n\n# -----------------------------------------------------\n#                CIFAR-Style ResNet\n# -----------------------------------------------------\n\ndef conv3x3(in_planes: int, out_planes: int, stride: int = 1):\n    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)\n\n\nclass BasicBlock(nn.Module):\n    expansion = 1\n\n    def __init__(self, in_planes: int, planes: int, stride: int = 1):\n        super().__init__()\n        self.conv1 = conv3x3(in_planes, planes, stride)\n        self.bn1 = nn.BatchNorm2d(planes)\n        self.relu = nn.ReLU(inplace=True)\n        self.conv2 = conv3x3(planes, planes)\n        self.bn2 = nn.BatchNorm2d(planes)\n\n        self.downsample = None\n        if stride != 1 or in_planes != planes:\n            self.downsample = nn.Sequential(\n                nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride, bias=False),\n                nn.BatchNorm2d(planes),\n            )\n\n    def forward(self, x):\n        identity = x\n        out = self.relu(self.bn1(self.conv1(x)))\n        out = self.bn2(self.conv2(out))\n        if self.downsample is not None:\n            identity = self.downsample(x)\n        out += identity\n        out = self.relu(out)\n        return out\n\n\nclass Bottleneck(nn.Module):\n    expansion = 4\n\n    def __init__(self, in_planes: int, planes: int, stride: int = 1):\n        super().__init__()\n        self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=1, bias=False)\n        self.bn1 = nn.BatchNorm2d(planes)\n        self.conv2 = conv3x3(planes, planes, stride)\n        self.bn2 = nn.BatchNorm2d(planes)\n        self.conv3 = nn.Conv2d(planes, planes * self.expansion, kernel_size=1, bias=False)\n        self.bn3 = nn.BatchNorm2d(planes * self.expansion)\n        self.relu = nn.ReLU(inplace=True)\n\n        self.downsample = None\n        if stride != 1 or in_planes != planes * self.expansion:\n            self.downsample = nn.Sequential(\n                nn.Conv2d(in_planes, planes * self.expansion, kernel_size=1, stride=stride, bias=False),\n                nn.BatchNorm2d(planes * self.expansion),\n            )\n\n    def forward(self, x):\n        identity = x\n        out = self.relu(self.bn1(self.conv1(x)))\n        out = self.relu(self.bn2(self.conv2(out)))\n        out = self.bn3(self.conv3(out))\n        if self.downsample is not None:\n            identity = self.downsample(x)\n        out += identity\n        out = self.relu(out)\n        return out\n\n\nclass ResNet_CIFAR(nn.Module):\n    \"\"\"ResNet variant suitable for 32×32 images (no initial 7×7/stride-2).\"\"\"\n\n    def __init__(self, block: Type[nn.Module], layers: List[int], num_classes: int = 10, in_channels: int = 3):\n        super().__init__()\n        self.in_planes = 16\n        self.conv1 = conv3x3(in_channels, self.in_planes)\n        self.bn1 = nn.BatchNorm2d(self.in_planes)\n        self.relu = nn.ReLU(inplace=True)\n\n        self.layer1 = self._make_layer(block, 16, layers[0], stride=1)\n        self.layer2 = self._make_layer(block, 32, layers[1], stride=2)\n        self.layer3 = self._make_layer(block, 64, layers[2], stride=2)\n\n        self.avgpool = nn.AdaptiveAvgPool2d(1)\n        self.fc = nn.Linear(64 * block.expansion, num_classes)\n\n        for m in self.modules():\n            if isinstance(m, nn.Conv2d):\n                nn.init.kaiming_normal_(m.weight, mode=\"fan_out\", nonlinearity=\"relu\")\n\n    def _make_layer(self, block: Type[nn.Module], planes: int, blocks: int, stride: int):\n        layers = []\n        layers.append(block(self.in_planes, planes, stride))\n        self.in_planes = planes * block.expansion\n        for _ in range(1, blocks):\n            layers.append(block(self.in_planes, planes))\n        return nn.Sequential(*layers)\n\n    def forward(self, x):\n        x = self.relu(self.bn1(self.conv1(x)))\n        x = self.layer1(x)\n        x = self.layer2(x)\n        x = self.layer3(x)\n        x = self.avgpool(x)\n        x = torch.flatten(x, 1)\n        x = self.fc(x)\n        return x\n\n\n# Factory helpers\n\ndef resnet20(in_channels: int, num_classes: int):\n    return ResNet_CIFAR(BasicBlock, [3, 3, 3], num_classes=num_classes, in_channels=in_channels)\n\n\ndef resnet50(in_channels: int, num_classes: int):\n    return ResNet_CIFAR(Bottleneck, [3, 4, 6, 3][:3], num_classes=num_classes, in_channels=in_channels)  # truncate for CIFAR\n\n\nclass SimpleCNN(nn.Module):\n    \"\"\"Fallback small CNN for generic tasks.\"\"\"\n\n    def __init__(self, in_channels: int, num_classes: int):\n        super().__init__()\n        self.net = nn.Sequential(\n            nn.Conv2d(in_channels, 32, kernel_size=3, padding=1),\n            nn.BatchNorm2d(32),\n            nn.ReLU(),\n            nn.MaxPool2d(2),\n            nn.Conv2d(32, 64, kernel_size=3, padding=1),\n            nn.BatchNorm2d(64),\n            nn.ReLU(),\n            nn.MaxPool2d(2),\n            nn.Flatten(),\n            nn.Linear(64 * (8 if in_channels == 3 else 7) * 8, 128),\n            nn.ReLU(),\n            nn.Linear(128, num_classes),\n        )\n\n    def forward(self, x):\n        return self.net(x)\n\n\n# ---------------- Registry ----------------\n\nMODEL_REGISTRY: Dict[str, callable] = {\n    \"simplecnn\": SimpleCNN,\n    \"baseline\": SimpleCNN,\n    \"resnet20\": resnet20,\n    \"resnet50\": resnet50,\n}\n\n\n# ---------------- Hyper-Param helpers ----------------\n\ndef build_hyperparam_tensors(lr: float, weight_decay: float, momentum: float, device) -> Dict[str, torch.Tensor]:\n    \"\"\"Represent continuous hyper-parameters as differentiable tensors.\"\"\"\n    hypers = {\n        \"log_lr\": torch.tensor(float(torch.log(torch.tensor(lr))), dtype=torch.float32, requires_grad=True, device=device),\n        \"log_wd\": torch.tensor(float(torch.log(torch.tensor(weight_decay + 1e-12))), dtype=torch.float32, requires_grad=True, device=device),\n        \"momentum\": torch.tensor(momentum, dtype=torch.float32, requires_grad=True, device=device),\n    }\n    return hypers\n\n\n# ---------------- OHGW Core ----------------\n\ndef apply_ohgw_step(model: nn.Module, hyperparams: Dict[str, torch.Tensor], train_loader, criterion, eta_h: float,\n                    device):\n    \"\"\"Perform One-Shot Hyper-Gradient Warm-Start on a single mini-batch.\"\"\"\n    model.train()\n    data_iter = iter(train_loader)\n    data, target = next(data_iter)\n    data, target = data.to(device), target.to(device)\n\n    output = model(data)\n    ce_loss = criterion(output, target)\n    reg_loss = torch.exp(hyperparams['log_wd']) * sum((p ** 2).sum() for p in model.parameters())\n    loss = ce_loss + reg_loss\n\n    hypers = list(hyperparams.values())\n    grads = torch.autograd.grad(loss, hypers, allow_unused=True)\n\n    with torch.no_grad():\n        for p, g in zip(hyperparams.values(), grads):\n            if g is not None:\n                p -= eta_h * g\n\n    return hyperparams\n",
    "main_py": "import argparse\nimport json\nimport subprocess\nimport sys\nimport threading\nfrom pathlib import Path\nfrom typing import Dict, Any\n\nimport yaml\n\nCONFIG_DIR = Path(__file__).resolve().parent.parent / \"config\"\n\n\nclass Tee:\n    \"\"\"Tee that duplicates writes to multiple file-like objects (stdout + file).\"\"\"\n\n    def __init__(self, *files):\n        self.files = files\n\n    def write(self, data):\n        for f in self.files:\n            f.write(data)\n            f.flush()\n\n    def flush(self):\n        for f in self.files:\n            f.flush()\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        for f in self.files:\n            try:\n                f.close()\n            except Exception:\n                pass\n\n\ndef stream_pipe(pipe, tee):\n    \"\"\"Continuously read from subprocess pipe and write to Tee.\"\"\"\n    for line in iter(pipe.readline, b\"\"):\n        decoded = line.decode()\n        tee.write(decoded)\n    pipe.close()\n\n\ndef run_experiment(run_cfg: Dict[str, Any], results_root: Path, smoke_test: bool):\n    run_id = run_cfg[\"run_id\"]\n    run_dir = results_root / run_id\n    run_dir.mkdir(parents=True, exist_ok=True)\n\n    # Write run-specific config to disk for train.py\n    cfg_path = run_dir / \"config.yaml\"\n    with cfg_path.open(\"w\") as f:\n        yaml.safe_dump(run_cfg, f)\n\n    cmd = [sys.executable, \"-m\", \"src.train\", \"--config\", str(cfg_path), \"--run-id\", run_id, \"--results-dir\",\n           str(run_dir)]\n    if smoke_test:\n        cmd.append(\"--smoke-test\")\n\n    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, bufsize=1)\n\n    # Prepare tee files\n    stdout_file = (run_dir / \"stdout.log\").open(\"w\")\n    stderr_file = (run_dir / \"stderr.log\").open(\"w\")\n\n    tee_out = Tee(sys.stdout, stdout_file)\n    tee_err = Tee(sys.stderr, stderr_file)\n\n    # Threaded streaming so both pipes are consumed concurrently\n    t_out = threading.Thread(target=stream_pipe, args=(process.stdout, tee_out))\n    t_err = threading.Thread(target=stream_pipe, args=(process.stderr, tee_err))\n    t_out.start()\n    t_err.start()\n\n    process.wait()\n    t_out.join()\n    t_err.join()\n\n    stdout_file.close()\n    stderr_file.close()\n\n    if process.returncode != 0:\n        raise RuntimeError(f\"Run {run_id} failed with return code {process.returncode}\")\n\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Experiment orchestrator: runs all variations and triggers evaluation\")\n    parser.add_argument(\"--smoke-test\", action=\"store_true\", help=\"Run lightweight smoke tests defined in smoke_test.yaml\")\n    parser.add_argument(\"--full-experiment\", action=\"store_true\", help=\"Run full experiment variations defined in full_experiment.yaml\")\n    parser.add_argument(\"--results-dir\", type=str, required=True, help=\"Root directory where all run sub-dirs and figures are saved\")\n    args = parser.parse_args()\n\n    if not (args.smoke_test ^ args.full_experiment):\n        parser.error(\"Exactly one of --smoke-test or --full-experiment must be specified.\")\n\n    cfg_file = CONFIG_DIR / (\"smoke_test.yaml\" if args.smoke_test else \"full_experiment.yaml\")\n    with cfg_file.open() as f:\n        cfg_data = yaml.safe_load(f)\n\n    experiments = cfg_data.get(\"experiments\", [])\n    if len(experiments) == 0:\n        raise ValueError(\"No experiments found in configuration file.\")\n\n    results_root = Path(args.results_dir)\n    results_root.mkdir(parents=True, exist_ok=True)\n\n    for run_cfg in experiments:\n        print(json.dumps({\"event\": \"start_run\", \"run_id\": run_cfg[\"run_id\"]}))\n        run_experiment(run_cfg, results_root, smoke_test=args.smoke_test)\n        print(json.dumps({\"event\": \"end_run\", \"run_id\": run_cfg[\"run_id\"]}))\n\n    # After all runs, trigger evaluation\n    eval_cmd = [sys.executable, \"-m\", \"src.evaluate\", \"--results-dir\", str(results_root)]\n    subprocess.run(eval_cmd, check=True)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "pyproject_toml": "[project]\nname = \"ohgw-experiments\"\nversion = \"0.1.0\"\ndescription = \"Common core foundation for OHGW experimental framework\"\nauthors = [\n  { name = \"Researcher\", email = \"researcher@example.com\" }\n]\nrequires-python = \">=3.9\"\nreadme = \"README.md\"\n\n[project.dependencies]\ntorch = \"*\"\ntorchvision = \"*\"\nPyYAML = \"*\"\nmatplotlib = \"*\"\nseaborn = \"*\"\nnumpy = \"*\"\ntqdm = \"*\"\n\n[build-system]\nrequires = [\"setuptools>=61.0\"]\nbuild-backend = \"setuptools.build_meta\"\n",
    "smoke_test_yaml": "experiments:\n  - run_id: asha-baseline-smoke\n    model: resnet20\n    dataset: cifar10\n    epochs: 1\n    batch_size: 16\n    learning_rate: 0.1\n    weight_decay: 0.0005\n    momentum: 0.9\n    augment_magnitude: 3\n    label_smoothing: 0.1\n    use_ohgw: false\n    random_warm: false\n\n  - run_id: asha-random-warm-smoke\n    model: resnet20\n    dataset: cifar10\n    epochs: 1\n    batch_size: 16\n    learning_rate: 0.1\n    weight_decay: 0.0005\n    momentum: 0.9\n    augment_magnitude: 3\n    label_smoothing: 0.1\n    use_ohgw: false\n    random_warm: true\n    sigma: 0.01\n\n  - run_id: asha-ohgw-1step-smoke\n    model: resnet20\n    dataset: cifar10\n    epochs: 1\n    batch_size: 16\n    learning_rate: 0.1\n    weight_decay: 0.0005\n    momentum: 0.9\n    augment_magnitude: 3\n    label_smoothing: 0.1\n    use_ohgw: true\n    eta_h: 0.001\n    ohgw_steps: 1\n\n  - run_id: asha-ohgw-3step-smoke\n    model: resnet20\n    dataset: cifar10\n    epochs: 1\n    batch_size: 16\n    learning_rate: 0.1\n    weight_decay: 0.0005\n    momentum: 0.9\n    augment_magnitude: 3\n    label_smoothing: 0.1\n    use_ohgw: true\n    eta_h: 0.001\n    ohgw_steps: 3\n",
    "full_experiment_yaml": "experiments:\n  - run_id: asha-baseline\n    model: resnet20\n    dataset: cifar10\n    epochs: 200\n    batch_size: 128\n    learning_rate: 0.1\n    weight_decay: 0.0005\n    momentum: 0.9\n    augment_magnitude: 9\n    label_smoothing: 0.1\n    use_ohgw: false\n    random_warm: false\n\n  - run_id: asha-random-warm\n    model: resnet20\n    dataset: cifar10\n    epochs: 200\n    batch_size: 128\n    learning_rate: 0.1\n    weight_decay: 0.0005\n    momentum: 0.9\n    augment_magnitude: 9\n    label_smoothing: 0.1\n    use_ohgw: false\n    random_warm: true\n    sigma: 0.01\n\n  - run_id: asha-ohgw-1step\n    model: resnet20\n    dataset: cifar10\n    epochs: 200\n    batch_size: 128\n    learning_rate: 0.1\n    weight_decay: 0.0005\n    momentum: 0.9\n    augment_magnitude: 9\n    label_smoothing: 0.1\n    use_ohgw: true\n    eta_h: 0.001\n    ohgw_steps: 1\n\n  - run_id: asha-ohgw-3step\n    model: resnet20\n    dataset: cifar10\n    epochs: 200\n    batch_size: 128\n    learning_rate: 0.1\n    weight_decay: 0.0005\n    momentum: 0.9\n    augment_magnitude: 9\n    label_smoothing: 0.1\n    use_ohgw: true\n    eta_h: 0.001\n    ohgw_steps: 3\n\n# Global defaults (can be overridden per-run)\n# default_num_workers: 8\n# default_seed: 42\n# End of full_experiment.yaml\n"
}
