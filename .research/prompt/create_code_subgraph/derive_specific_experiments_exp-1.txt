
Input:
You are a cutting-edge AI researcher generating complete, executable code for research paper experiments.

**Previous Step (Completed)**: Common base logic and evaluation framework have been generated with placeholders
**Current Task**: Generate production-ready code by completing all placeholders with actual implementations.

Your task is to take the common base foundation code and derive specific experimental variations by replacing ALL placeholders with complete, working implementations of datasets, models, and configurations specified in the experimental design. The resulting code must be immediately executable without any further modifications.

# Instructions: Experiment Specialization

## Core Task
- CONFIGURE ALL EXPERIMENTS: The primary task is to populate YAML file with a complete list of configurations for all run variations (baseline, proposed, ablations).
- REPLACE ALL PLACEHOLDERS: Replace all placeholders in the common base code with actual, complete implementations. No TODO, PLACEHOLDER, pass, or ... are allowed.
- IMPLEMENT MODELS FROM SCRATCH: YOU must implement all model architectures corresponding to the variations defined in the YAML file within `src/model.py`. Do NOT leave comments like "inject actual model here" or "use pretrained model".
- COMPLETE DATA PIPELINE: Implement the specific data loading and preprocessing logic in `src/preprocess.py`.
- PRODUCTION READY: The generated code must be immediately executable for research paper experiments without any further modifications. No external model files or additional implementation steps should be required.

## Specialization Requirements
- Complete `config/full_experiment.yaml`: This file is the driver of the entire experiment. Define each run variation (['asha-baseline', 'asha-random-warm', 'asha-ohgw-1step', 'asha-ohgw-3step']) as a separate item in the `runs` list, specifying its unique id, model name, and parameters.
- Complete `config/smoke_test.yaml`: Define lightweight versions of ALL run variations from full_experiment.yaml with reduced epochs/data to quickly validate pipeline integrity.
- Implement all required model architectures in `src/model.py`. The model names in the YAML must correspond to the model registry.
- Replace dataset placeholders with actual Hugging Face dataset loading and preprocessing
- Replace model placeholders with specific model architectures for each variation
- Ensure all external resources specified in the experimental design are properly integrated

## Complete Output Policy
- If a script/file has ANY changes: Output the COMPLETE, FULL script/file content
- If a script/file has NO changes needed: Output `[UNCHANGED]` placeholder only
- NEVER truncate or abbreviate changed content


# Experimental Environment
NVIDIA A100×8
VRAM：80GB×8
RAM：2048 GB

# Current Research Method
{
    "Open Problems": "Even the fastest gray–box and multi-fidelity HPO methods (ASHA, PASHA, DyHPO, BOIL) still waste computation on obviously bad configurations because every trial is treated as a black box; none of the information that is already available inside the training loop – most notably the stochastic hyper-gradient obtained at almost zero cost with automatic differentiation – is used to steer the search. The open problem is: how can we inject very cheap, noisy hyper-gradient signals into existing bandit-style schedulers without redesigning their core logic?",
    "Methods": "We propose ‘One-Shot Hyper-Gradient Warm-Starts’ (OHGW), a drop-in modification for any Successive-Halving style scheduler (Hyperband / ASHA / PASHA).  1. When a new configuration x is sampled it is run for only one **mini-batch** (≈10-2% of a normal epoch).  2. In this first forward / backward pass we keep the compute graph and call automatic differentiation once more to obtain a single stochastic hyper-gradient ∂L/∂ψ for every continuous hyperparameter ψ (learning-rate, weight-decay, momentum …) exactly as in implicit hyper-gradient papers, but **without unrolling** (cost <1.2× normal mini-batch).  3. We apply one hyper-parameter update ψ←ψ−η_h ∂L/∂ψ (η_h is a fixed tiny step such as 10-3).  4. The adjusted configuration x′ – which differs from x by at most one gradient step in each hyper-parameter – is what the scheduler subsequently evaluates for its first rung (e.g. 1 epoch).  5. Everything else (promotion rules, budget doubling, stopping) is untouched.  In effect the scheduler still explores the same region, but every candidate is lightly nudged towards a valley before costly training starts.",
    "Experimental Setup": "Benchmark: CIFAR-10 with ResNet-20 and 5-dim continuous search space {log-lr, log-wd, momentum, augment-magnitude, label-smoothing}.  Scheduler baselines: ASHA, PASHA, DyHPO (their public implementations).  Our variants: ASHA+OHGW, PASHA+OHGW, DyHPO+OHGW (one-line wrapper around trial creation).  Mini-batch for warm-start: 128 images.  Hyper-gradient lr η_h=1e-3, computed with PyTorch autograd; no higher-order terms.  Each method is given the same overall GPU budget (4×V100 for 12 hours) and 50 seeds.  Metrics: (i) best test accuracy reached vs. wall-clock, (ii) total GPU hours until 93% accuracy, (iii) distribution of final hyper-parameters to check bias.",
    "Experimental Code": "# pseudo-code\nfor cfg in scheduler.sample():\n    model = build_model(cfg)\n    data = next(train_loader)            # one mini-batch\n    loss  = forward_loss(model, data)\n    grads = torch.autograd.grad(loss, cfg.continuous_params())\n    with torch.no_grad():               # one hyper step\n        for p,g in zip(cfg.continuous_params(), grads):\n            p -= eta_h * g\n    scheduler.launch(cfg)               # continue as usual",
    "Expected Result": "Across all schedules OHGW cuts the median time-to-93%-accuracy by ≈20% (ASHA 11.2→9.0 h, PASHA 7.3→5.8 h, DyHPO 6.1→4.9 h) while keeping the same final accuracy. The added warm-start costs <3% extra compute. Hyper-parameter distributions remain similar, showing no harmful bias.",
    "Expected Conclusion": "A single stochastic hyper-gradient step collected before the first rung is enough to noticeably reduce wasted resources in bandit-style HPO. Because OHGW requires only two extra autograd calls and no change to the scheduler logic, it can be retro-fitted to almost any existing gray-box optimizer, offering an attractive efficiency boost with negligible engineering effort."
}

# Experimental Design
- Strategy: Overall Experimental Strategy for Validating One-Shot Hyper-Gradient Warm-Starts (OHGW)

1. Core Hypotheses to Validate
   a. Efficiency: OHGW reduces wall-clock time and GPU hours needed by bandit-style schedulers to reach a preset performance threshold.
   b. Performance Preservation: OHGW does not hurt (and ideally preserves or slightly improves) the best final metric attainable by the underlying scheduler.
   c. Robustness & Variance: OHGW’s benefit is consistent across random seeds, search-space dimensionalities, data sets, model families and scheduler types.
   d. Generalization: The same one-line wrapper applies without retuning to tasks beyond image classification (e.g. language modelling, tabular, RL) and to both small- and large-scale training loops.
   e. Cost Overhead: Extra compute, memory and engineering overhead introduced by OHGW remain negligible (<5 % GPU-hours, <10 % peak-memory, ≤20 LoC integration).

2. Experiment Families (all experiments draw from one common pool of settings below)
   • Task Breadth: vision (CIFAR-10/100, ImageNet-1k), NLP (WikiText-103), tabular (UCI suite), RL (Atari).
   • Model Breadth: ResNet family, ViT, Transformer-LM, XGBoost, PPO-CNN.
   • Scheduler Breadth: ASHA, PASHA, DyHPO, Hyperband-BO, BOIL (if open-sourced).
   • Search-Space Breadth: 3–10 continuous hyper-parameters; mixed discrete+continuous cases to show neutrality to inapplicable params.
   • Scale Breadth: single-GPU up to 64-GPU distributed training (multi-node pools or simulated via concurrency on the 8×A100 machine).

3. Comparison Axes for Every Experiment
   • Baseline Scheduler (vanilla).
   • Baseline + Random Warm-Start in ∆ψ range (controls for mere perturbation).
   • Baseline + Multiple Hyper-Gradient Steps (ablation to check diminishing returns).
   • Scheduler-specific SoTA gradient-aware HPO if available (e.g. DyHPO, BOIL) to position OHGW competitively.

4. Metrics & Evaluation Protocol
   Primary quantitative metrics (reported as median ±IQR over ≥30 seeds):
      – T@τ: Wall-clock/GPU-hour to reach target score τ (task-specific; chosen so that vanilla reaches it within budget).
      – Best final validation/test score after fixed budget.
      – Compute Overhead: (Σ warm-start flop) ⁄ (total flop) and peak VRAM.
   Secondary diagnostics:
      – AUC of best-score-vs-time curve (overall sample efficiency).
      – Seed-wise variance of T@τ and final score.
      – Hyper-parameter trajectory statistics (mean shift & KL-divergence of posterior over ψ).
   Qualitative/visual:
      – Survival plots of promoted configurations per rung.
      – Heatmaps of hyper-gradient magnitude vs. eventual benefit.
   Statistical test: two-sided Wilcoxon signed-rank (α=0.05) on paired seeds.

5. Success Criteria (must hold in ≥75 % of experiment tuples)
   • ≥15 % median reduction in T@τ with p<0.05.
   • ≤0.2 % relative drop (or improvement) in best final score.
   • ≤5 % extra GPU-hours and ≤10 % extra peak VRAM.
   • Std-dev(T@τ) not inflated by more than 10 %.

6. Multi-Perspective Validation Plan
   • Efficiency: Use identical global budgets and identical seed lists; plot temporal efficiency curves and compute aggregated speed-up ratios.
   • Performance Preservation: Report final accuracy/F1/return and confidence intervals.
   • Robustness: Repeat each experiment block with different batch sizes, η_h values (10⁻⁴…10⁻²) and noisy labels; perform sensitivity analysis.
   • Generalization: Run a “zero-tuning transfer” study—apply the CIFAR-tuned η_h to NLP, RL and tabular tasks unchanged.
   • Ablations & Controls: Random perturbation, multistep hyper-gradient, frozen discrete params, partial gradient masking.
   • Scalability: Micro-benchmark warm-start time and memory for 1, 8, 64 GPUs using synthetic workloads.

7. Experimental Logistics
   • Central harness (Hydra + PyTorch Lightning) to register all trials, guarantee identical I/O pipelines and logging format (wandb/MLflow).
   • Dedicate 4×A100 per independent replicate to avoid resource contention; schedule via Slurm with cgroup accounting to record accurate GPU-hour usage.
   • Automated post-processing notebook generates unified tables, statistical tests and publication-ready plots.

8. Risk Mitigation & Contingency
   • If hyper-gradient extraction fails for exotic layers, fall back to finite-difference on ψ only (flag run but keep in aggregated stats).
   • If OHGW underperforms on discrete-heavy spaces, isolate continuous subset and document limitation.

This unified strategy guarantees that every forthcoming experiment—regardless of domain—collects commensurate evidence on efficiency, performance, robustness, generality and overhead, enabling a cohesive, multi-angle validation of OHGW’s claimed benefits.

# Current Experiment (to generate code for)
- Experiment ID: exp-1
- Description: Objective / Hypothesis: Quantify the raw efficiency gains of One-Shot Hyper-Gradient Warm-Starts (OHGW) for classical image-classification hyper-parameter optimisation and disentangle the effect of merely perturbing the hyper-parameters from using the true hyper-gradient.

Domain & Task: Vision – CIFAR-10 image classification.

Models: ResNet-20 (main), ResNet-50 (sanity-check on a deeper network – evaluated only for the best scheduler variant after selection).

Schedulers under test: ASHA (official implementation in Ray-Tune v2.6).

Search space (5-dim continuous): log10-learning-rate, log10-weight-decay, momentum, RandAugment-magnitude, label-smoothing.

Run variations:
• asha-baseline – vanilla ASHA.
• asha-random-warm – perform one random Gaussian step (σ=0.01) in ψ instead of a hyper-gradient step (control).* 
• asha-ohgw-1step – proposed method (η_h=1e-3, one step).
• asha-ohgw-3step – same but apply three successive hyper-gradient steps (ablation for diminishing returns).

Datasets & Pre-processing: CIFAR-10, standard train/val/test split = 45k/5k/10k.  Per-image Z-score normalisation, RandAugment (m searchable), Cutout(16), label-smoothing (ε searchable).  Validation set is stratified.

Training loop: 200 epochs (budget for full training), Cosine LR, batch size 128, SGD-M.  Weight initialisation He-normal.  Mixed precision (AMP).  Early-stopping OFF (to reveal full curve).

Evaluation metrics:
Primary – T@93%: wall-clock hours & GPU hours needed to first reach 93% val accuracy.
Secondary – best test accuracy after 200 epochs; AUC(score-vs-time); overhead-FLOPs ratio; peak VRAM; seed-wise variance.

Protocol: 32 independent HPO replicates (seed-paired across variations).  Each replicate is allowed 12 A100-GPU hours (4 GPUs×3 h) exactly.  Statistics: median±IQR, Wilcoxon signed-rank (α=0.05) on paired T@93%.

Hyper-parameter sensitivity: inside asha-ohgw-1step, sweep η_h ∈ {1e-4, 3e-4, 1e-3, 3e-3} on an extra 8 seeds; fit LOESS to quantify curvature.

Robustness: inject 10% symmetric label noise on a duplicate run; compare % speed-up retained.

Compute efficiency: PyTorch-Profiler to record FLOPs; NVML + psutil for VRAM/RAM; timestamps logged by Lightning Callbacks.

Example code fragment (within Ray trial):
```python
# one-shot HG warm-start
loss = model(train_mb)                    # forward
hyper_grads = torch.autograd.grad(loss, cfg.continuous())
with torch.no_grad():
    for p, g in zip(cfg.continuous(), hyper_grads):
        p -= 1e-3 * g                     # η_h
# hand control back to ASHA
train_full(cfg)
```

Computational budget on cluster: 8 concurrent trials * 4 GPUs each = 32 GPUs (< half of node).  Wall-clock expected 18h incl. repeats.

Success criteria: ≥15% lower median T@93% for asha-ohgw-1step than asha-baseline with p<0.05 and ≤0.2% drop in final test accuracy.

Footnote *: random-warm uses identical σ distribution as the empirical magnitude of a hyper-gradient step, ensuring fair energy injection.
- Run Variations: ['asha-baseline', 'asha-random-warm', 'asha-ohgw-1step', 'asha-ohgw-3step']

# Base Code
{'train_py': '"""src/train.py\nRuns a single experiment variation (one entry of the YAML config).\nSaves metrics, figures and model weights into the provided run directory\nand prints a JSON summary to stdout (required by the evaluation harness).\n"""\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport logging\nimport os\nimport time\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import Dict, List\n\nimport matplotlib\nimport torch\nimport torch.nn.functional as F\nimport yaml\nfrom matplotlib import pyplot as plt\nfrom torch import nn, optim\nfrom tqdm.auto import tqdm\n\nimport src.model as model_zoo\nimport src.preprocess as preprocess\n\nmatplotlib.use("Agg")  # do not require X11\n\n\n# ---------------- Utility helpers -------------------------------------------------\n\ndef set_random_seed(seed: int) -> None:\n    import random\n    import numpy as np\n\n    torch.manual_seed(seed)\n    random.seed(seed)\n    np.random.seed(seed)\n    if torch.cuda.is_available():\n        torch.cuda.manual_seed_all(seed)\n\n\ndef accuracy(pred: torch.Tensor, target: torch.Tensor) -> float:\n    """Top-1 accuracy."""\n    with torch.no_grad():\n        pred_labels = pred.argmax(dim=1)\n        return (pred_labels == target).float().mean().item() * 100.0\n\n\n# ---------------- Core OHGW implementation ---------------------------------------\n\ndef one_shot_hypergradient_warm_start(\n    model: nn.Module,\n    optimizer_cfg: Dict,\n    batch: List[torch.Tensor],\n    eta_h: float,\n    device: torch.device,\n) -> Dict:\n    """Apply a single stochastic hyper-gradient step on *weight_decay*.\n\n    For demonstration purposes the only continuous hyper-parameter we treat here\n    is the weight-decay "wd".  We keep the implementation generic so that the\n    subsequent specialised experiment step can swap in more elaborate\n    hyper-gradient logic without touching the surrounding framework.\n    """\n\n    # Extract current wd (defaults to 0.0) and wrap as differentiable tensor\n    wd_val: float = float(optimizer_cfg.get("weight_decay", 0.0))\n    wd = torch.tensor(wd_val, dtype=torch.float32, device=device, requires_grad=True)\n\n    inputs, targets = batch\n    inputs, targets = inputs.to(device), targets.to(device)\n    # Forward with weight-decay regularisation term that depends on *wd*\n    logits = model(inputs)\n    ce_loss = F.cross_entropy(logits, targets)\n    l2_term = 0.5 * wd * sum((p ** 2).sum() for p in model.parameters())\n    loss = ce_loss + l2_term\n\n    # Compute dL / d(wd)\n    grad_wd, = torch.autograd.grad(loss, wd, retain_graph=False, create_graph=False)\n\n    # One tiny hyper-parameter update\n    wd_new = (wd - eta_h * grad_wd).clamp(min=0.0).item()\n\n    # Return the modified optimiser configuration\n    new_optimizer_cfg = dict(optimizer_cfg)\n    new_optimizer_cfg["weight_decay"] = wd_new\n    return new_optimizer_cfg\n\n\n# ---------------- Training --------------------------------------------------------\n\ndef train_one_epoch(model, loader, optimizer, device):\n    model.train()\n    running_loss = 0.0\n    running_acc = 0.0\n    total = 0\n    for x, y in loader:\n        x, y = x.to(device), y.to(device)\n        optimizer.zero_grad()\n        logits = model(x)\n        loss = F.cross_entropy(logits, y)\n        loss.backward()\n        optimizer.step()\n\n        batch_size = y.size(0)\n        running_loss += loss.item() * batch_size\n        running_acc += accuracy(logits, y) * batch_size\n        total += batch_size\n    return running_loss / total, running_acc / total\n\n\ndef evaluate(model, loader, device):\n    model.eval()\n    loss_sum = 0.0\n    acc_sum = 0.0\n    total = 0\n    with torch.no_grad():\n        for x, y in loader:\n            x, y = x.to(device), y.to(device)\n            logits = model(x)\n            loss = F.cross_entropy(logits, y)\n            batch = y.size(0)\n            loss_sum += loss.item() * batch\n            acc_sum += accuracy(logits, y) * batch\n            total += batch\n    return loss_sum / total, acc_sum / total\n\n\n# ---------------- Main entry ------------------------------------------------------\n\ndef run_training(run_dir: Path, cfg: Dict, run_id: str):\n    run_dir.mkdir(parents=True, exist_ok=True)\n    (run_dir / "figures").mkdir(exist_ok=True, parents=True)\n    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")\n\n    # Set seeds for reproducibility\n    seed = int(cfg.get("seed", 42))\n    set_random_seed(seed)\n\n    # ---------------- Dataset -----------------------------------------------------\n    d_cfg = cfg["dataset"]\n    t_cfg = cfg["training"]\n    train_loader, val_loader, test_loader = preprocess.build_dataloaders(\n        dataset_cfg=d_cfg,\n        batch_size=int(t_cfg["batch_size"]),\n        num_workers=int(t_cfg.get("num_workers", 2)),\n    )\n\n    # ---------------- Model -------------------------------------------------------\n    m_cfg = cfg["model"]\n    model = model_zoo.build_model(m_cfg).to(device)\n\n    # ---------------- Optimiser ---------------------------------------------------\n    opt_cfg = {\n        "lr": float(t_cfg["learning_rate"]),\n        "momentum": float(t_cfg.get("momentum", 0.0)),\n        "weight_decay": float(t_cfg.get("weight_decay", 0.0)),\n    }\n    optimizer = optim.SGD(\n        model.parameters(),\n        lr=opt_cfg["lr"],\n        momentum=opt_cfg["momentum"],\n        weight_decay=opt_cfg["weight_decay"],\n    )\n\n    # ---------------- OHGW warm-start -------------------------------------------\n    if cfg.get("ohgw", {}).get("enabled", False):\n        eta_h = float(cfg["ohgw"].get("eta_h", 1e-3))\n        batch_iter = iter(train_loader)\n        mini_batch = next(batch_iter)\n        opt_cfg = one_shot_hypergradient_warm_start(\n            model, optimizer_cfg=opt_cfg, batch=mini_batch, eta_h=eta_h, device=device\n        )\n        # Re-initialise optimiser with new hyper-params\n        optimizer = optim.SGD(\n            model.parameters(),\n            lr=opt_cfg["lr"],\n            momentum=opt_cfg["momentum"],\n            weight_decay=opt_cfg["weight_decay"],\n        )\n\n    # ---------------- Training loop ---------------------------------------------\n    n_epochs = int(t_cfg["epochs"])\n    history: List[Dict] = []\n    best_val_acc = -1.0\n    best_state_dict = None\n    start_time = time.time()\n\n    for epoch in range(1, n_epochs + 1):\n        train_loss, train_acc = train_one_epoch(model, train_loader, optimizer, device)\n        val_loss, val_acc = evaluate(model, val_loader, device)\n\n        history.append(\n            {\n                "epoch": epoch,\n                "train_loss": train_loss,\n                "train_acc": train_acc,\n                "val_loss": val_loss,\n                "val_acc": val_acc,\n            }\n        )\n\n        if val_acc > best_val_acc:\n            best_val_acc = val_acc\n            best_state_dict = {k: v.cpu() for k, v in model.state_dict().items()}\n\n        logging.info(\n            f"Epoch {epoch:03d}/{n_epochs}: train_loss={train_loss:.4f} train_acc={train_acc:.2f} "\n            f"val_loss={val_loss:.4f} val_acc={val_acc:.2f}"\n        )\n\n    total_seconds = time.time() - start_time\n\n    # ---------------- Test evaluation ------------------------------------------\n    model.load_state_dict(best_state_dict)\n    test_loss, test_acc = evaluate(model, test_loader, device)\n\n    # ---------------- Persist artefacts ----------------------------------------\n    torch.save(best_state_dict, run_dir / "best_model.pt")\n    with open(run_dir / "history.json", "w") as f:\n        json.dump(history, f, indent=2)\n\n    # Figures: loss + accuracy curves -------------------------------------------\n    epochs = [h["epoch"] for h in history]\n    train_losses = [h["train_loss"] for h in history]\n    val_losses = [h["val_loss"] for h in history]\n    plt.figure()\n    plt.plot(epochs, train_losses, label="Train")\n    plt.plot(epochs, val_losses, label="Validation")\n    plt.xlabel("Epoch")\n    plt.ylabel("Cross-Entropy Loss")\n    plt.title(f"Training Loss – {run_id}")\n    for x, y in zip(epochs, val_losses):\n        plt.annotate(f"{y:.2f}", (x, y))\n    plt.legend()\n    fname_loss = run_dir / "figures" / f"training_loss_{run_id}.pdf"\n    plt.savefig(fname_loss, bbox_inches="tight")\n    plt.close()\n\n    train_accs = [h["train_acc"] for h in history]\n    val_accs = [h["val_acc"] for h in history]\n    plt.figure()\n    plt.plot(epochs, train_accs, label="Train")\n    plt.plot(epochs, val_accs, label="Validation")\n    plt.xlabel("Epoch")\n    plt.ylabel("Accuracy (%)")\n    plt.title(f"Accuracy – {run_id}")\n    plt.annotate(\n        f"Best={best_val_acc:.2f}", (epochs[-1], val_accs[-1]),\n        textcoords="offset points", xytext=(0, 10), ha=\'right\'\n    )\n    plt.legend()\n    fname_acc = run_dir / "figures" / f"accuracy_{run_id}.pdf"\n    plt.savefig(fname_acc, bbox_inches="tight")\n    plt.close()\n\n    # ---------------- Final results JSON ---------------------------------------\n    results = {\n        "run_id": run_id,\n        "seed": seed,\n        "dataset": d_cfg["name"],\n        "model": m_cfg["name"],\n        "ohgw_enabled": cfg.get("ohgw", {}).get("enabled", False),\n        "eta_h": cfg.get("ohgw", {}).get("eta_h", None),\n        "training_seconds": total_seconds,\n        "best_val_accuracy": best_val_acc,\n        "test_accuracy": test_acc,\n        "test_loss": test_loss,\n        "history": history,\n        "figures": [str(fname_loss.name), str(fname_acc.name)],\n    }\n    with open(run_dir / "results.json", "w") as f:\n        json.dump(results, f, indent=2)\n\n    # ---------------- Mandatory stdout prints ----------------------------------\n    # 1) Human-readable description\n    print(\n        f"\\n==== Experiment Description ({run_id}) ===="\n        f"\\nDataset: {d_cfg[\'name\']}\\nModel: {m_cfg[\'name\']}\\nOHGW: {results[\'ohgw_enabled\']} (eta_h={results[\'eta_h\']})"\n        f"\\nEpochs: {n_epochs}, Batch Size: {t_cfg[\'batch_size\']}, LR: {t_cfg[\'learning_rate\']}\\n"\n    )\n    # 2) Structured numerical data line (JSON)\n    print(json.dumps(results))\n\n\n# ---------------------------------------------------------------------------------\n\ndef parse_args():\n    p = argparse.ArgumentParser(description="Run one experiment variation")\n    p.add_argument("--run-id", required=True, type=str)\n    p.add_argument("--config-file", required=True, type=str)\n    p.add_argument("--run-dir", required=True, type=str)\n    return p.parse_args()\n\n\nif __name__ == "__main__":\n    args = parse_args()\n\n    # basic logging to stderr (main.py captures streams)\n    logging.basicConfig(\n        level=logging.INFO,\n        format="%(asctime)s | %(levelname)s | %(message)s",\n        datefmt="%H:%M:%S",\n    )\n\n    with open(args.config_file, "r") as f:\n        full_cfg = yaml.safe_load(f)\n\n    run_cfg = full_cfg["variations"][args.run_id]\n\n    run_training(Path(args.run_dir), run_cfg, args.run_id)\n', 'evaluate_py': '"""src/evaluate.py\nAggregates result files from all experiment variations and produces\ncomparison figures + JSON summary printed to stdout.\n"""\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport logging\nimport os\nfrom pathlib import Path\nfrom typing import Dict, List\n\nimport matplotlib\nimport pandas as pd\nimport yaml\nfrom matplotlib import pyplot as plt\nfrom scipy.stats import wilcoxon  # Used if available in env\n\nmatplotlib.use("Agg")\n\n# ----------------------------------------------------------------------------------\n\n\ndef load_all_results(results_dir: Path) -> List[Dict]:\n    data = []\n    for run_dir in results_dir.iterdir():\n        if (run_dir / "results.json").exists():\n            with open(run_dir / "results.json") as f:\n                data.append(json.load(f))\n    return data\n\n\n# ----------------------------------------------------------------------------------\n\ndef create_barplot(df: pd.DataFrame, metric: str, ylabel: str, fname: Path):\n    plt.figure()\n    ax = plt.gca()\n    bars = ax.bar(df["run_id"], df[metric], color="skyblue")\n    ax.set_ylabel(ylabel)\n    ax.set_xlabel("Run Variation")\n    ax.set_title(f"{ylabel} Comparison")\n    ax.set_xticklabels(df["run_id"], rotation=45, ha="right")\n    for bar in bars:\n        height = bar.get_height()\n        ax.annotate(f"{height:.2f}", xy=(bar.get_x() + bar.get_width() / 2, height),\n                    xytext=(0, 3), textcoords="offset points", ha=\'center\', va=\'bottom\')\n    plt.tight_layout()\n    plt.savefig(fname, bbox_inches="tight")\n    plt.close()\n\n\n# ----------------------------------------------------------------------------------\n\ndef aggregate_and_visualise(results_dir: Path):\n    records = load_all_results(results_dir)\n    if not records:\n        raise RuntimeError(f"No results.json found in {results_dir}.*")\n\n    df = pd.DataFrame(records)\n\n    # Basic statistics -----------------------------------------------------------\n    summary = {\n        "runs": df["run_id"].tolist(),\n        "best_val_accuracy": df["best_val_accuracy"].tolist(),\n        "test_accuracy": df["test_accuracy"].tolist(),\n        "training_seconds": df["training_seconds"].tolist(),\n    }\n\n    # Statistical test between first two runs (if >1)\n    p_value = None\n    if len(df) >= 2:\n        try:\n            stat, p_value = wilcoxon(df.iloc[:, 1], df.iloc[:, 2])  # type: ignore\n        except Exception:\n            pass\n    summary["wilcoxon_p_value"] = p_value\n\n    # Figures --------------------------------------------------------------------\n    create_barplot(\n        df, metric="test_accuracy", ylabel="Test Accuracy (%)",\n        fname=results_dir / "final_accuracy_comparison.pdf",\n    )\n    create_barplot(\n        df, metric="training_seconds", ylabel="Training Time (s)",\n        fname=results_dir / "training_time_comparison.pdf",\n    )\n\n    # stdout prints --------------------------------------------------------------\n    print("\\n==== Evaluation Summary ====")\n    print(json.dumps(summary))\n\n\n# ----------------------------------------------------------------------------------\n\ndef parse_args():\n    p = argparse.ArgumentParser()\n    p.add_argument("--results-dir", required=True, type=str)\n    return p.parse_args()\n\n\nif __name__ == "__main__":\n    logging.basicConfig(level=logging.INFO,\n                        format="%(asctime)s | %(levelname)s | %(message)s",\n                        datefmt="%H:%M:%S")\n    args = parse_args()\n    aggregate_and_visualise(Path(args.results_dir))\n', 'preprocess_py': '"""src/preprocess.py\nDataset loading & preprocessing pipeline with explicit placeholders for\nfuture dataset-specific logic.  Includes a fully functional FakeData\nfallback which enables smoke tests without external downloads.\n"""\nfrom __future__ import annotations\n\nimport random\nfrom typing import Tuple\n\nimport torch\nimport torchvision.transforms as T\nfrom torch.utils.data import DataLoader, random_split\nfrom torchvision import datasets\n\n\n# ----------------------------------------------------------------------------------\n\n\ndef _build_fakedata(params: dict, batch_size: int, num_workers: int):\n    transform = T.Compose([T.ToTensor()])\n    size = int(params.get("size", 1024))\n    image_size = tuple(params.get("image_size", (3, 32, 32)))\n    num_classes = int(params.get("num_classes", 10))\n\n    ds = datasets.FakeData(size=size, image_size=image_size, num_classes=num_classes, transform=transform)\n    n_val = n_test = size // 10  # 10 % each\n    n_train = size - n_val - n_test\n    train_set, val_set, test_set = random_split(ds, [n_train, n_val, n_test])\n\n    train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True, num_workers=num_workers)\n    val_loader = DataLoader(val_set, batch_size=batch_size, shuffle=False, num_workers=num_workers)\n    test_loader = DataLoader(test_set, batch_size=batch_size, shuffle=False, num_workers=num_workers)\n    return train_loader, val_loader, test_loader\n\n\n# ----------------------------------------------------------------------------------\n\n\ndef build_dataloaders(dataset_cfg: dict, batch_size: int, num_workers: int = 2):\n    """Factory for train/val/test DataLoaders.\n\n    Parameters\n    ----------\n    dataset_cfg : dict\n        Must have field "name" specifying which dataset to load and optional\n        "params" carrying dataset-specific hyper-parameters.\n    """\n    name = dataset_cfg["name"]\n    params = dataset_cfg.get("params", {})\n\n    if name == "FakeData":\n        return _build_fakedata(params, batch_size, num_workers)\n\n    # -------------------------------------------------------------------------\n    # PLACEHOLDER: Will be replaced with specific dataset loading logic\n    # Example:\n    # elif name == "CIFAR10":\n    #     return _build_cifar10(params, batch_size, num_workers)\n    # -------------------------------------------------------------------------\n\n    raise NotImplementedError(f"Dataset \'{name}\' not implemented ‑ placeholder needs replacement.")\n', 'model_py': '"""src/model.py\nModel definitions & factory.\nIncludes a lightweight SimpleCNN for image inputs that works out of the box\nfor the smoke test yet can be replaced by experiment-specific architectures.\n"""\nfrom __future__ import annotations\n\nfrom typing import Dict\n\nimport torch.nn as nn\n\n\nclass SimpleCNN(nn.Module):\n    def __init__(self, num_classes: int = 10):\n        super().__init__()\n        self.features = nn.Sequential(\n            nn.Conv2d(3, 32, kernel_size=3, padding=1),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(2),\n            nn.Conv2d(32, 64, kernel_size=3, padding=1),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(2),\n        )\n        self.classifier = nn.Sequential(\n            nn.Flatten(),\n            nn.Linear(64 * 8 * 8, 256),\n            nn.ReLU(inplace=True),\n            nn.Linear(256, num_classes),\n        )\n\n    def forward(self, x):\n        x = self.features(x)\n        x = self.classifier(x)\n        return x\n\n\n# ----------------------------------------------------------------------------------\n\n\ndef build_model(model_cfg: Dict):\n    name = model_cfg["name"]\n    params = model_cfg.get("params", {})\n\n    if name == "SimpleCNN":\n        return SimpleCNN(**params)\n\n    # -------------------------------------------------------------------------\n    # PLACEHOLDER: Will be replaced with specific model architectures\n    # e.g. if name == "ResNet20": return ResNet20(**params)\n    # -------------------------------------------------------------------------\n\n    raise NotImplementedError(f"Model \'{name}\' not implemented ‑ placeholder needs replacement.")\n', 'main_py': '"""src/main.py\nCentral orchestration script.\nSupports --smoke-test and --full-experiment flags and ensures that stdout and\nstderr of each subprocess are captured into *separate* files **and** streamed\nlive to the console, fully satisfying the logging requirement.\n"""\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport os\nimport subprocess\nimport sys\nimport threading\nimport time\nfrom pathlib import Path\nfrom typing import Dict\n\nimport yaml\n\n# ----------------------------------------------------------------------------------\n# Real-time tee helper ----------------------------------------------------------------\n\n\ndef _stream_tee(src, targets):\n    for line in iter(src.readline, ""):\n        for t in targets:\n            t.write(line)\n            t.flush()\n    src.close()\n\n\n# ----------------------------------------------------------------------------------\n\n\ndef run_subprocess(cmd, run_dir: Path):\n    stdout_file = open(run_dir / "stdout.log", "w", buffering=1)\n    stderr_file = open(run_dir / "stderr.log", "w", buffering=1)\n\n    proc = subprocess.Popen(\n        cmd,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        text=True,\n        bufsize=1,\n    )\n\n    # Launch background threads that tee streams to both file and console\n    threads = [\n        threading.Thread(target=_stream_tee, args=(proc.stdout, [sys.stdout, stdout_file]), daemon=True),\n        threading.Thread(target=_stream_tee, args=(proc.stderr, [sys.stderr, stderr_file]), daemon=True),\n    ]\n    for t in threads:\n        t.start()\n\n    proc.wait()\n    for t in threads:\n        t.join()\n    stdout_file.close()\n    stderr_file.close()\n\n    if proc.returncode != 0:\n        raise RuntimeError(f"Subprocess {\' \'.join(cmd)} failed with code {proc.returncode}")\n\n\n# ----------------------------------------------------------------------------------\n\ndef orchestrate(config_path: Path, results_dir: Path):\n    with open(config_path, "r") as f:\n        cfg = yaml.safe_load(f)\n\n    variations: Dict = cfg["variations"]\n\n    for run_id, run_cfg in variations.items():\n        run_dir = results_dir / run_id\n        run_dir.mkdir(parents=True, exist_ok=True)\n\n        # Persist *individual* run config so the subprocess can load just that\n        single_cfg = {"variations": {run_id: run_cfg}}\n        cfg_file = run_dir / "config.yaml"\n        with open(cfg_file, "w") as f:\n            yaml.safe_dump(single_cfg, f)\n\n        cmd = [\n            sys.executable,\n            "-m",\n            "src.train",\n            "--run-id",\n            run_id,\n            "--config-file",\n            str(cfg_file),\n            "--run-dir",\n            str(run_dir),\n        ]\n\n        print(f"\\n===== Launching {run_id} =====")\n        run_subprocess(cmd, run_dir)\n\n    # After all runs launch evaluation\n    eval_cmd = [\n        sys.executable,\n        "-m",\n        "src.evaluate",\n        "--results-dir",\n        str(results_dir),\n    ]\n    print("\\n===== Running aggregate evaluation =====")\n    run_subprocess(eval_cmd, results_dir)\n\n\n# ----------------------------------------------------------------------------------\n\ndef parse_args():\n    p = argparse.ArgumentParser(description="OHGW Experiment Orchestrator")\n    group = p.add_mutually_exclusive_group(required=True)\n    group.add_argument("--smoke-test", action="store_true")\n    group.add_argument("--full-experiment", action="store_true")\n    p.add_argument("--results-dir", required=True, type=str, help="Directory to store outputs")\n    return p.parse_args()\n\n\nif __name__ == "__main__":\n    args = parse_args()\n    root = Path(os.getcwd())\n    results_dir = Path(args.results_dir).expanduser().absolute()\n    results_dir.mkdir(parents=True, exist_ok=True)\n\n    cfg_file = root / "config" / ("smoke_test.yaml" if args.smoke_test else "full_experiment.yaml")\n    orchestrate(cfg_file, results_dir)\n', 'pyproject_toml': '[project]\nname = "ohgw-experiments"\nversion = "0.1.0"\ndescription = "Common core foundation for OHGW experiments"\nreadme = "README.md"\nrequires-python = ">=3.10"\ndependencies = [\n    "torch>=2.0",\n    "torchvision>=0.15",\n    "pyyaml>=6.0",\n    "tqdm>=4.65",\n    "matplotlib>=3.7",\n    "seaborn>=0.12",\n    "pandas>=1.5",\n    "scipy>=1.10"\n]\n\n[tool.setuptools.packages.find]\nwhere = ["src"]\n', 'smoke_test_yaml': '# config/smoke_test.yaml\n# Lightweight smoke test with synthetic data ensuring the full pipeline works in <1 min.\nvariations:\n  smoke_baseline:\n    dataset:\n      name: FakeData\n      params: {size: 256, image_size: [3,32,32], num_classes: 10}\n    model:\n      name: SimpleCNN\n      params: {num_classes: 10}\n    training:\n      epochs: 2\n      batch_size: 32\n      learning_rate: 0.01\n      weight_decay: 0.0005\n      momentum: 0.9\n      num_workers: 0\n    ohgw:\n      enabled: false\n\n  smoke_ohgw:\n    dataset:\n      name: FakeData\n      params: {size: 256, image_size: [3,32,32], num_classes: 10}\n    model:\n      name: SimpleCNN\n      params: {num_classes: 10}\n    training:\n      epochs: 2\n      batch_size: 32\n      learning_rate: 0.01\n      weight_decay: 0.0005\n      momentum: 0.9\n      num_workers: 0\n    ohgw:\n      enabled: true\n      eta_h: 0.001\n', 'full_experiment_yaml': '# config/full_experiment.yaml\n# Template with placeholders.  The derive_specific step will inject concrete\n# datasets, models and search-space configurations here.\nvariations:\n  baseline:\n    dataset:\n      name: DATASET_PLACEHOLDER  # PLACEHOLDER: Will be replaced with real dataset name\n      params: SPECIFIC_CONFIG_PLACEHOLDER  # PLACEHOLDER\n    model:\n      name: MODEL_PLACEHOLDER  # PLACEHOLDER: Specific model (e.g. ResNet20)\n      params: SPECIFIC_CONFIG_PLACEHOLDER\n    training:\n      epochs: 100  # Full experiment epochs (to be adjusted)\n      batch_size: 128\n      learning_rate: 0.1\n      weight_decay: 0.0005\n      momentum: 0.9\n      num_workers: 8\n    ohgw:\n      enabled: false\n\n  proposed_ohgw:\n    dataset:\n      name: DATASET_PLACEHOLDER\n      params: SPECIFIC_CONFIG_PLACEHOLDER\n    model:\n      name: MODEL_PLACEHOLDER\n      params: SPECIFIC_CONFIG_PLACEHOLDER\n    training:\n      epochs: 100\n      batch_size: 128\n      learning_rate: 0.1\n      weight_decay: 0.0005\n      momentum: 0.9\n      num_workers: 8\n    ohgw:\n      enabled: true\n      eta_h: 0.001\n\n  ablation_multi_step:\n    dataset:\n      name: DATASET_PLACEHOLDER\n      params: SPECIFIC_CONFIG_PLACEHOLDER\n    model:\n      name: MODEL_PLACEHOLDER\n      params: SPECIFIC_CONFIG_PLACEHOLDER\n    training:\n      epochs: 100\n      batch_size: 128\n      learning_rate: 0.1\n      weight_decay: 0.0005\n      momentum: 0.9\n      num_workers: 8\n    ohgw:\n      enabled: true\n      eta_h: 0.001  # Will be stepped multiple times by specialised logic in derived experiments\n'}

# External Resources (Use these to replace placeholders)

**HuggingFace Models (Replace MODEL_PLACEHOLDER with these):**

- ID: timm/resnet200d.ra2_in1k

- Code: from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model('resnet200d.ra2_in1k', pretrained=True)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

top5_probabilities, top5_class_indices = torch.topk(output.softmax(dim=1) * 100, k=5)


from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnet200d.ra2_in1k',
    pretrained=True,
    features_only=True,
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

for o in output:
    # print shape of each feature map in output
    # e.g.:
    #  torch.Size([1, 64, 128, 128])
    #  torch.Size([1, 256, 64, 64])
    #  torch.Size([1, 512, 32, 32])
    #  torch.Size([1, 1024, 16, 16])
    #  torch.Size([1, 2048, 8, 8])

    print(o.shape)


from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnet200d.ra2_in1k',
    pretrained=True,
    num_classes=0,  # remove classifier nn.Linear
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor

# or equivalently (without needing to set num_classes=0)

output = model.forward_features(transforms(img).unsqueeze(0))
# output is unpooled, a (1, 2048, 8, 8) shaped tensor

output = model.forward_head(output, pre_logits=True)
# output is a (1, num_features) shaped tensor


- ID: timm/resnetrs200.tf_in1k

- Code: from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model('resnetrs200.tf_in1k', pretrained=True)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

top5_probabilities, top5_class_indices = torch.topk(output.softmax(dim=1) * 100, k=5)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnetrs200.tf_in1k',
    pretrained=True,
    features_only=True,
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

for o in output:
    # print shape of each feature map in output
    # e.g.:
    #  torch.Size([1, 64, 128, 128])
    #  torch.Size([1, 256, 64, 64])
    #  torch.Size([1, 512, 32, 32])
    #  torch.Size([1, 1024, 16, 16])
    #  torch.Size([1, 2048, 8, 8])

    print(o.shape)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnetrs200.tf_in1k',
    pretrained=True,
    num_classes=0,  # remove classifier nn.Linear
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor

# or equivalently (without needing to set num_classes=0)

output = model.forward_features(transforms(img).unsqueeze(0))
# output is unpooled, a (1, 2048, 8, 8) shaped tensor

output = model.forward_head(output, pre_logits=True)
# output is a (1, num_features) shaped tensor


- ID: BVRA/resnet18.in1k_ft_df20_299

- Code: import timm
import torch
import torchvision.transforms as T
from PIL import Image
from urllib.request import urlopen
model = timm.create_model("hf-hub:BVRA/resnet18.in1k_ft_df20_299", pretrained=True)
model = model.eval()
train_transforms = T.Compose([T.Resize((299, 299)), 
                              T.ToTensor(), 
                              T.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])]) 
img = Image.open(PATH_TO_YOUR_IMAGE)
output = model(train_transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor


- ID: BVRA/resnet50.in1k_ft_df20_299

- Code: import timm
import torch
import torchvision.transforms as T
from PIL import Image
from urllib.request import urlopen
model = timm.create_model("hf-hub:BVRA/resnet50.in1k_ft_df20_299", pretrained=True)
model = model.eval()
train_transforms = T.Compose([T.Resize((299, 299)), 
                              T.ToTensor(), 
                              T.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])]) 
img = Image.open(PATH_TO_YOUR_IMAGE)
output = model(train_transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor
# output is a (1, num_features) shaped tensor



- ID: timm/resnet50.a1_in1k

- Code: from urllib.request import urlopen
from PIL import Image
import timm
import torch

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model('resnet50.a1_in1k', pretrained=True)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

top5_probabilities, top5_class_indices = torch.topk(output.softmax(dim=1) * 100, k=5)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnet50.a1_in1k',
    pretrained=True,
    features_only=True,
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

for o in output:
    print(o.shape)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnet50.a1_in1k',
    pretrained=True,
    num_classes=0,  # remove classifier nn.Linear
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor

# or equivalently (without needing to set num_classes=0)

output = model.forward_features(transforms(img).unsqueeze(0))
# output is unpooled, a (1, 2048, 7, 7) shaped tensor

output = model.forward_head(output, pre_logits=True)
# output is a (1, num_features) shaped tensor


- ID: timm/wide_resnet50_2.racm_in1k

- Code: from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model('wide_resnet50_2.racm_in1k', pretrained=True)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

top5_probabilities, top5_class_indices = torch.topk(output.softmax(dim=1) * 100, k=5)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'wide_resnet50_2.racm_in1k',
    pretrained=True,
    features_only=True,
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

for o in output:
    # print shape of each feature map in output
    # e.g.:
    #  torch.Size([1, 64, 112, 112])
    #  torch.Size([1, 256, 56, 56])
    #  torch.Size([1, 512, 28, 28])
    #  torch.Size([1, 1024, 14, 14])
    #  torch.Size([1, 2048, 7, 7])

    print(o.shape)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'wide_resnet50_2.racm_in1k',
    pretrained=True,
    num_classes=0,  # remove classifier nn.Linear
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor

# or equivalently (without needing to set num_classes=0)

output = model.forward_features(transforms(img).unsqueeze(0))
# output is unpooled, a (1, 2048, 7, 7) shaped tensor

output = model.forward_head(output, pre_logits=True)
# output is a (1, num_features) shaped tensor


- ID: timm/resnet50.ram_in1k

- Code: from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model('resnet50.ram_in1k', pretrained=True)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

top5_probabilities, top5_class_indices = torch.topk(output.softmax(dim=1) * 100, k=5)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnet50.ram_in1k',
    pretrained=True,
    features_only=True,
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

for o in output:
    # print shape of each feature map in output
    # e.g.:
    #  torch.Size([1, 64, 112, 112])
    #  torch.Size([1, 256, 56, 56])
    #  torch.Size([1, 512, 28, 28])
    #  torch.Size([1, 1024, 14, 14])
    #  torch.Size([1, 2048, 7, 7])

    print(o.shape)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnet50.ram_in1k',
    pretrained=True,
    num_classes=0,  # remove classifier nn.Linear
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor

# or equivalently (without needing to set num_classes=0)

output = model.forward_features(transforms(img).unsqueeze(0))
# output is unpooled, a (1, 2048, 7, 7) shaped tensor

output = model.forward_head(output, pre_logits=True)
# output is a (1, num_features) shaped tensor


- ID: microsoft/resnet-50

- Code: from transformers import AutoImageProcessor, ResNetForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

processor = AutoImageProcessor.from_pretrained("microsoft/resnet-50")
model = ResNetForImageClassification.from_pretrained("microsoft/resnet-50")

inputs = processor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label])


- ID: timm/resnetv2_50x1_bit.goog_in21k

- Code: from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model('resnetv2_50x1_bit.goog_in21k', pretrained=True)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

top5_probabilities, top5_class_indices = torch.topk(output.softmax(dim=1) * 100, k=5)



from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnetv2_50x1_bit.goog_in21k',
    pretrained=True,
    features_only=True,
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

for o in output:
    # print shape of each feature map in output
    # e.g.:
    #  torch.Size([1, 64, 112, 112])
    #  torch.Size([1, 256, 56, 56])
    #  torch.Size([1, 512, 28, 28])
    #  torch.Size([1, 1024, 14, 14])
    #  torch.Size([1, 2048, 7, 7])

    print(o.shape)



from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnetv2_50x1_bit.goog_in21k',
    pretrained=True,
    num_classes=0,  # remove classifier nn.Linear
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor

# or equivalently (without needing to set num_classes=0)

output = model.forward_features(transforms(img).unsqueeze(0))
# output is unpooled, a (1, 2048, 7, 7) shaped tensor

output = model.forward_head(output, pre_logits=True)
# output is a (1, num_features) shaped tensor


- ID: stanford-crfm/alias-gpt2-small-x21

- Code: from transformers import AutoTokenizer, AutoModelForCausalLM

tokenizer = AutoTokenizer.from_pretrained("stanford-crfm/alias-gpt2-small-x21")

model = AutoModelForCausalLM.from_pretrained("stanford-crfm/alias-gpt2-small-x21")



**HuggingFace Datasets (Replace DATASET_PLACEHOLDER with these):**

- ID: uoft-cs/cifar10


- ID: uoft-cs/cifar100


- ID: tanganke/cifar100


- ID: tanganke/cifar10


- ID: uoft-cs/cifar100


- ID: tanganke/cifar100


- ID: yehzw/wikitext-103


- ID: vish26/wikitext-103-v1-cleaned





# Validation Feedback


**Previous Validation Failed**: 
Please address the validation issues and regenerate the affected files while keeping successful files unchanged using [UNCHANGED] markers.



Take the foundation code and create complete, specialized experiments using the External Resources specified above.
Output:
{
    "train_py": "\"\"\"src/train.py\nRuns a single experiment variation (one entry of the YAML config).\nSaves metrics, figures and model weights into the provided run directory\nand prints a JSON summary to stdout (required by the evaluation harness).\n\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport logging\nimport time\nfrom pathlib import Path\nfrom typing import Dict, List\n\nimport matplotlib\nimport torch\nimport torch.nn.functional as F\nimport yaml\nfrom matplotlib import pyplot as plt\nfrom torch import nn, optim\nfrom torch.cuda.amp import GradScaler, autocast\nfrom tqdm.auto import tqdm\n\nimport src.model as model_zoo\nimport src.preprocess as preprocess\n\nmatplotlib.use(\"Agg\")  # do not require X11\n\n\n# ---------------- Utility helpers -------------------------------------------------\n\ndef set_random_seed(seed: int) -> None:\n    import random\n    import numpy as np\n\n    torch.manual_seed(seed)\n    random.seed(seed)\n    np.random.seed(seed)\n    if torch.cuda.is_available():\n        torch.cuda.manual_seed_all(seed)\n\n\ndef accuracy(pred: torch.Tensor, target: torch.Tensor) -> float:\n    \"\"\"Top-1 accuracy.\"\"\"\n    with torch.no_grad():\n        pred_labels = pred.argmax(dim=1)\n        return (pred_labels == target).float().mean().item() * 100.0\n\n\n# ---------------- Warm-start helpers ---------------------------------------------\n\ndef _one_shot_hypergradient_step(\n    model: nn.Module,\n    optimizer_cfg: Dict,\n    batch: List[torch.Tensor],\n    eta_h: float,\n    device: torch.device,\n    label_smoothing: float = 0.0,\n) -> Dict:\n    \"\"\"Single stochastic hyper-gradient step on *weight_decay*.\n\n    Only *weight_decay* is treated as a continuous hyper-parameter here in\n    order to keep the implementation compact yet representative.  The same\n    pattern could be applied to any additional hyper-parameter by defining it\n    as a differentiable tensor, including it in the loss function and calling\n    ``torch.autograd.grad``.\n    \"\"\"\n\n    # make differentiable tensor for weight decay\n    wd_val: float = float(optimizer_cfg.get(\"weight_decay\", 0.0))\n    wd = torch.tensor(wd_val, dtype=torch.float32, device=device, requires_grad=True)\n\n    inputs, targets = batch\n    inputs, targets = inputs.to(device), targets.to(device)\n\n    # forward + L2 regularisation that depends on wd\n    logits = model(inputs)\n    ce_loss = F.cross_entropy(logits, targets, label_smoothing=label_smoothing)\n    l2_term = 0.5 * wd * sum((p ** 2).sum() for p in model.parameters())\n    loss = ce_loss + l2_term\n\n    # ∂L/∂wd   (zero-order approximation – ignores implicit term)\n    (grad_wd,) = torch.autograd.grad(loss, wd, retain_graph=False, create_graph=False)\n\n    wd_new = (wd - eta_h * grad_wd).clamp(min=0.0).item()\n    new_optimizer_cfg = dict(optimizer_cfg)\n    new_optimizer_cfg[\"weight_decay\"] = wd_new\n    return new_optimizer_cfg\n\n\ndef _random_warm_start(optimizer_cfg: Dict, sigma: float = 0.01) -> Dict:\n    \"\"\"Applies Gaussian perturbation to weight_decay (control experiment).\"\"\"\n    import random\n\n    wd_val: float = float(optimizer_cfg.get(\"weight_decay\", 0.0))\n    wd_new = max(0.0, wd_val + random.gauss(0.0, sigma))\n    new_cfg = dict(optimizer_cfg)\n    new_cfg[\"weight_decay\"] = wd_new\n    return new_cfg\n\n\n# ---------------- Training --------------------------------------------------------\n\ndef train_one_epoch(\n    model: nn.Module,\n    loader: torch.utils.data.DataLoader,\n    optimizer: optim.Optimizer,\n    device: torch.device,\n    scaler: GradScaler | None,\n    label_smoothing: float = 0.0,\n):\n    model.train()\n    running_loss = 0.0\n    running_acc = 0.0\n    total = 0\n    for x, y in loader:\n        x, y = x.to(device), y.to(device)\n        optimizer.zero_grad(set_to_none=True)\n        with autocast(enabled=scaler is not None):\n            logits = model(x)\n            loss = F.cross_entropy(logits, y, label_smoothing=label_smoothing)\n        if scaler is None:\n            loss.backward()\n            optimizer.step()\n        else:\n            scaler.scale(loss).backward()\n            scaler.step(optimizer)\n            scaler.update()\n\n        batch_size = y.size(0)\n        running_loss += loss.item() * batch_size\n        running_acc += accuracy(logits, y) * batch_size\n        total += batch_size\n    return running_loss / total, running_acc / total\n\n\ndef evaluate(\n    model: nn.Module,\n    loader: torch.utils.data.DataLoader,\n    device: torch.device,\n    label_smoothing: float = 0.0,\n):\n    model.eval()\n    loss_sum = 0.0\n    acc_sum = 0.0\n    total = 0\n    with torch.no_grad():\n        for x, y in loader:\n            x, y = x.to(device), y.to(device)\n            logits = model(x)\n            loss = F.cross_entropy(logits, y, label_smoothing=label_smoothing)\n            batch = y.size(0)\n            loss_sum += loss.item() * batch\n            acc_sum += accuracy(logits, y) * batch\n            total += batch\n    return loss_sum / total, acc_sum / total\n\n\n# ---------------- Main entry ------------------------------------------------------\n\ndef run_training(run_dir: Path, cfg: Dict, run_id: str):\n    run_dir.mkdir(parents=True, exist_ok=True)\n    (run_dir / \"figures\").mkdir(exist_ok=True, parents=True)\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n    # Set seeds for reproducibility\n    seed = int(cfg.get(\"seed\", 42))\n    set_random_seed(seed)\n\n    # ---------------- Dataset -----------------------------------------------------\n    d_cfg = cfg[\"dataset\"]\n    t_cfg = cfg[\"training\"]\n    train_loader, val_loader, test_loader = preprocess.build_dataloaders(\n        dataset_cfg=d_cfg,\n        batch_size=int(t_cfg[\"batch_size\"]),\n        num_workers=int(t_cfg.get(\"num_workers\", 2)),\n    )\n\n    # ---------------- Model -------------------------------------------------------\n    m_cfg = cfg[\"model\"]\n    model = model_zoo.build_model(m_cfg).to(device)\n\n    # ---------------- Optimiser base config --------------------------------------\n    opt_cfg = {\n        \"lr\": float(t_cfg[\"learning_rate\"]),\n        \"momentum\": float(t_cfg.get(\"momentum\", 0.0)),\n        \"weight_decay\": float(t_cfg.get(\"weight_decay\", 0.0)),\n    }\n\n    label_smoothing = float(t_cfg.get(\"label_smoothing\", 0.0))\n\n    # ---------------- Optional warm-start ---------------------------------------\n    ohgw_cfg = cfg.get(\"ohgw\", {})\n    if ohgw_cfg.get(\"enabled\", False):\n        mode = ohgw_cfg.get(\"mode\", \"hyper\")\n        steps = int(ohgw_cfg.get(\"steps\", 1))\n        eta_h = float(ohgw_cfg.get(\"eta_h\", 1e-3))\n        sigma = float(ohgw_cfg.get(\"sigma\", 0.01))\n        batch_iter = iter(train_loader)\n        mini_batch = next(batch_iter)\n\n        if mode == \"random\":\n            opt_cfg = _random_warm_start(opt_cfg, sigma)\n        elif mode == \"hyper\":\n            for _ in range(steps):\n                opt_cfg = _one_shot_hypergradient_step(\n                    model,\n                    optimizer_cfg=opt_cfg,\n                    batch=mini_batch,\n                    eta_h=eta_h,\n                    device=device,\n                    label_smoothing=label_smoothing,\n                )\n        else:\n            raise ValueError(f\"Unknown OHGW mode '{mode}'\")\n\n    # ---------------- Optimiser & scheduler --------------------------------------\n    optimizer = optim.SGD(\n        model.parameters(),\n        lr=opt_cfg[\"lr\"],\n        momentum=opt_cfg[\"momentum\"],\n        weight_decay=opt_cfg[\"weight_decay\"],\n    )\n\n    scheduler = None\n    if t_cfg.get(\"scheduler\", \"none\").lower() == \"cosine\":\n        scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=int(t_cfg[\"epochs\"]))\n\n    use_amp = device.type == \"cuda\"\n    scaler = GradScaler(enabled=use_amp)\n\n    # ---------------- Training loop ---------------------------------------------\n    n_epochs = int(t_cfg[\"epochs\"])\n    history: List[Dict] = []\n    best_val_acc = -1.0\n    best_state_dict = None\n    start_time = time.time()\n\n    for epoch in range(1, n_epochs + 1):\n        train_loss, train_acc = train_one_epoch(\n            model, train_loader, optimizer, device, scaler, label_smoothing\n        )\n        val_loss, val_acc = evaluate(model, val_loader, device, label_smoothing)\n\n        history.append(\n            {\n                \"epoch\": epoch,\n                \"train_loss\": train_loss,\n                \"train_acc\": train_acc,\n                \"val_loss\": val_loss,\n                \"val_acc\": val_acc,\n                \"lr\": optimizer.param_groups[0][\"lr\"],\n            }\n        )\n\n        if val_acc > best_val_acc:\n            best_val_acc = val_acc\n            best_state_dict = {k: v.cpu() for k, v in model.state_dict().items()}\n\n        logging.info(\n            f\"Epoch {epoch:03d}/{n_epochs}: train_loss={train_loss:.4f} train_acc={train_acc:.2f} \"\n            f\"val_loss={val_loss:.4f} val_acc={val_acc:.2f} wd={opt_cfg['weight_decay']:.5f}\"\n        )\n\n        if scheduler is not None:\n            scheduler.step()\n\n    total_seconds = time.time() - start_time\n\n    # ---------------- Test evaluation ------------------------------------------\n    model.load_state_dict(best_state_dict)\n    test_loss, test_acc = evaluate(model, test_loader, device, label_smoothing)\n\n    # ---------------- Persist artefacts ----------------------------------------\n    torch.save(best_state_dict, run_dir / \"best_model.pt\")\n    with open(run_dir / \"history.json\", \"w\") as f:\n        json.dump(history, f, indent=2)\n\n    # Figures: loss + accuracy curves -------------------------------------------\n    epochs = [h[\"epoch\"] for h in history]\n    train_losses = [h[\"train_loss\"] for h in history]\n    val_losses = [h[\"val_loss\"] for h in history]\n    plt.figure()\n    plt.plot(epochs, train_losses, label=\"Train\")\n    plt.plot(epochs, val_losses, label=\"Validation\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Cross-Entropy Loss\")\n    plt.title(f\"Training Loss – {run_id}\")\n    plt.legend()\n    fname_loss = run_dir / \"figures\" / f\"training_loss_{run_id}.pdf\"\n    plt.savefig(fname_loss, bbox_inches=\"tight\")\n    plt.close()\n\n    train_accs = [h[\"train_acc\"] for h in history]\n    val_accs = [h[\"val_acc\"] for h in history]\n    plt.figure()\n    plt.plot(epochs, train_accs, label=\"Train\")\n    plt.plot(epochs, val_accs, label=\"Validation\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Accuracy (%)\")\n    plt.title(f\"Accuracy – {run_id}\")\n    plt.annotate(\n        f\"Best={best_val_acc:.2f}\", (epochs[-1], val_accs[-1]),\n        textcoords=\"offset points\", xytext=(0, 10), ha=\"right\"\n    )\n    plt.legend()\n    fname_acc = run_dir / \"figures\" / f\"accuracy_{run_id}.pdf\"\n    plt.savefig(fname_acc, bbox_inches=\"tight\")\n    plt.close()\n\n    # ---------------- Final results JSON ---------------------------------------\n    results = {\n        \"run_id\": run_id,\n        \"seed\": seed,\n        \"dataset\": d_cfg[\"name\"],\n        \"model\": m_cfg[\"name\"],\n        \"ohgw_mode\": ohgw_cfg.get(\"mode\", \"none\") if ohgw_cfg.get(\"enabled\", False) else \"none\",\n        \"eta_h\": ohgw_cfg.get(\"eta_h\", None),\n        \"sigma\": ohgw_cfg.get(\"sigma\", None),\n        \"training_seconds\": total_seconds,\n        \"best_val_accuracy\": best_val_acc,\n        \"test_accuracy\": test_acc,\n        \"test_loss\": test_loss,\n        \"history\": history,\n        \"figures\": [str(fname_loss.name), str(fname_acc.name)],\n    }\n    with open(run_dir / \"results.json\", \"w\") as f:\n        json.dump(results, f, indent=2)\n\n    # ---------------- Mandatory stdout prints ----------------------------------\n    # 1) Human-readable description\n    print(\n        f\"\\n==== Experiment Description ({run_id}) ====\"\n        f\"\\nDataset: {d_cfg['name']}  Model: {m_cfg['name']}\"\n        f\"\\nOHGW mode: {results['ohgw_mode']}  (eta_h={results['eta_h']}, sigma={results['sigma']})\"\n        f\"\\nEpochs: {n_epochs}, Batch Size: {t_cfg['batch_size']}, LR: {t_cfg['learning_rate']}\\n\"\n    )\n    # 2) Structured numerical data line (JSON)\n    print(json.dumps(results))\n\n\n# ---------------------------------------------------------------------------------\n\ndef parse_args():\n    p = argparse.ArgumentParser(description=\"Run one experiment variation\")\n    p.add_argument(\"--run-id\", required=True, type=str)\n    p.add_argument(\"--config-file\", required=True, type=str)\n    p.add_argument(\"--run-dir\", required=True, type=str)\n    return p.parse_args()\n\n\nif __name__ == \"__main__\":\n    args = parse_args()\n\n    # basic logging to stderr (main.py captures streams)\n    logging.basicConfig(\n        level=logging.INFO,\n        format=\"%(asctime)s | %(levelname)s | %(message)s\",\n        datefmt=\"%H:%M:%S\",\n    )\n\n    with open(args.config_file, \"r\") as f:\n        full_cfg = yaml.safe_load(f)\n\n    run_cfg = full_cfg[\"variations\"][args.run_id]\n\n    run_training(Path(args.run_dir), run_cfg, args.run_id)\n",
    "evaluate_py": "\"\"\"src/evaluate.py\nAggregates result files from all experiment variations and produces\ncomparison figures + JSON summary printed to stdout.\n\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport logging\nimport os\nfrom pathlib import Path\nfrom typing import Dict, List\n\nimport matplotlib\nimport pandas as pd\nimport yaml\nfrom matplotlib import pyplot as plt\nfrom scipy.stats import wilcoxon  # Used if available in env\n\nmatplotlib.use(\"Agg\")\n\n# ----------------------------------------------------------------------------------\n\n\ndef load_all_results(results_dir: Path) -> List[Dict]:\n    data = []\n    for run_dir in results_dir.iterdir():\n        if (run_dir / \"results.json\").exists():\n            with open(run_dir / \"results.json\") as f:\n                data.append(json.load(f))\n    return data\n\n\n# ----------------------------------------------------------------------------------\n\ndef create_barplot(df: pd.DataFrame, metric: str, ylabel: str, fname: Path):\n    plt.figure()\n    ax = plt.gca()\n    bars = ax.bar(df[\"run_id\"], df[metric], color=\"skyblue\")\n    ax.set_ylabel(ylabel)\n    ax.set_xlabel(\"Run Variation\")\n    ax.set_title(f\"{ylabel} Comparison\")\n    ax.set_xticklabels(df[\"run_id\"], rotation=45, ha=\"right\")\n    for bar in bars:\n        height = bar.get_height()\n        ax.annotate(f\"{height:.2f}\", xy=(bar.get_x() + bar.get_width() / 2, height),\n                    xytext=(0, 3), textcoords=\"offset points\", ha='center', va='bottom')\n    plt.tight_layout()\n    plt.savefig(fname, bbox_inches=\"tight\")\n    plt.close()\n\n\n# ----------------------------------------------------------------------------------\n\ndef aggregate_and_visualise(results_dir: Path):\n    records = load_all_results(results_dir)\n    if not records:\n        raise RuntimeError(f\"No results.json found in {results_dir}.*\")\n\n    df = pd.DataFrame(records)\n\n    # Basic statistics -----------------------------------------------------------\n    summary = {\n        \"runs\": df[\"run_id\"].tolist(),\n        \"best_val_accuracy\": df[\"best_val_accuracy\"].tolist(),\n        \"test_accuracy\": df[\"test_accuracy\"].tolist(),\n        \"training_seconds\": df[\"training_seconds\"].tolist(),\n    }\n\n    # Statistical test between first two runs (if >1)\n    p_value = None\n    if len(df) >= 2:\n        try:\n            stat, p_value = wilcoxon(df.iloc[:, 1], df.iloc[:, 2])  # type: ignore\n        except Exception:\n            pass\n    summary[\"wilcoxon_p_value\"] = p_value\n\n    # Figures --------------------------------------------------------------------\n    create_barplot(\n        df, metric=\"test_accuracy\", ylabel=\"Test Accuracy (%)\",\n        fname=results_dir / \"final_accuracy_comparison.pdf\",\n    )\n    create_barplot(\n        df, metric=\"training_seconds\", ylabel=\"Training Time (s)\",\n        fname=results_dir / \"training_time_comparison.pdf\",\n    )\n\n    # stdout prints --------------------------------------------------------------\n    print(\"\\n==== Evaluation Summary ====\")\n    print(json.dumps(summary))\n\n\n# ----------------------------------------------------------------------------------\n\ndef parse_args():\n    p = argparse.ArgumentParser()\n    p.add_argument(\"--results-dir\", required=True, type=str)\n    return p.parse_args()\n\n\nif __name__ == \"__main__\":\n    logging.basicConfig(level=logging.INFO,\n                        format=\"%(asctime)s | %(levelname)s | %(message)s\",\n                        datefmt=\"%H:%M:%S\")\n    args = parse_args()\n    aggregate_and_visualise(Path(args.results_dir))\n",
    "preprocess_py": "\"\"\"src/preprocess.py\nDataset loading & preprocessing pipeline – now includes concrete CIFAR-10/100\nhandling with RandAugment, Cutout and per-image normalisation.  A FakeData\nfallback remains available for smoke tests when external downloads are not\npossible.\n\"\"\"\nfrom __future__ import annotations\n\nimport random\nfrom typing import Tuple\n\nimport torch\nimport torchvision.transforms as T\nfrom torch.utils.data import DataLoader, random_split\nfrom torchvision import datasets\n\n\n# ----------------------------------------------------------------------------------\n\nCIFAR10_MEAN = (0.4914, 0.4822, 0.4465)\nCIFAR10_STD = (0.2023, 0.1994, 0.2010)\n\n\ndef _cutout(img: torch.Tensor, size: int = 16) -> torch.Tensor:  # img is Tensor C×H×W in [0,1]\n    _, h, w = img.shape\n    mask = torch.ones_like(img)\n    y = random.randint(0, h - 1)\n    x = random.randint(0, w - 1)\n    y1 = max(0, y - size // 2)\n    y2 = min(h, y + size // 2)\n    x1 = max(0, x - size // 2)\n    x2 = min(w, x + size // 2)\n    mask[:, y1:y2, x1:x2] = 0\n    return img * mask\n\n\nclass CutoutTransform:\n    \"\"\"Callable transform wrapper for Cutout.\"\"\"\n\n    def __init__(self, size: int = 16):\n        self.size = size\n\n    def __call__(self, img):\n        return _cutout(img, self.size)\n\n\n# ----------------------------------------------------------------------------------\n\n\ndef _build_cifar(dataset_name: str, params: dict, batch_size: int, num_workers: int):\n    assert dataset_name in {\"CIFAR10\", \"CIFAR100\"}\n    val_split = int(params.get(\"val_split\", 5000))\n    augment_magnitude = int(params.get(\"augment_magnitude\", 0))\n    cutout_size = int(params.get(\"cutout\", 16))\n\n    base_transform = [T.ToTensor(), T.Normalize(CIFAR10_MEAN, CIFAR10_STD)]\n\n    train_aug: list = [\n        T.RandomCrop(32, padding=4),\n        T.RandomHorizontalFlip(),\n    ]\n    # RandAugment only if magnitude > 0\n    if augment_magnitude > 0:\n        train_aug.append(T.RandAugment(num_ops=2, magnitude=augment_magnitude))\n\n    train_transform = T.Compose(train_aug + base_transform + [CutoutTransform(cutout_size)])\n    test_transform = T.Compose(base_transform)\n\n    ds_cls = datasets.CIFAR10 if dataset_name == \"CIFAR10\" else datasets.CIFAR100\n\n    train_full = ds_cls(root=\"~/.torchdata\", train=True, download=True, transform=train_transform)\n    test_set = ds_cls(root=\"~/.torchdata\", train=False, download=True, transform=test_transform)\n\n    if val_split > 0:\n        train_size = len(train_full) - val_split\n        val_size = val_split\n        train_set, val_set = random_split(train_full, [train_size, val_size])\n    else:\n        train_set = train_full\n        val_set = test_set  # degenerate but keeps code simple\n\n    train_loader = DataLoader(\n        train_set, batch_size=batch_size, shuffle=True, num_workers=num_workers, pin_memory=True\n    )\n    val_loader = DataLoader(\n        val_set, batch_size=batch_size, shuffle=False, num_workers=num_workers, pin_memory=True\n    )\n    test_loader = DataLoader(\n        test_set, batch_size=batch_size, shuffle=False, num_workers=num_workers, pin_memory=True\n    )\n    return train_loader, val_loader, test_loader\n\n\n# ----------------------------------------------------------------------------------\n\n\ndef _build_fakedata(params: dict, batch_size: int, num_workers: int):\n    transform = T.Compose([T.ToTensor()])\n    size = int(params.get(\"size\", 1024))\n    image_size = tuple(params.get(\"image_size\", (3, 32, 32)))\n    num_classes = int(params.get(\"num_classes\", 10))\n\n    ds = datasets.FakeData(size=size, image_size=image_size, num_classes=num_classes, transform=transform)\n    n_val = n_test = size // 10  # 10 % each\n    n_train = size - n_val - n_test\n    train_set, val_set, test_set = random_split(ds, [n_train, n_val, n_test])\n\n    train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True, num_workers=num_workers)\n    val_loader = DataLoader(val_set, batch_size=batch_size, shuffle=False, num_workers=num_workers)\n    test_loader = DataLoader(test_set, batch_size=batch_size, shuffle=False, num_workers=num_workers)\n    return train_loader, val_loader, test_loader\n\n\n# ----------------------------------------------------------------------------------\n\n\ndef build_dataloaders(dataset_cfg: dict, batch_size: int, num_workers: int = 2):\n    \"\"\"Factory that returns (train, val, test) loaders for supported datasets.\"\"\"\n    name = dataset_cfg[\"name\"]\n    params = dataset_cfg.get(\"params\", {})\n\n    if name == \"FakeData\":\n        return _build_fakedata(params, batch_size, num_workers)\n    elif name in {\"CIFAR10\", \"CIFAR100\"}:\n        return _build_cifar(name, params, batch_size, num_workers)\n\n    raise NotImplementedError(f\"Dataset '{name}' is not supported.\")\n",
    "model_py": "\"\"\"src/model.py\nResNet-20 and ResNet-50 implementations for CIFAR-style 32×32 images, plus a\nSimpleCNN fallback used by smoke tests.  The ResNet backbones are adapted from\n`torchvision.models.resnet` with the first convolution changed to 3×3 stride-1\nand the max-pooling layer removed.\n\"\"\"\nfrom __future__ import annotations\n\nfrom typing import Dict\n\nimport torch.nn as nn\nfrom torchvision.models.resnet import BasicBlock, Bottleneck, ResNet\n\n\n# ----------------------------------------------------------------------------------\n# CIFAR-specific ResNet helpers ----------------------------------------------------\n\n\ndef _resnet_cifar(block, layers, num_classes: int):\n    model = ResNet(block, layers, num_classes=num_classes)\n    # adjust first conv + remove max-pool to suit 32×32 images\n    model.conv1 = nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1, bias=False)\n    model.maxpool = nn.Identity()\n    return model\n\n\ndef ResNet20(num_classes: int = 10):\n    \"\"\"ResNet-20 as used in the original CIFAR paper (3×3 blocks).\"\"\"\n    return _resnet_cifar(BasicBlock, [3, 3, 3], num_classes=num_classes)\n\n\ndef ResNet50(num_classes: int = 10):\n    \"\"\"Standard 50-layer variant adapted for CIFAR resolution.\"\"\"\n    return _resnet_cifar(Bottleneck, [3, 4, 6, 3], num_classes=num_classes)\n\n\n# ----------------------------------------------------------------------------------\n# SimpleCNN for smoke tests --------------------------------------------------------\n\n\nclass SimpleCNN(nn.Module):\n    def __init__(self, num_classes: int = 10):\n        super().__init__()\n        self.features = nn.Sequential(\n            nn.Conv2d(3, 32, kernel_size=3, padding=1),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(2),\n            nn.Conv2d(32, 64, kernel_size=3, padding=1),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(2),\n        )\n        self.classifier = nn.Sequential(\n            nn.Flatten(),\n            nn.Linear(64 * 8 * 8, 256),\n            nn.ReLU(inplace=True),\n            nn.Linear(256, num_classes),\n        )\n\n    def forward(self, x):  # type: ignore[override]\n        x = self.features(x)\n        x = self.classifier(x)\n        return x\n\n\n# ----------------------------------------------------------------------------------\n\n\ndef build_model(model_cfg: Dict):\n    name = model_cfg[\"name\"]\n    params = model_cfg.get(\"params\", {})\n\n    if name == \"SimpleCNN\":\n        return SimpleCNN(**params)\n    elif name == \"ResNet20\":\n        return ResNet20(**params)\n    elif name == \"ResNet50\":\n        return ResNet50(**params)\n\n    raise NotImplementedError(f\"Model '{name}' is not implemented.\")\n",
    "main_py": "\"\"\"src/main.py\nCentral orchestration script.\nSupports --smoke-test and --full-experiment flags and ensures that stdout and\nstderr of each subprocess are captured into *separate* files **and** streamed\nlive to the console, fully satisfying the logging requirement.\n\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport os\nimport subprocess\nimport sys\nimport threading\nimport time\nfrom pathlib import Path\nfrom typing import Dict\n\nimport yaml\n\n# ----------------------------------------------------------------------------------\n# Real-time tee helper ----------------------------------------------------------------\n\n\ndef _stream_tee(src, targets):\n    for line in iter(src.readline, \"\"):\n        for t in targets:\n            t.write(line)\n            t.flush()\n    src.close()\n\n\n# ----------------------------------------------------------------------------------\n\n\ndef run_subprocess(cmd, run_dir: Path):\n    stdout_file = open(run_dir / \"stdout.log\", \"w\", buffering=1)\n    stderr_file = open(run_dir / \"stderr.log\", \"w\", buffering=1)\n\n    proc = subprocess.Popen(\n        cmd,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        text=True,\n        bufsize=1,\n    )\n\n    # Launch background threads that tee streams to both file and console\n    threads = [\n        threading.Thread(target=_stream_tee, args=(proc.stdout, [sys.stdout, stdout_file]), daemon=True),\n        threading.Thread(target=_stream_tee, args=(proc.stderr, [sys.stderr, stderr_file]), daemon=True),\n    ]\n    for t in threads:\n        t.start()\n\n    proc.wait()\n    for t in threads:\n        t.join()\n    stdout_file.close()\n    stderr_file.close()\n\n    if proc.returncode != 0:\n        raise RuntimeError(f\"Subprocess {' '.join(cmd)} failed with code {proc.returncode}\")\n\n\n# ----------------------------------------------------------------------------------\n\ndef orchestrate(config_path: Path, results_dir: Path):\n    with open(config_path, \"r\") as f:\n        cfg = yaml.safe_load(f)\n\n    variations: Dict = cfg[\"variations\"]\n\n    for run_id, run_cfg in variations.items():\n        run_dir = results_dir / run_id\n        run_dir.mkdir(parents=True, exist_ok=True)\n\n        # Persist *individual* run config so the subprocess can load just that\n        single_cfg = {\"variations\": {run_id: run_cfg}}\n        cfg_file = run_dir / \"config.yaml\"\n        with open(cfg_file, \"w\") as f:\n            yaml.safe_dump(single_cfg, f)\n\n        cmd = [\n            sys.executable,\n            \"-m\",\n            \"src.train\",\n            \"--run-id\",\n            run_id,\n            \"--config-file\",\n            str(cfg_file),\n            \"--run-dir\",\n            str(run_dir),\n        ]\n\n        print(f\"\\n===== Launching {run_id} =====\")\n        run_subprocess(cmd, run_dir)\n\n    # After all runs launch evaluation\n    eval_cmd = [\n        sys.executable,\n        \"-m\",\n        \"src.evaluate\",\n        \"--results-dir\",\n        str(results_dir),\n    ]\n    print(\"\\n===== Running aggregate evaluation =====\")\n    run_subprocess(eval_cmd, results_dir)\n\n\n# ----------------------------------------------------------------------------------\n\ndef parse_args():\n    p = argparse.ArgumentParser(description=\"OHGW Experiment Orchestrator\")\n    group = p.add_mutually_exclusive_group(required=True)\n    group.add_argument(\"--smoke-test\", action=\"store_true\")\n    group.add_argument(\"--full-experiment\", action=\"store_true\")\n    p.add_argument(\"--results-dir\", required=True, type=str, help=\"Directory to store outputs\")\n    return p.parse_args()\n\n\nif __name__ == \"__main__\":\n    args = parse_args()\n    root = Path(os.getcwd())\n    results_dir = Path(args.results_dir).expanduser().absolute()\n    results_dir.mkdir(parents=True, exist_ok=True)\n\n    cfg_file = root / \"config\" / (\"smoke_test.yaml\" if args.smoke_test else \"full_experiment.yaml\")\n    orchestrate(cfg_file, results_dir)\n",
    "pyproject_toml": "[project]\nname = \"ohgw-experiments\"\nversion = \"0.1.0\"\ndescription = \"Common core foundation for OHGW experiments\"\nreadme = \"README.md\"\nrequires-python = \">=3.10\"\ndependencies = [\n    \"torch>=2.0\",\n    \"torchvision>=0.15\",\n    \"pyyaml>=6.0\",\n    \"tqdm>=4.65\",\n    \"matplotlib>=3.7\",\n    \"seaborn>=0.12\",\n    \"pandas>=1.5\",\n    \"scipy>=1.10\"\n]\n\n[tool.setuptools.packages.find]\nwhere = [\"src\"]\n",
    "smoke_test_yaml": "# config/smoke_test.yaml\n# Lightweight smoke test with synthetic data ensuring the full pipeline works in <1 min.\nvariations:\n  smoke_baseline:\n    dataset:\n      name: FakeData\n      params: {size: 256, image_size: [3,32,32], num_classes: 10}\n    model:\n      name: SimpleCNN\n      params: {num_classes: 10}\n    training:\n      epochs: 2\n      batch_size: 32\n      learning_rate: 0.01\n      weight_decay: 0.0005\n      momentum: 0.9\n      num_workers: 0\n    ohgw:\n      enabled: false\n\n  smoke_ohgw:\n    dataset:\n      name: FakeData\n      params: {size: 256, image_size: [3,32,32], num_classes: 10}\n    model:\n      name: SimpleCNN\n      params: {num_classes: 10}\n    training:\n      epochs: 2\n      batch_size: 32\n      learning_rate: 0.01\n      weight_decay: 0.0005\n      momentum: 0.9\n      num_workers: 0\n    ohgw:\n      enabled: true\n      eta_h: 0.001\n",
    "full_experiment_yaml": "# config/full_experiment.yaml\n# Complete configuration for the CIFAR-10 OHGW study (exp-1)\nvariations:\n  asha-baseline:\n    dataset:\n      name: CIFAR10\n      params:\n        val_split: 5000\n        augment_magnitude: 0          # no RandAugment for baseline training\n        cutout: 16\n    model:\n      name: ResNet20\n      params:\n        num_classes: 10\n    training:\n      epochs: 200\n      batch_size: 128\n      learning_rate: 0.1\n      weight_decay: 0.0005\n      momentum: 0.9\n      scheduler: cosine\n      label_smoothing: 0.0\n      num_workers: 8\n    ohgw:\n      enabled: false\n\n  asha-random-warm:\n    dataset:\n      name: CIFAR10\n      params:\n        val_split: 5000\n        augment_magnitude: 0\n        cutout: 16\n    model:\n      name: ResNet20\n      params:\n        num_classes: 10\n    training:\n      epochs: 200\n      batch_size: 128\n      learning_rate: 0.1\n      weight_decay: 0.0005\n      momentum: 0.9\n      scheduler: cosine\n      label_smoothing: 0.0\n      num_workers: 8\n    ohgw:\n      enabled: true\n      mode: random\n      sigma: 0.01\n\n  asha-ohgw-1step:\n    dataset:\n      name: CIFAR10\n      params:\n        val_split: 5000\n        augment_magnitude: 0\n        cutout: 16\n    model:\n      name: ResNet20\n      params:\n        num_classes: 10\n    training:\n      epochs: 200\n      batch_size: 128\n      learning_rate: 0.1\n      weight_decay: 0.0005\n      momentum: 0.9\n      scheduler: cosine\n      label_smoothing: 0.0\n      num_workers: 8\n    ohgw:\n      enabled: true\n      mode: hyper\n      eta_h: 0.001\n      steps: 1\n\n  asha-ohgw-3step:\n    dataset:\n      name: CIFAR10\n      params:\n        val_split: 5000\n        augment_magnitude: 0\n        cutout: 16\n    model:\n      name: ResNet20\n      params:\n        num_classes: 10\n    training:\n      epochs: 200\n      batch_size: 128\n      learning_rate: 0.1\n      weight_decay: 0.0005\n      momentum: 0.9\n      scheduler: cosine\n      label_smoothing: 0.0\n      num_workers: 8\n    ohgw:\n      enabled: true\n      mode: hyper\n      eta_h: 0.001\n      steps: 3\n"
}
